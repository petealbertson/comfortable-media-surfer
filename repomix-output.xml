This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.log, tmp/*, node_modules, db/seeds, docs.yml, app/assets/javascripts/comfy_admin.js, test/fixtures/*, app/assets/stylesheets/comfy_admin.css, lib/tasks/logs.json, lib/tasks/logs.rb, app/assets/images/crest.svg, db/cms_seeds, app/assets/*/comfy/vendor
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    coveralls.yml
    rubyonrails.yml
  dependabot.yml
  issue_template.md
  pull_request_template.md
app/
  assets/
    config/
      manifest.js
    javascripts/
      comfy/
        admin/
          cms/
            application.js
            base.js
            categories.js
            codemirror.js
            custom.js
            diff.js
            file_link.js
            file_upload.js
            files_modal.js
            page_fragments.js
            slugify.js
            sortable_list.js
            timepicker.js
            wysiwyg.js
    stylesheets/
      comfy/
        admin/
          cms/
            application.sass
            base.sass
            codemirror_overrides.sass
            custom.sass
            redactor_overrides.sass
  controllers/
    comfy/
      admin/
        cms/
          revisions/
            base_controller.rb
            layout_controller.rb
            page_controller.rb
            snippet_controller.rb
            translation_controller.rb
          base_controller.rb
          categories_controller.rb
          files_controller.rb
          layouts_controller.rb
          pages_controller.rb
          sites_controller.rb
          snippets_controller.rb
          translations_controller.rb
        base_controller.rb
      cms/
        assets_controller.rb
        base_controller.rb
        content_controller.rb
    concerns/
      comfy/
        paginate.rb
        reorder_action.rb
    application_controller.rb
  helpers/
    comfy/
      admin/
        cms_helper.rb
      cms_helper.rb
  models/
    comfy/
      cms/
        categorization.rb
        category.rb
        file.rb
        fragment.rb
        layout.rb
        page.rb
        revision.rb
        site.rb
        snippet.rb
        translation.rb
    concerns/
      comfy/
        cms/
          with_categories.rb
          with_fragments.rb
  views/
    comfy/
      admin/
        cms/
          categories/
            _categories.html.haml
            _edit.html.haml
            _form.html.haml
            _index.html.haml
            _show.html.haml
            create.js.erb
            destroy.js.erb
            edit.js.erb
            update.js.erb
          files/
            _file.html.haml
            _form.html.haml
            _modal.html.haml
            destroy.js.erb
            edit.html.haml
            index.html.haml
            new.html.haml
          fragments/
            _form_fragment_attachments.html.haml
            _form_fragments.html.haml
          layouts/
            _form.html.haml
            _index_branch.html.haml
            edit.html.haml
            index.html.haml
            new.html.haml
          pages/
            _form.html.haml
            _index_branch.html.haml
            edit.html.haml
            index.html.haml
            new.html.haml
            toggle_branch.js.erb
          revisions/
            _sidebar.html.haml
            show.html.haml
          sites/
            _form.html.haml
            edit.html.haml
            index.html.haml
            new.html.haml
          snippets/
            _form.html.haml
            edit.html.haml
            index.html.haml
            new.html.haml
          translations/
            _form.html.haml
            _sidebar.html.haml
            edit.html.haml
            new.html.haml
    kaminari/
      comfy/
        _first_page.html.haml
        _gap.html.haml
        _last_page.html.haml
        _next_page.html.haml
        _page.html.haml
        _paginator.html.haml
        _prev_page.html.haml
    layouts/
      comfy/
        admin/
          cms/
            _body.html.haml
            _flash.html.haml
            _footer_js.html.haml
            _head.html.haml
            _left.html.haml
            _right.html.haml
          cms.html.haml
bin/
  bundle
  rails
  rake
  setup
  update
  yarn
config/
  environments/
    development.rb
    production.rb
    test.rb
  initializers/
    comfortable_media_surfer.rb
    content_security_policy.rb
    filter_parameter_logging.rb
    inflections.rb
    json.rb
    new_framework_defaults_7_0.rb
    new_framework_defaults_7_1.rb
    permissions_policy.rb
  locales/
    ar.yml
    ca.yml
    cs.yml
    da.yml
    de.yml
    en.yml
    es.yml
    fi.yml
    fr.yml
    gr.yml
    hr.yml
    it.yml
    ja.yml
    nb.yml
    nl.yml
    pl.yml
    pt-BR.yml
    ru.yml
    sk.yml
    sv.yml
    tr.yml
    uk.yml
    zh-CN.yml
    zh-TW.yml
  application.rb
  boot.rb
  cable.yml
  cms_routes.rb
  database.yml
  environment.rb
  puma.rb
  storage.yml
db/
  migrate/
    00_create_active_storage_tables.active_storage.rb
    01_create_cms.rb
gemfiles/
  7.1.gemfile
  7.2.gemfile
  8.0.gemfile
lib/
  comfortable_media_surfer/
    access_control/
      admin_authentication.rb
      admin_authorization.rb
      public_authentication.rb
      public_authorization.rb
    content/
      tags/
        mixins/
          file_content.rb
        asset.rb
        audio.rb
        breadcrumbs.rb
        checkbox.rb
        children.rb
        date.rb
        datetime.rb
        file_link.rb
        file.rb
        files.rb
        fragment.rb
        helper.rb
        image.rb
        markdown.rb
        number.rb
        page_file_link.rb
        partial.rb
        siblings.rb
        snippet.rb
        template.rb
        text.rb
        textarea.rb
        wysiwyg.rb
      block.rb
      params_parser.rb
      renderer.rb
      tag.rb
      tags.rb
    extensions/
      acts_as_tree.rb
      has_revisions.rb
    seeds/
      file/
        exporter.rb
        importer.rb
      layout/
        exporter.rb
        importer.rb
      page/
        exporter.rb
        importer.rb
      snippet/
        exporter.rb
        importer.rb
    configuration.rb
    content.rb
    engine.rb
    error.rb
    extensions.rb
    form_builder.rb
    render_methods.rb
    routing.rb
    seeds.rb
    version.rb
    view_hooks.rb
  generators/
    comfy/
      cms/
        assets_generator.rb
        cms_generator.rb
        controllers_generator.rb
        models_generator.rb
        README
        views_generator.rb
      scaffold/
        templates/
          tests/
            controller.rb.tt
            fixture.yml.tt
            model.rb.tt
          views/
            _form.haml.tt
            edit.haml.tt
            index.haml.tt
            new.haml.tt
            show.haml.tt
          controller.rb.tt
          migration.rb.tt
          model.rb.tt
        scaffold_generator.rb
  tasks/
    cms_assets.rake
    cms_seeds.rake
  comfortable_media_surfer.rb
rakelib/
  create_release.rake
test/
  controllers/
    comfy/
      admin/
        cms/
          revisions/
            layout_controller_test.rb
            page_controller_test.rb
            snippet_controller_test.rb
            translation_controller_test.rb
          base_controller_test.rb
          categories_controller_test.rb
          files_controller_test.rb
          layouts_controller_test.rb
          pages_controller_test.rb
          sites_controller_test.rb
          snippets_controller_test.rb
          translations_controller_test.rb
      cms/
        assets_controller_test.rb
        content_controller_test.rb
  fixtures/
    active_storage/
      attachments.yml
      blobs.yml
    comfy/
      cms/
        categories.yml
        categorizations.yml
        files.yml
        fragments.yml
        layouts.yml
        pages.yml
        revisions.yml
        sites.yml
        snippets.yml
        translations.yml
    files/
      image.svg
    generators/
      cms/
        application.rb
        routes.rb
      scaffold/
        tests/
          controller.rb
          fixture
          model.rb
        views/
          _form.haml
          edit.haml
          index.haml
          new.haml
          show.haml
        controller.rb
        migration.rb
        model.rb
        routes.rb
    views/
      render_test/
        _test.html.erb
        new.html.erb
        render_layout.html.erb
      _nav_hook_2.html.erb
      _nav_hook.html.erb
  generators/
    cms_assets_generator_test.rb
    cms_controllers_generator_test.rb
    cms_generator_test.rb
    cms_models_generator_test.rb
    cms_views_generator_test.rb
    scaffold_generator_test.rb
  helpers/
    admin_cms_helper_test.rb
    cms_helper_test.rb
  integration/
    access_control_test.rb
    i18n_test.rb
    meta_variables_test.rb
    render_cms_test.rb
    routing_test.rb
    seeds_test.rb
    sites_test.rb
    view_hooks_test.rb
  lib/
    content/
      tags/
        asset_test.rb
        audio_test.rb
        breadcrumbs_test.rb
        checkbox_test.rb
        children_test.rb
        date_test.rb
        datetime_test.rb
        file_link_test.rb
        file_test.rb
        files_test.rb
        fragment_test.rb
        helper_test.rb
        image_test.rb
        markdown_test.rb
        number_test.rb
        page_file_link_test.rb
        partial_test.rb
        siblings_test.rb
        snippet_test.rb
        template_test.rb
        text_test.rb
        textarea_test.rb
        wysiwyg_test.rb
      block_test.rb
      params_parser_test.rb
      renderer_test.rb
      tag_test.rb
    routes/
      admin_routes_test.rb
    seeds/
      files_test.rb
      layouts_test.rb
      pages_test.rb
      snippets_test.rb
    configuration_test.rb
    form_builder_test.rb
    revisions_test.rb
    seeds_test.rb
    version_test.rb
  models/
    categorization_test.rb
    category_test.rb
    file_test.rb
    fragment_test.rb
    layout_test.rb
    page_test.rb
    site_test.rb
    snippet_test.rb
    translation_test.rb
  system/
    categories_frontend_test.rb
    files_frontend_test.rb
    layouts_frontend_test.rb
    pages_frontend_test.rb
    sites_frontend_test.rb
    snippets_frontend_test.rb
  tasks/
    cms_seeds_test.rb
  test_helper.rb
.codeclimate.yml
.gitattributes
.gitignore
.rubocop.yml
.travis.yml
CHANGELOG.md
comfortable_media_surfer.gemspec
config.ru
CONTRIBUTING.md
Gemfile
LICENSE
package.json
Rakefile
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/pull_request_template.md">
### Summary

General information about what this PR is all about. If it fixes any issues
please don't forget to tag them.

Thanks for contributing!
</file>

<file path="app/assets/javascripts/comfy/admin/cms/categories.js">
(() => {
  window.CMS.categories = (root = document) => {
    const widget = root.querySelector('.categories-widget');
    if (widget === null) return;
    const readSection = widget.querySelector('.read');
    const editSection = widget.querySelector('.editable');
    widget.querySelector('.read button.toggle-cat-edit').addEventListener('click', () => {
      readSection.style.display = 'none';
      editSection.style.display = 'block';
    });
    widget.querySelector('.editable button.toggle-cat-edit').addEventListener('click', () => {
      editSection.style.display = 'none';
      readSection.style.display = 'block';
    });
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/custom.js">
// Custom JS for the admin area
</file>

<file path="app/assets/javascripts/comfy/admin/cms/page_fragments.js">
window.CMS.pageFragments = () => {
  const toggle = document.querySelector('select#fragments-toggle');
  if (toggle === null) return;
  const url = new URL(toggle.dataset.url, document.location.href);
  toggle.addEventListener('change', () => {
    url.searchParams.set('layout_id', toggle.value);
    fetch(url, {credentials: 'same-origin'}).then((resp) => resp.text()).then((html) => {
      const container = document.querySelector('#form-fragments-container');
      container.innerHTML = html;
      // TODO: Only dispose of the widgets that were within the fragment.
      CMS.wysiwyg.dispose();
      CMS.timepicker.dispose();
      CMS.codemirror.dispose();

      CMS.fileLinks(container);
      // TODO: Container should also be passed here once the TODO above is addressed.
      CMS.wysiwyg.init();
      CMS.timepicker.init();
      CMS.codemirror.init();
    });
  });
};
</file>

<file path="app/assets/javascripts/comfy/admin/cms/slugify.js">
(() => {
  const SLUGIFY_REPLACEMENTS = [
    [/[àáâã]/g, 'a'],
    [/ä/g, 'ae'],
    [/[èéëê]/g, 'e'],
    [/[ìíïî]/g, 'i'],
    [/[òóôõ]/g, 'o'],
    [/ö/g, 'oe'],
    [/[ùúû]/g, 'u'],
    [/ü/g, 'ue'],
    [/ñ/g, 'n'],
    [/ç/g, 'c'],
    [/ß/g, 'ss'],
    [/[·\/,:;_ ]/g, '-']
  ];

  const slugifyValue = (value) => {
    let slug = value.trim().toLowerCase();
    for (const [from, to] of SLUGIFY_REPLACEMENTS) {
      slug = slug.replace(from, to);
    }
    // Remove any other URL incompatible characters and replace multiple dashes with just a single one.
    return slug.replace(/[^a-z0-9-]/g, '').replace(/-+/g, '-');
  };

  window.CMS.slugify = () => {
    const input = document.querySelector('input[data-slugify=true]');
    const slugInput = document.querySelector('input[data-slug]');
    if (input === null || slugInput === null) return;
    input.addEventListener('input', () => {
      slugInput.value = slugifyValue(input.value);
    });
  };
})();
</file>

<file path="app/assets/stylesheets/comfy/admin/cms/base.sass">
body#comfy

  .comfy-admin-partial
    background-color: $gray-200
    color: $black
    font-size: 9px
    line-height: 11px
    padding: 5px
    background-image: linear-gradient(-45deg, rgba(0, 0, 0, .05) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, .05) 50%, rgba(0, 0, 0, .05) 75%, transparent 75%, transparent)
    background-size: 50px 50px
    overflow: hidden
    width: 100%

  .alert
    border-radius: 0
    margin: 0 -15px 1rem -15px
    text-align: center

  .fragment-attachments
    padding: 5px 0
    .fragment-attachment
      input[type="checkbox"]
        display: none
        & + label
          margin-bottom: 0
          color: $gray-400
        &:checked + label
          background-color: $red
          color: $white

  #cms-left
    position: fixed
    top: 0
    bottom: 0
    left: 0
    z-index: 1001
    padding: 0

    button.navbar-toggler
      color: $white

    nav.navbar
      padding: 1rem

      ul.nav
        width: 100%
        li
          position: relative
          width: 100%
          a
            color: $gray-500
          a:hover, a.active
            color: $white
            background-color: $gray-700
          a.cms-files-open-modal
            height: 26px
            width: 26px
            line-height: 26px
            position: absolute
            text-align: center
            right: 0
            top: 7px
            border-radius: 0.25rem

    .left-footer
      padding: 5px
      position: absolute
      width: 100%
      text-align: center
      bottom: 0
      font-size: 12px
      color: $white
      a
        color: $gray-500

    @media (max-width: map-get($grid-breakpoints, lg))
      right: 0
      bottom: auto
      nav.navbar
        padding: 0.5rem
      .left-footer
        display: none

  #cms-right
    background-color: $gray-100
    position: fixed
    top: 0
    bottom: 0
    right: 0
    z-index: 999
    padding: 0

    @media (max-width: map-get($grid-breakpoints, lg))
      position: relative
      padding-bottom: 3.5rem

    .box
      padding: 1rem
      margin-bottom: 1rem
      background-color: $white
      border: 1px solid $gray-200
    .box.translations
      a.translation
        color: $black
      a.draft
        color: $gray-600

    .box.categories-widget
      .editable
        display: none
      .categories .category, form#new-category, form.edit-category
        margin-bottom: 0.25rem

  #cms-main
    padding-bottom: 3.5rem

    @media (max-width: map-get($grid-breakpoints, lg))
      padding-top: 3rem
      padding-bottom: 0

    .page-header
      margin: 1rem 0
      border-bottom: 1px solid $gray-300

    .form-actions
      padding: 0.5rem
      position: fixed
      bottom: 0
      left: 0
      right: 0
      z-index: 1000
      border-top: 1px solid $gray-200

    ul.list
      %item-active
        background-color: $white
      %control-active
        color: $gray-800
      padding: 0
      li
        list-style: none
        ul
          padding-left: 0
        .row
          background-color: $gray-100
          margin-bottom: 5px
          padding: 5px 0
          .item
            display: flex
            .item-controls
              padding: 2px 0
              .dragger, .toggle
                margin-right: 15px
                display: block
                color: $gray-500
              .dragger
                cursor: move
              .toggle
                .collapse
                  display: none
                .expand
                  display: inline
                &:hover
                  @extend %control-active
              .toggle.open
                .collapse
                  display: inline
                .expand
                  display: none

            .item-content
              .item-title
                a
                  font-size: 1.2rem
                  color: $black
                a.draft
                  color: $gray-600
              .item-meta
                font-size: 0.75rem
          .btn-group
            background-color: $white
        &.sortable-ghost, &.sortable-chosen
          > .row
            @extend %item-active
            > .item > .item-controls > .dragger
              @extend %control-active
      &:not(.sortable-active) > li
        >.row
          &:hover
            @extend %item-active
          > .item > .item-controls
            .dragger
              &:hover
                @extend %control-active


  // -- Pages ------------------------------------------------------------------
  &.c-comfy-admin-cms-pages, &.c-comfy-admin-cms-translations
    #form-fragments
      ul.nav-tabs
        margin-bottom: 1rem
      label.renderable-false
        color: $gray-600

  // -- Files ------------------------------------------------------------------
  .cms-files-modal
    z-index: 99999
    .modal-dialog
      max-width: 900px
    .modal-content
      max-height: calc(100vh - 60px)
    .modal-body
      overflow-y: auto

  // -- Revisions --------------------------------------------------------------
  &[class*="c-comfy-admin-cms-revisions-"], &[class*="c-comfy-admin-blog-revisions-"]
    .label
      padding: 15px 0
      font-weight: bold
    .revision
      margin-bottom: 5px
      .content
        padding: 15px 0
        ins, del
          display: inline
        ins
          background-color: #c6ffc6
          text-decoration: none
        del
          background-color: #ffc6c6

#cms-uploader
  ul.list
    .file-path
      border: 0
      color: $gray-500
      background: inherit
      white-space: nowrap
      user-select: all
    .progress
      width: 100%
      height: 25px
  form
    .file-image
      img
        width: 100%

  .cms-uploader-drag-drop-target-active
    position: fixed !important
    z-index: 9999
    top: 0
    left: 0
    width: 100%
    height: 100%
    border: dotted #ccc 1px
    background-color: rgba(255, 255, 255, 0.7)
</file>

<file path="app/assets/stylesheets/comfy/admin/cms/custom.sass">
// custom CSS for admin area
</file>

<file path="app/assets/stylesheets/comfy/admin/cms/redactor_overrides.sass">
.redactor-box
  margin-bottom: 0px
  textarea, .redactor-editor
    resize: vertical

#redactor-modal
  header.ui-draggable-handle
    padding: 20px

  #redactor-modal-body
    section
      padding: 0 20px 20px 20px

      #redactor-droparea-placeholder
        input[type=file]
          display: inline
      #redactor-image-manager-box
        img
          margin: 0 5px 5px 0
          opacity: 0.75
        img:hover
          opacity: 1
</file>

<file path="app/views/comfy/admin/cms/categories/_categories.html.haml">
- object ||= categories
- object.categories.each do |category|
  %span.badge.badge-primary.mr-1.mb-1
    = category.label
</file>

<file path="app/views/comfy/admin/cms/categories/_form.html.haml">
- object = form.object
- if (categories = @site.categories.of_type(object.class.to_s)).present?
  - options = {bootstrap: {check_inline: true, label: {text: t(".label"), class: "pt-0"}}}
  = form.collection_check_boxes :category_ids, categories, :id, :label, options
</file>

<file path="app/views/comfy/admin/cms/categories/_show.html.haml">
- read        ||= false
- categories  = [params[:categories]].flatten.compact
- active      = categories.flatten.member?(category.label)

.category{id: dom_id(category)}
  - if read
    - active_class = active ? "active" : nil
    - categories = active ? categories.reject{|c| c == category.label} : categories << category.label
    - url = "?#{{categories: categories}.to_query}"
    = link_to category.label, url, class: "btn btn-sm btn-light btn-block text-left text-truncate #{active_class}"
  - else
    .btn-group.d-flex
      = link_to category.label, edit_comfy_admin_cms_site_category_path(@site, category), remote: true, class: "btn btn-sm btn-light w-100 text-left text-truncate"
      = link_to comfy_admin_cms_site_category_path(@site, category), method: :delete, remote: true, data: {confirm: t('.are_you_sure')}, class: 'btn btn-sm btn-danger', aria: {label: "Delete Category"} do
        %i.fas.fa-fw.fa-times
</file>

<file path="app/views/comfy/admin/cms/categories/create.js.erb">
$('.categories-widget .editable .categories').append(
  '<%= escape_javascript(render "show", category: @category) %>'
);
$('.categories-widget .read .categories').append(
  '<%= escape_javascript(render "show", category: @category, read: true) %>'
);
$('.categories-widget .editable form#new-category input[name="category[label]"]').val('');
</file>

<file path="app/views/comfy/admin/cms/categories/destroy.js.erb">
(() => {
  const categoryElements = document.querySelectorAll('.categories .category#<%= dom_id(@category) %>');
  jQuery(categoryElements).fadeOut('slow', () => {
    for (const element of categoryElements) {
      element.remove();
    }
  });
})();
</file>

<file path="app/views/comfy/admin/cms/categories/edit.js.erb">
$('.editable .category#<%= dom_id(@category) %>').replaceWith(
  '<%= escape_javascript(render "edit", category: @category ) %>'
);
</file>

<file path="app/views/comfy/admin/cms/categories/update.js.erb">
$('.editable form#<%= dom_id(@category) %>').replaceWith(
  '<%= escape_javascript(render "show", category: @category ) %>'
);
$('.read .category#<%= dom_id(@category) %>').replaceWith(
  '<%= escape_javascript(render "show", category: @category, read: true) %>'
);
</file>

<file path="app/views/comfy/admin/cms/files/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/file_form_before", form: form

= form.text_field :label
= form.file_field :file

- unless @file.new_record?

  = form.form_group bootstrap: {label: {text: t('.current_file')}}do
    - if @file.attachment.image?
      .file-image
        = image_tag @file.attachment
    = link_to @file.attachment.filename, @file.attachment, target: '_blank'

= form.text_area :description

= render 'comfy/admin/cms/categories/form', form: form

= comfy_admin_partial 'comfy/admin/cms/partials/file_form_after', form: form

= form.form_actions do
  = submit_tag t(@file.new_record? ? ".create" : ".update"), class: "btn btn-primary"

  - unless @file.new_record?
    = link_to t(".delete"), comfy_admin_cms_site_file_path(@site, @file), method: :delete, data: {confirm: t(".are_you_sure")}, class: "btn btn-danger"

  = link_to t(".cancel"), comfy_admin_cms_site_files_path, class: "btn btn-link"
</file>

<file path="app/views/comfy/admin/cms/files/_modal.html.haml">
.modal.fade.cms-files-modal{'aria-hidden' => 'true', 'data-url' => comfy_admin_cms_site_files_path(@site, layout: false), role: 'dialog', tabindex: "-1"}
  .modal-dialog.modal-lg
    .modal-content
</file>

<file path="app/views/comfy/admin/cms/files/destroy.js.erb">
(() => {
  const listItem = document.querySelector('li[data-id="<%= @file.id %>"]');
  jQuery(listItem).fadeOut('slow', () => listItem.remove());
})();
</file>

<file path="app/views/comfy/admin/cms/files/edit.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @file, scope: :file, url: {action: :update} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/files/new.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @file, scope: :file, url: {action: :create}, html: {multipart: true} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/layouts/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/layout_form_before", form: form

= form.text_field :label, data: {slugify: @layout.new_record?}
= form.text_field :identifier, data: {slug: true}

- if (options = Comfy::Cms::Layout.options_for_select(@site, @layout)).present?
  = form.select :parent_id, [["---- #{t('.select_parent_layout')} ----", nil]] + options, bootstrap: {custom_control: true}

- if (options = Comfy::Cms::Layout.app_layouts_for_select(lookup_context.view_paths)).present?
  = form.select :app_layout, [["---- #{t('.select_app_layout')} ----", nil]] + options, bootstrap: {custom_control: true}

= form.text_area :content, data: {'cms-cm-mode' => 'text/html'}
= form.text_area :css, data: {'cms-cm-mode' => 'css'}
= form.text_area :js, data: {'cms-cm-mode' => 'javascript'}

= comfy_admin_partial "comfy/admin/cms/partials/layout_form_after", form: form

= form.form_actions do
  = submit_tag t(@layout.new_record? ? ".create" : ".update"), class: "btn btn-primary"
  = link_to t('.cancel'), comfy_admin_cms_site_layouts_path, class: "btn btn-link"
</file>

<file path="app/views/comfy/admin/cms/layouts/_index_branch.html.haml">
- layout      ||= index_branch
- has_siblings  = layout.siblings.select{|l| l.site_id == @site.id}.size > 0

%li{data: {id: layout.id}}
  .row
    .col-md-8.item
      .item-controls.d-none.d-md-block
        - if has_siblings
          .dragger
            %i.fas.fa-bars

      .item-content
        .item-title
          = link_to layout.label, edit_comfy_admin_cms_site_layout_path(@site, layout)
        .item-meta
          = layout.identifier

    .col-md-4.d-flex.align-items-center.justify-content-md-end
      .btn-group.btn-group-sm
        = link_to t('.add_child_layout'), new_comfy_admin_cms_site_layout_path(@site, parent_id: layout.id), class: "btn btn-outline-secondary"
        = link_to t('.edit'), edit_comfy_admin_cms_site_layout_path(@site, layout), class: "btn btn-outline-secondary"
        = link_to t('.delete'), comfy_admin_cms_site_layout_path(@site, layout), method: :delete, data: {confirm: t('.are_you_sure')}, class: "btn btn-danger"

  - if layout.children.present?
    %ul.list.children.sortable.pl-md-3
      = render partial: "index_branch", collection: layout.children.order(:position)
</file>

<file path="app/views/comfy/admin/cms/layouts/edit.html.haml">
- content_for :right_column do
  - link = comfy_admin_cms_site_layout_revisions_path(@site, @layout)
  = render "comfy/admin/cms/revisions/sidebar", record: @layout, link: link

.page-header
  %h2= t('.title')

= comfy_form_with model: @layout, scope: :layout, url: {action: :update} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/layouts/index.html.haml">
.page-header
  = link_to t('.new_link'), new_comfy_admin_cms_site_layout_path(@site), class: "btn btn-secondary float-right"
  %h2= t('.title')

= comfy_admin_partial "comfy/admin/cms/partials/layouts_before"

%ul.list.sortable
  = render partial: "index_branch", collection: @layouts

= comfy_admin_partial "comfy/admin/cms/partials/layouts_after"
</file>

<file path="app/views/comfy/admin/cms/layouts/new.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @layout, scope: :layout, url: {action: :create} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/pages/_index_branch.html.haml">
- page        ||= index_branch
- children      = @pages_by_parent[page.id]
- siblings      = @pages_by_parent[page.parent_id]
- has_children  = children.present?
- has_siblings  = siblings.size > 1
- branch_open   = (session[:cms_page_tree] || []).member?(page.id.to_s) || page.root?
- category_view = params[:categories].present?

%li{id: dom_id(page), data: {id: page.id}}
  .row

    .col-md-6.item
      - unless category_view
        .item-controls
          - if has_siblings
            .dragger.d-none.d-md-block
              %i.fas.fa-bars

          - if has_children && !page.root?
            - status = branch_open ? "open" : ""
            - url = toggle_branch_comfy_admin_cms_site_page_path(@site, page)
            = link_to url, remote: true, title: t(".toggle"), class: "toggle #{status}" do
              %i.fas.fa-plus-square.expand
              %i.fas.fa-minus-square.collapse

      .item-content
        .item-title
          - published_css_class = page.is_published? ? "published" : "draft"
          = link_to page.label, edit_comfy_admin_cms_site_page_path(@site, page), class: published_css_class
        .item-meta
          = link_to page.url, page.url, target: "_blank"

    .col-md-2.item-categories.d-flex.align-items-center
      = render "comfy/admin/cms/categories/categories", object: page

    .col-md-4.d-flex.align-items-center.justify-content-md-end
      .btn-group.btn-group-sm
        = link_to t(".add_child_page"), new_comfy_admin_cms_site_page_path(@site, parent_id: page.id), class: "btn btn-outline-secondary"
        = link_to t(".edit"), edit_comfy_admin_cms_site_page_path(@site, page), class: "btn btn-outline-secondary"
        = link_to t(".delete"), comfy_admin_cms_site_page_path(@site, page), method: :delete, data: {confirm: t('.are_you_sure')}, class: "btn btn-danger"

  - if !category_view && has_children && branch_open
    %ul.list.children.sortable.pl-md-3
      = render partial: "index_branch", collection: children
</file>

<file path="app/views/comfy/admin/cms/pages/edit.html.haml">
- content_for :right_column do
  - link = comfy_admin_cms_site_page_revisions_path(@site, @page)
  = render "comfy/admin/cms/revisions/sidebar", record: @page, link: link
  = render "comfy/admin/cms/translations/sidebar"

.page-header
  %h2= t('.title')

= comfy_form_with model: @page, scope: :page, url: {action: :update}, html: {multipart: true} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/pages/new.html.haml">
.page-header
  %h2= t('.title')

= comfy_form_with model: @page, scope: :page, url: {action: :create}, html: {multipart: true} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/pages/toggle_branch.js.erb">
// TODO: Extract this so the server only renders the HTML.
var li = $('li#comfy_cms_page_<%=@page.id%>');
li.find('.item .toggle').first().toggleClass('open');

<% if session[:cms_page_tree].member?(@page.id.to_s) %>
  if(!li.find('ul.children')[0]) {
    li.append('<ul class="children sortable pl-md-3"><%= escape_javascript(render partial: "index_branch", collection: @page.children) %></ul>');
    CMS.sortableList.dispose();
    CMS.sortableList.init();
  }
<% else %>
  li.find('ul.children').remove();
<% end %>
</file>

<file path="app/views/comfy/admin/cms/revisions/_sidebar.html.haml">
.box.revisions
  = link_to t('.revision', count: record.revisions.count), link, class: "btn btn-sm btn-info d-block"
</file>

<file path="app/views/comfy/admin/cms/revisions/show.html.haml">
- content_for :right_column do
  .box.revisions
    - @record.revisions.order(created_at: :desc).each do |revision|
      = active_link_to l(revision.created_at, format: :short), { id: revision.id }, class: "btn btn-sm btn-light d-block text-primary mb-1"

.page-header
  %h2
    = t('.title')
    = @record.class.to_s.demodulize

.row.d-none.d-lg-flex
  .col-lg-10.ml-auto
    .row
      .col-lg-6
        .label= t('.previous')
      .col-lg-6
        .label= t('.current')

- @current_content.each do |label, content|
  .row.revision
    .col-lg-2.text-lg-right.bg-light
      .label= label
    .col-lg-10
      .row
        .col-lg-6
          .content
            = safe_join @versioned_content[label].to_s.split("\n"), raw("<br/>")
        .col-lg-6.diff
          .original.d-none= @versioned_content[label]
          .current.d-none= content
          .content

= comfy_form_with model: @revision, url: { action: :revert } do |form|
  = form.form_actions do
    = submit_tag t(".update"), class: "btn btn-primary"
    = link_to t(".cancel"), record_path, class: "btn btn-link"
</file>

<file path="app/views/comfy/admin/cms/sites/edit.html.haml">
.page-header
  %h2= t('.title')

= comfy_form_with model: @site, scope: :site, url: {action: :update} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/sites/index.html.haml">
.page-header
  = link_to t('.new_link'), new_comfy_admin_cms_site_path, class: "btn btn-secondary float-right"
  %h2= t('.title')

= comfy_admin_partial "comfy/admin/cms/partials/sites_before"

%ul.list
  - @sites.each do |site|
    %li
      .row
        .col-md-8.item
          .item-content
            .item-title
              = link_to site.label, comfy_admin_cms_site_pages_path(site)
            .item-meta
              .identifier
                = site.identifier
                = "(#{site.locale})"
              .host
              = link_to site.url, site.url, target: '_blank'

        .col-md-4.d-flex.align-items-center.justify-content-md-end
          .btn-group.btn-group-sm
            = link_to t('.select'),  comfy_admin_cms_site_pages_path(site), class: 'btn btn-outline-secondary'
            = link_to t('.edit'), edit_comfy_admin_cms_site_path(site), class: 'btn btn-outline-secondary'
            = link_to t('.delete'), comfy_admin_cms_site_path(site), method: :delete, data: {confirm: t('.are_you_sure')}, class: 'btn btn-danger'

= comfy_admin_partial "comfy/admin/cms/partials/sites_after"
</file>

<file path="app/views/comfy/admin/cms/sites/new.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @site, scope: :site, url: {action: :create} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/snippets/edit.html.haml">
- content_for :right_column do
  - link = comfy_admin_cms_site_snippet_revisions_path(@site, @snippet)
  = render "comfy/admin/cms/revisions/sidebar", record: @snippet, link: link

.page-header
  %h2= t('.title')

= comfy_form_with model: @snippet, scope: :snippet, url: {action: :update} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/snippets/index.html.haml">
- content_for :right_column do
  = render "comfy/admin/cms/categories/index", type: "Comfy::Cms::Snippet"

.page-header
  = link_to t('.new_link'), new_comfy_admin_cms_site_snippet_path(@site), class: "btn btn-secondary float-right"
  %h2= t('.title')

= comfy_admin_partial "comfy/admin/cms/partials/snippets_before"

%ul.list.sortable
  - @snippets.each do |snippet|
    %li{data: {id: snippet.id}}
      .row
        .col-md-6.item
          .item-controls.d-none.d-lg-block
            - if !params[:categories].present? && @site.snippets.count > 1
              .dragger
                %i.fas.fa-bars
          .item-content
            .item-title
              = link_to snippet.label, edit_comfy_admin_cms_site_snippet_path(@site, snippet)
            .item-meta
              = snippet.identifier

        .col-md-2.item-categories.d-flex.align-items-center
          = render "comfy/admin/cms/categories/categories", object: snippet

        .col-md-4.d-flex.align-items-center.justify-content-md-end
          .btn-group.btn-group-sm
            = link_to t('.edit'), edit_comfy_admin_cms_site_snippet_path(@site, snippet), class: 'btn btn-outline-secondary'
            = link_to t('.delete'), comfy_admin_cms_site_snippet_path(@site, snippet), method: :delete, data: {confirm: t('.are_you_sure')}, class: 'btn btn-danger'

= comfy_admin_partial "comfy/admin/cms/partials/snippets_after"
</file>

<file path="app/views/comfy/admin/cms/snippets/new.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @snippet, scope: :snippet, url: {action: :create} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/translations/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/translation_form_before", form: form

= form.select :locale, translation_select_options

= form.text_field :label

- if (options = ::Comfy::Cms::Layout.options_for_select(@site)).present?
  = form.select :layout_id, options, {}, {data: {url: form_fragments_comfy_admin_cms_site_page_translation_path(@site, @page, @translation.id.to_i)}, id: "fragments-toggle"}

#form-fragments-container
  = render "comfy/admin/cms/fragments/form_fragments", record: @translation, scope: :translation

= form.check_box :is_published

= comfy_admin_partial "comfy/admin/cms/partials/translation_form_after", form: form

= form.form_actions do
  = submit_tag t(".preview"), name: "preview", formtarget: "comfy-cms-preview", id: nil, class: "btn btn-secondary", data: {disable_with: false}
  = submit_tag t(@translation.new_record? ? ".create" : ".update"), class: "btn btn-primary", data: {disable_with: false}
  = link_to t(".cancel"), edit_comfy_admin_cms_site_page_path(@site, @page), class: "btn btn-link"
</file>

<file path="app/views/comfy/admin/cms/translations/_sidebar.html.haml">
.box.translations

  = active_link_to edit_comfy_admin_cms_site_page_path(@site, @page), class: "btn btn-block btn-sm btn-light text-left text-truncate mb-1" do
    = content_tag(:span, @site.locale, class: "badge badge-light text-uppercase")
    = @page.label

  - @page.translations.each do |translation|
    .btn-group.btn-group-sm.d-flex.mb-1
      - url = edit_comfy_admin_cms_site_page_translation_path(@site, @page, translation)
      - published_css_class = translation.is_published? ? "published" : "draft"
      = active_link_to url, class: "#{published_css_class} translation btn text-left text-truncate btn-light w-100" do
        = content_tag(:span, translation.locale, class: "badge badge-light text-uppercase")
        = translation.label

      - url = comfy_admin_cms_site_page_translation_path(@site, @page, translation)
      = link_to url, method: :delete, data: {confirm: t(".confirm")}, class: "btn btn-danger" do
        %i.fas.fa-fw.fa-times

  = link_to t(".new"), new_comfy_admin_cms_site_page_translation_path(@site, @page), class: "btn btn-sm btn-secondary d-block mb-1"
</file>

<file path="app/views/comfy/admin/cms/translations/edit.html.haml">
- content_for :right_column do
  - link = comfy_admin_cms_site_page_translation_revisions_path(@site, @page, @translation)
  = render "comfy/admin/cms/revisions/sidebar", record: @translation, link: link
  = render "comfy/admin/cms/translations/sidebar"

.page-header
  %h2= t('.title')

= comfy_form_with model: @translation, scope: :translation, url: {action: :update}, html: {multipart: true} do |form|
  = render form
</file>

<file path="app/views/comfy/admin/cms/translations/new.html.haml">
.page-header
  %h2= t(".title")

= comfy_form_with model: @translation, scope: :translation, url: {action: :create}, html: {multipart: true} do |form|
  = render form
</file>

<file path="app/views/kaminari/comfy/_gap.html.haml">
%li.page.item.disabled
  = link_to raw(t 'views.pagination.truncate'), '#', class: 'page-link'
</file>

<file path="app/views/kaminari/comfy/_last_page.html.haml">
- unless current_page.last?
  %li.page-item
    = link_to_unless current_page.last?, raw(t 'views.pagination.last'), url, class: 'page-link', remote: remote
</file>

<file path="app/views/kaminari/comfy/_next_page.html.haml">
%li.page-item
  = link_to_unless current_page.last?, raw(t 'views.pagination.next'), url, rel: 'next', remote: remote, class: 'page-link'
</file>

<file path="app/views/kaminari/comfy/_page.html.haml">
%li{class: "page-item#{' active' if page.current?}"}
  = link_to page, url, opts = {remote: remote, class: 'page-link', rel: page.next? ? 'next' : page.prev? ? 'prev' : nil}
</file>

<file path="app/views/kaminari/comfy/_paginator.html.haml">
= paginator.render do
  %ul.pagination.pagination-sm
    = first_page_tag unless current_page.first?
    = prev_page_tag unless current_page.first?
    - each_page do |page|
      - if page.left_outer? || page.right_outer? || page.inside_window?
        = page_tag page
      - elsif !page.was_truncated?
        = gap_tag
    = next_page_tag unless current_page.last?
    = last_page_tag unless current_page.last?
</file>

<file path="app/views/kaminari/comfy/_prev_page.html.haml">
%li
  = link_to_unless current_page.first?, raw(t 'views.pagination.previous'), url, :rel => 'prev', :remote => remote, class: 'page-link'
</file>

<file path="app/views/layouts/comfy/admin/cms/_body.html.haml">
%body#comfy{class: "c-#{params[:controller].parameterize} a-#{params[:action].parameterize}"}

  .container-fluid
    .row
      #cms-left.col-lg-2.bg-dark
        = render "layouts/comfy/admin/cms/left"
      #cms-main.col-lg-8.m-auto
        = render "layouts/comfy/admin/cms/flash"
        = yield
        = render 'comfy/admin/cms/files/modal' if @site && !@site.new_record?
      #cms-right.col-lg-2
        = render 'layouts/comfy/admin/cms/right'

  = render "layouts/comfy/admin/cms/footer_js"
</file>

<file path="app/views/layouts/comfy/admin/cms/_flash.html.haml">
- flash.each do |type, message|
  .alert{:class => "alert-#{type}"}
    %button.close{:type => 'button', :class => "close", :data => {:dismiss => 'alert'}} &times;
    = message
</file>

<file path="app/views/layouts/comfy/admin/cms/_footer_js.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/html_footer"

= javascript_include_tag "comfy/admin/cms/application", "data-turbolinks-track": "reload"

- if content_for(:javascript)
  = yield :javascript
</file>

<file path="app/views/layouts/comfy/admin/cms/_right.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/right_column_before"

= yield :right_column

= comfy_admin_partial "comfy/admin/cms/partials/right_column_after"
</file>

<file path="app/views/layouts/comfy/admin/cms.html.haml">
!!!
%html{lang: I18n.locale}
  = render 'layouts/comfy/admin/cms/head'
  = render 'layouts/comfy/admin/cms/body'
</file>

<file path="bin/bundle">
#!/usr/bin/env ruby
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)
load Gem.bin_path('bundler', 'bundle')
</file>

<file path="bin/rails">
#!/usr/bin/env ruby
APP_PATH = File.expand_path('../config/application', __dir__)
require_relative '../config/boot'
require 'rails/commands'
</file>

<file path="bin/rake">
#!/usr/bin/env ruby
require_relative '../config/boot'
require 'rake'
Rake.application.run
</file>

<file path="bin/setup">
#!/usr/bin/env ruby
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file.

  puts '== Installing dependencies =='
  system! 'gem install bundler --conservative'
  system('bundle check') || system!('bundle install')

  # Install JavaScript dependencies if using Yarn
  # system('bin/yarn')

  # puts "\n== Copying sample files =="
  # unless File.exist?('config/database.yml')
  #   cp 'config/database.yml.sample', 'config/database.yml'
  # end

  puts "\n== Preparing database =="
  system! 'bin/rails db:setup'

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting application server =="
  system! 'bin/rails restart'
end
</file>

<file path="bin/update">
#!/usr/bin/env ruby
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

chdir APP_ROOT do
  # This script is a way to update your development environment automatically.
  # Add necessary update steps to this file.

  puts '== Installing dependencies =='
  system! 'gem install bundler --conservative'
  system('bundle check') || system!('bundle install')

  # Install JavaScript dependencies if using Yarn
  # system('bin/yarn')

  puts "\n== Updating database =="
  system! 'bin/rails db:migrate'

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting application server =="
  system! 'bin/rails restart'
end
</file>

<file path="bin/yarn">
#!/usr/bin/env ruby
VENDOR_PATH = File.expand_path('..', __dir__)
Dir.chdir(VENDOR_PATH) do
  begin
    exec "yarnpkg #{ARGV.join(' ')}"
  rescue Errno::ENOENT
    $stderr.puts "Yarn executable was not detected in the system."
    $stderr.puts "Download Yarn at https://yarnpkg.com/en/docs/install"
    exit 1
  end
end
</file>

<file path="config/storage.yml">
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   keyfile: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket

# Use rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   path: your_azure_storage_path
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]
</file>

<file path="lib/generators/comfy/scaffold/templates/tests/fixture.yml.tt">
default:
<%- model_attrs.each do |attr| -%>
  <%= attr.name %>: default <%= attr.name %>
<%- end -%>
</file>

<file path="lib/generators/comfy/scaffold/templates/tests/model.rb.tt">
require_relative '../test_helper'

class <%= class_name %>Test < ActiveSupport::TestCase

  def test_fixtures_validity
    <%= class_name %>.all.each do |<%= file_name %>|
      assert <%= file_name %>.valid?, <%= file_name %>.errors.inspect
    end
  end

  def test_validation
    <%= file_name %> = <%= class_name %>.new
    assert <%= file_name %>.invalid?
    assert_equal [<%= model_attrs.collect{|attr| ":#{attr.name}"}.join(', ')%>], <%= file_name %>.errors.keys
  end

  def test_creation
    assert_difference '<%= class_name %>.count' do
      <%= class_name %>.create(
      <%- model_attrs.each do |attr| -%>
        <%= attr.name %>: 'test <%= attr.name %>',
      <%- end -%>
      )
    end
  end
end
</file>

<file path="lib/generators/comfy/scaffold/templates/views/_form.haml.tt">
<%- model_attrs.each do |attr| -%>
= form.text_field :<%= attr.name %>
<%- end -%>

= form.form_actions do
  = form.submit class: "btn btn-primary"
  = link_to 'Cancel', admin_<%= file_name.pluralize %>_path, class: "btn btn-link"
</file>

<file path="lib/generators/comfy/scaffold/templates/views/edit.haml.tt">
.page-header
  %h2 Edit <%= class_name.titleize %>

= comfy_form_with model: @<%= file_name %>, url: [:admin, @<%= file_name %>] do |form|
  = render form
</file>

<file path="lib/generators/comfy/scaffold/templates/views/index.haml.tt">
.page-header
  = link_to 'New <%= class_name.titleize %>', new_admin_<%= file_name %>_path, class: 'btn btn-secondary float-right'
  %h2= '<%= class_name.pluralize.titleize %>'

= paginate @<%= file_name.pluralize %>, theme: 'comfy'

%ul.list
  - @<%= file_name.pluralize %>.each do |<%= file_name %>|
    %li
      .row
        .col-md-8.item
          .item-content
            .item-title
              = <%= file_name%>.<%= model_attrs.first.name %>

        .col-md-4.d-flex.align-items-center.justify-content-md-end
          .btn-group.btn-group-sm
            = link_to 'Edit', edit_admin_<%= file_name %>_path(<%= file_name %>), class: 'btn btn-outline-secondary'
            = link_to 'Delete', admin_<%= file_name %>_path(<%= file_name %>), method: :delete, data: {confirm: 'Are you sure?'}, class: 'btn btn-danger'

= paginate @<%= file_name.pluralize %>, theme: 'comfy'
</file>

<file path="lib/generators/comfy/scaffold/templates/views/new.haml.tt">
.page-header
  %h2 New <%= class_name.titleize %>

= comfy_form_with model: @<%= file_name %>, url: [:admin, @<%= file_name %>] do |form|
  = render form
</file>

<file path="lib/generators/comfy/scaffold/templates/views/show.haml.tt">
.page-header
  %h2 <%= class_name.titleize %>

= debug @<%= file_name %>
</file>

<file path="lib/generators/comfy/scaffold/templates/migration.rb.tt">
class Create<%= class_name.pluralize %> < ActiveRecord::Migration[5.2]

  def change
    create_table :<%= file_name.pluralize %> do |t|
    <%- model_attrs.each do |attr| -%>
      t.<%= attr.type %> :<%= attr.name %>
    <%- end -%>
      t.timestamps
    end
  end
end
</file>

<file path="lib/generators/comfy/scaffold/templates/model.rb.tt">
class <%= class_name %> < ActiveRecord::Base

  # -- Relationships -----------------------------------------------------------


  # -- Callbacks ---------------------------------------------------------------


  # -- Validations -------------------------------------------------------------


  # -- Scopes ------------------------------------------------------------------


  # -- Class Methods -----------------------------------------------------------


  # -- Instance Methods --------------------------------------------------------


end
</file>

<file path="test/fixtures/active_storage/attachments.yml">
default:
  record: default (Comfy::Cms::File)
  name: attachment
  blob: default

file:
  record: file (Comfy::Cms::Fragment)
  name: attachments
  blob: fragment
</file>

<file path="test/fixtures/comfy/cms/categories.yml">
default:
  site: default
  label: Default
  categorized_type: Comfy::Cms::File
</file>

<file path="test/fixtures/comfy/cms/categorizations.yml">
default:
  category: default
  categorized: default (Comfy::Cms::File)
</file>

<file path="test/fixtures/comfy/cms/files.yml">
default:
  site: default
  label: default file
  description: default description
  position: 0
</file>

<file path="test/fixtures/comfy/cms/layouts.yml">
default:
  site: default
  label: Default Layout
  identifier: default
  parent:
  content: |-
    {{cms:textarea content}}
  css: default_css
  js: default_js
  position: 0

nested:
  site: default
  label: Nested Layout
  identifier: nested
  parent:
  content: |-
    {{cms:text header}}
    {{cms:textarea content}}
  css: nested_css
  js: nested_js
  position: 0

child:
  site: default
  label: Child Layout
  identifier: child
  parent: nested
  content: |-
    {{cms:textarea left_column}}
    {{cms:textarea right_column}}
  css: child_css
  js: child_js
  position: 0
</file>

<file path="test/fixtures/comfy/cms/pages.yml">
default:
  site: default
  parent:
  target_page:
  layout: default
  label: Default Page
  slug:
  full_path: '/'
  children_count: 1
  position: 0
  is_published: true
  content_cache:

child:
  site: default
  parent: default
  target_page:
  layout: default
  label: Child Page
  slug: 'child-page'
  full_path: '/child-page'
  children_count: 0
  position: 0
  is_published: true
</file>

<file path="test/fixtures/comfy/cms/revisions.yml">
layout:
  record: default (Comfy::Cms::Layout)
  data: <%= {
    'content' => 'revision {{cms:fragment content}}',
    'css'     => 'revision css',
    'js'      => 'revision js' }.to_yaml.inspect %>

page:
  record: default (Comfy::Cms::Page)
  data: <%= {
    'fragments_attributes' => [
      { 'identifier'  => 'content',
        'content'     => 'old content' },
      { 'identifier'  => 'title',
        'content'     => 'old title'}
    ]}.to_yaml.inspect %>

translation:
  record: default (Comfy::Cms::Translation)
  data: <%= {
    "fragments_attributes" => [
      { "identifier" => "content",
        "content"    => "old content" }
    ]}.to_yaml.inspect %>

snippet:
  record: default (Comfy::Cms::Snippet)
  data: <%= {
    'content' => 'revision content' }.to_yaml.inspect %>
</file>

<file path="test/fixtures/comfy/cms/sites.yml">
default:
  label: Default Site
  identifier: default-site
  hostname: www.example.com
  path:
</file>

<file path="test/fixtures/comfy/cms/translations.yml">
default:
  page: default
  layout: default
  locale: fr
  label: Default Translation
  is_published: true
  content_cache: Translation Content
</file>

<file path="test/fixtures/files/image.svg">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" width="620" height="472" id="svg2" inkscape:version="0.91 r13725" sodipodi:docname="Composición_barra_de_color_EBU.svg">
  <metadata id="metadata83">
    <rdf:RDF>
      <cc:Work rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview pagecolor="#ffffff" bordercolor="#666666" borderopacity="1" objecttolerance="10" gridtolerance="10" guidetolerance="10" inkscape:pageopacity="0" inkscape:pageshadow="2" inkscape:window-width="1366" inkscape:window-height="719" id="namedview81" showgrid="false" inkscape:zoom="1.059" inkscape:cx="310" inkscape:cy="236" inkscape:window-x="-8" inkscape:window-y="-8" inkscape:window-maximized="1" inkscape:current-layer="svg2"/>
  <defs id="defs4">
    <rect id="box1" width="77px" height="210px" style="stroke:#000;stroke-width:2px;"/>
    <rect id="box2" width="77px" height="60px" style="stroke:#000;stroke-width:2px;"/>
  </defs>
  <rect id="bg" width="620" height="472" fill="#fff"/>
  <g transform="translate(2 1)" id="g9">
    <use xlink:href="#box1" x="0" fill="#fff" id="use11"/>
    <use xlink:href="#box1" x="77" fill="#ff0" id="use13"/>
    <use xlink:href="#box1" x="154" fill="#0ff" id="use15"/>
    <use xlink:href="#box1" x="231" fill="#0f0" id="use17"/>
    <use xlink:href="#box1" x="308" fill="#f0f" id="use19"/>
    <use xlink:href="#box1" x="385" fill="#f00" id="use21"/>
    <use xlink:href="#box1" x="462" fill="#00f" id="use23"/>
    <use xlink:href="#box1" x="539" fill="#000" id="use25"/>
  </g>
  <g transform="translate(2 230)" id="g27">
    <use xlink:href="#box2" x="0" fill="#f00" id="use29"/>
    <use xlink:href="#box2" x="77" fill="#f00" id="use31"/>
    <use xlink:href="#box2" x="154" fill="#fff" id="use33"/>
    <use xlink:href="#box2" x="231" fill="#fff" id="use35"/>
    <use xlink:href="#box2" x="308" fill="#f00" id="use37"/>
    <use xlink:href="#box2" x="385" fill="#f00" id="use39"/>
    <use xlink:href="#box2" x="462" fill="#fff" id="use41"/>
    <use xlink:href="#box2" x="539" fill="#fff" id="use43"/>
  </g>
  <g transform="translate(2 312)" id="g45">
    <use xlink:href="#box2" x="0" fill="#0f0" id="use47"/>
    <use xlink:href="#box2" x="77" fill="#0f0" id="use49"/>
    <use xlink:href="#box2" x="154" fill="#0f0" id="use51"/>
    <use xlink:href="#box2" x="231" fill="#0f0" id="use53"/>
    <use xlink:href="#box2" x="308" fill="#fff" id="use55"/>
    <use xlink:href="#box2" x="385" fill="#fff" id="use57"/>
    <use xlink:href="#box2" x="462" fill="#fff" id="use59"/>
    <use xlink:href="#box2" x="539" fill="#fff" id="use61"/>
  </g>
  <g transform="translate(2 392)" id="g63">
    <use xlink:href="#box2" x="0" fill="#00f" id="use65"/>
    <use xlink:href="#box2" x="77" fill="#fff" id="use67"/>
    <use xlink:href="#box2" x="154" fill="#00f" id="use69"/>
    <use xlink:href="#box2" x="231" fill="#fff" id="use71"/>
    <use xlink:href="#box2" x="308" fill="#00f" id="use73"/>
    <use xlink:href="#box2" x="385" fill="#fff" id="use75"/>
    <use xlink:href="#box2" x="462" fill="#00f" id="use77"/>
    <use xlink:href="#box2" x="539" fill="#fff" id="use79"/>
  </g>
  <text xml:space="preserve" style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:180px;line-height:125%;font-family:'DejaVu Sans';-inkscape-font-specification:'DejaVu Sans';text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;display:inline;overflow:visible;visibility:visible;opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate" x="59.492619" y="174.47415" id="text3446" sodipodi:linespacing="125%"><tspan sodipodi:role="line" id="tspan3448" x="59.492619" y="174.47415">TEST</tspan></text>
</svg>
</file>

<file path="test/fixtures/generators/cms/application.rb">
module TestApp
  class Application < Rails::Application
    # Ensuring that ActiveStorage routes are loaded before Comfy's globbing
    # route. Without this file serving routes are inaccessible.
    config.railties_order = [ActiveStorage::Engine, :main_app, :all]
  end
end
</file>

<file path="test/fixtures/generators/cms/routes.rb">
Test::Application.routes.draw do
  comfy_route :cms_admin, path: "/admin"
  # Ensure that this route is defined last
  comfy_route :cms, path: "/"
end
</file>

<file path="test/fixtures/generators/scaffold/tests/fixture">
default:
  bar: default bar
</file>

<file path="test/fixtures/generators/scaffold/tests/model.rb">
require_relative '../test_helper'

class FooTest < ActiveSupport::TestCase

  def test_fixtures_validity
    Foo.all.each do |foo|
      assert foo.valid?, foo.errors.inspect
    end
  end

  def test_validation
    foo = Foo.new
    assert foo.invalid?
    assert_equal [:bar], foo.errors.keys
  end

  def test_creation
    assert_difference 'Foo.count' do
      Foo.create(
        bar: 'test bar',
      )
    end
  end
end
</file>

<file path="test/fixtures/generators/scaffold/views/_form.haml">
= form.text_field :bar

= form.form_actions do
  = form.submit class: "btn btn-primary"
  = link_to 'Cancel', admin_foos_path, class: "btn btn-link"
</file>

<file path="test/fixtures/generators/scaffold/views/edit.haml">
.page-header
  %h2 Edit Foo

= comfy_form_with model: @foo, url: [:admin, @foo] do |form|
  = render form
</file>

<file path="test/fixtures/generators/scaffold/views/index.haml">
.page-header
  = link_to 'New Foo', new_admin_foo_path, class: 'btn btn-secondary float-right'
  %h2= 'Foos'

= paginate @foos, theme: 'comfy'

%ul.list
  - @foos.each do |foo|
    %li
      .row
        .col-md-8.item
          .item-content
            .item-title
              = foo.bar

        .col-md-4.d-flex.align-items-center.justify-content-md-end
          .btn-group.btn-group-sm
            = link_to 'Edit', edit_admin_foo_path(foo), class: 'btn btn-outline-secondary'
            = link_to 'Delete', admin_foo_path(foo), method: :delete, data: {confirm: 'Are you sure?'}, class: 'btn btn-danger'

= paginate @foos, theme: 'comfy'
</file>

<file path="test/fixtures/generators/scaffold/views/new.haml">
.page-header
  %h2 New Foo

= comfy_form_with model: @foo, url: [:admin, @foo] do |form|
  = render form
</file>

<file path="test/fixtures/generators/scaffold/views/show.haml">
.page-header
  %h2 Foo

= debug @foo
</file>

<file path="test/fixtures/generators/scaffold/migration.rb">
class CreateFoos < ActiveRecord::Migration[5.2]

  def change
    create_table :foos do |t|
      t.string :bar
      t.timestamps
    end
  end
end
</file>

<file path="test/fixtures/generators/scaffold/model.rb">
class Foo < ActiveRecord::Base

  # -- Relationships -----------------------------------------------------------


  # -- Callbacks ---------------------------------------------------------------


  # -- Validations -------------------------------------------------------------


  # -- Scopes ------------------------------------------------------------------


  # -- Class Methods -----------------------------------------------------------


  # -- Instance Methods --------------------------------------------------------


end
</file>

<file path="test/fixtures/generators/scaffold/routes.rb">
Test::Application.routes.draw do
  namespace :admin do
    resources :foos
  end

end
</file>

<file path="test/fixtures/views/render_test/_test.html.erb">
TestPartial <%= @test_value %>
</file>

<file path="test/fixtures/views/render_test/new.html.erb">
Can render CMS layout and specify action
</file>

<file path="test/fixtures/views/render_test/render_layout.html.erb">
TestTemplate <%= @test_value %>
</file>

<file path="test/fixtures/views/_nav_hook_2.html.erb">
<hook_content_2>
</file>

<file path="test/fixtures/views/_nav_hook.html.erb">
hook_content
</file>

<file path=".codeclimate.yml">
exclude_paths:
  - app/assets/javascripts/comfy/vendor/*
  - app/assets/stylesheets/comfy/vendor/*
  - db/*
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  - package-ecosystem: "bundler"
    directory: "/"   # The root directory where your Gemfile is located
    schedule:
      interval: "weekly"  # Options: "daily", "weekly", "monthly"
    commit-message:
      prefix: "fix"  # Prefix for the commit message (optional)
    pull-request:
      title: "Update dependencies for {{dependency}}"
</file>

<file path=".github/issue_template.md">
### Expected behavior
Tell us what should happen

### Actual behavior
Tell us what does happen

### Steps to reproduce
Things that help:

* Describe the issue in detail.
* Add relevant code snippets.
* Create a failing test case.

### System configuration
**Rails version**:

**CMS version**:

**Ruby version**:
</file>

<file path="app/assets/javascripts/comfy/admin/cms/base.js">
(() => {
  if (!window.CMS) window.CMS = {};
  const CMS = window.CMS;

  // TODO(glebm): Use the battle-tested universal onPageLoad code and enable Turbolinks+async in the demo app.
  // See: https://gist.github.com/glebm/2496daf445877055447a6fac46509d9a
  const isTurbolinks = "Turbolinks" in window && window.Turbolinks.supported;
  if (isTurbolinks) {
    document.addEventListener("turbolinks:load", () => {
      window.CMS.init();
    });
    document.addEventListener("turbolinks:before-cache", () => {
      window.CMS.dispose();
    });
  } else {
    document.addEventListener("DOMContentLoaded", () => {
      window.CMS.init();
    });
  }

  CMS.init = () => {
    CMS.current_path = window.location.pathname;
    CMS.slugify();
    CMS.codemirror.init();
    CMS.wysiwyg.init();
    CMS.sortableList.init();
    CMS.timepicker.init();
    CMS.pageFragments();
    CMS.categories();
    CMS.files.init();
    CMS.fileLinks();
    CMS.fileUpload.init();
    CMS.diff();
  };

  CMS.dispose = () => {
    CMS.codemirror.dispose();
    CMS.wysiwyg.dispose();
    CMS.files.dispose();
    CMS.fileUpload.dispose();
    CMS.sortableList.dispose();
    CMS.timepicker.dispose();
  };

  CMS.getLocale = () =>
    document.querySelector('meta[name="cms-locale"]').content;
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/codemirror.js">
import jQuery from "jquery";
import CodeMirror from "codemirror";
import "codemirror/mode/markdown/markdown";
import "codemirror/mode/htmlmixed/htmlmixed";

(() => {
  const codeMirrorInstances = [];
  window.CMS.codemirror = {
    init(root = document) {
      for (const textarea of root.querySelectorAll(
        "textarea[data-cms-cm-mode]"
      )) {
        const codemirror = CodeMirror.fromTextArea(textarea, {
          mode: textarea.dataset.cmsCmMode,
          tabSize: 2,
          lineWrapping: true,
          autoCloseTags: true,
          lineNumbers: true,
          viewportMargin: Infinity,
        });
        codeMirrorInstances.push(codemirror);
      }

      const tabsRoot =
        root.id === "form-fragments"
          ? root
          : root.querySelector("#form-fragments");
      jQuery(tabsRoot)
        .find('a[data-toggle="tab"]')
        .on("shown.bs.tab", () => {
          for (const codemirror of codeMirrorInstances) {
            codemirror.refresh();
          }
        });
    },
    dispose() {
      for (const codemirror of codeMirrorInstances) {
        codemirror.toTextArea();
      }
      codeMirrorInstances.length = 0;
    },
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/diff.js">
import jQuery from "jquery";

(() => {
  window.CMS.diff = () => {
    jQuery(".revision").prettyTextDiff({
      cleanup: true,
      originalContainer: ".original",
      changedContainer: ".current",
      diffContainer: ".diff .content",
    });
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/file_link.js">
import jQuery from "jquery";
import Popover from "bootstrap/js/src/popover";

(() => {
  const isFirefox = /\bFirefox\//.test(navigator.userAgent);

  class FileLink {
    constructor(link) {
      this.link = link;
      this.isImage = !!link.dataset.cmsFileThumbUrl;

      link.addEventListener("dragstart", (evt) => {
        evt.dataTransfer.setData(
          "text/plain",
          this.link.dataset.cmsFileLinkTag
        );
      });

      if (this.isImage) {
        new Popover(link, {
          container: link.parentElement,
          trigger: "hover",
          placement: "top",
          content: this.buildFileThumbnail(),
          html: true,
        });

        link.addEventListener("dragstart", (evt) => {
          evt.dataTransfer.setDragImage(this.buildFileThumbnail(), 4, 2);
          this.getPopover().hide();
        });

        this.workAroundFirefoxPopoverGlitch();
      }
    }

    buildFileThumbnail() {
      const img = new Image();
      img.src = this.link.dataset.cmsFileThumbUrl;
      return img;
    }

    // To work around a Firefox bug causing the popover to re-appear after the drop:
    // https://github.com/comfy/comfortable-mexican-sofa/pull/799#issuecomment-369124161
    //
    // Possibly related to:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    workAroundFirefoxPopoverGlitch() {
      if (!isFirefox) return;
      this.link.addEventListener("dragstart", () => {
        this.getPopover().disable();
      });
      this.link.addEventListener("dragend", () => {
        setTimeout(() => {
          const popover = this.getPopover();
          popover.enable();
          popover.hide();
        }, 300);
      });
    }

    // We can't keep a reference to the Popover object, because Bootstrap re-creates it internally.
    getPopover() {
      return jQuery(this.link).data(Popover.DATA_KEY);
    }
  }

  window.CMS.fileLinks = (root = document) => {
    for (const link of root.querySelectorAll("[data-cms-file-link-tag]")) {
      new FileLink(link);
    }
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/file_upload.js">
import plupload from "plupload";

(() => {
  const DROP_TARGET_ACTIVE_CLASS = "cms-uploader-drag-drop-target-active";

  class FileUpload {
    constructor(container, settings) {
      if (!container.id) container.id = plupload.guid();
      settings = Object.assign(
        FileUpload.defaultUploaderSettings(container.id),
        settings
      );
      this.ui = {
        container,
        list: container.querySelector(".cms-uploader-filelist"),
        dropElement: container.querySelector(`#${settings.drop_element}`),
      };
      this.cleanupFns = [];
      this.uploader = new plupload.Uploader(settings);
      this.uploader.bind("PostInit", () => this.onUploaderPostInit());
      this.uploader.bind("Error", (_uploader, error) =>
        this.onUploaderError(error)
      );
      this.uploader.bind("FilesAdded", (_uploader, files) =>
        this.onUploaderFilesAdded(files)
      );
      this.uploader.bind("UploadProgress", (_uploader, file) =>
        this.onUploaderUploadProgress(file)
      );
      this.uploader.bind("FileUploaded", (_uploader, file, info) =>
        this.onUploaderFileUploaded(file, info)
      );
      this.uploader.bind("FilesRemoved", (_uploader, files) =>
        this.onUploaderFilesRemoved(files)
      );
      this.uploader.init();
      if (settings.setup) {
        settings.setup(this.uploader);
      }
    }

    destroy() {
      this.uploader.destroy();
      for (const cleanupFn of this.cleanupFns) {
        cleanupFn();
      }
    }

    addCleanup(cleanupFn) {
      this.cleanupFns.push(cleanupFn);
    }

    onUploaderPostInit() {
      // Show drag and drop info and attach events only if drag and drop is enabled and supported.
      if (
        !this.uploader.settings.dragdrop ||
        !this.uploader.features.dragdrop
      ) {
        this.ui.container.querySelector(
          ".cms-uploader-drag-drop-info"
        ).style.display = "none";
        return;
      }
      // When dragging over the document add a class to the drop target that puts it on top of every element and remove
      // that class when dropping or leaving the drop target. Otherwise the dragleave event would fire whenever we drag
      // over a child element inside the drop target such as text nodes.
      const onDragEnter = (e) => {
        // Only react to drag'n'drops that contain a file. See:
        // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
        if (e.dataTransfer.types.includes("Files")) {
          this.ui.dropElement.classList.add(DROP_TARGET_ACTIVE_CLASS);
        }
      };
      document.addEventListener("dragenter", onDragEnter);
      this.addCleanup(() => {
        document.removeEventListener("dragenter", onDragEnter);
      });
      for (const eventName of ["drop", "dragleave"]) {
        this.ui.dropElement.addEventListener(eventName, () => {
          this.ui.dropElement.classList.remove(DROP_TARGET_ACTIVE_CLASS);
        });
      }
    }

    onUploaderError(error) {
      if (error.code === plupload.INIT_ERROR) {
        window.alert("Error: Initialisation error. Reload to try again.");
        return;
      }
      const file = error.file;
      if (!file) return;
      // Get error message from the server response. Not all runtimes support this.
      let message = error.response;
      // If no error message is in the server response get standard plupload error messages.
      // This will have descriptive error message for something like file size or file format errors but for
      // server errors it will only display a general error message.
      if (!message) {
        message = error.message;
        if (error.details) message += ` (${error.details})`;
      }
      file.status = plupload.FAILED;
      file.error_message = message;
      this.updateFileStatus(file);
    }

    onUploaderFilesAdded(files) {
      for (const file of files) {
        this.addFile(file);
      }
      // Auto start upload when files are added.
      this.uploader.start();
    }

    onUploaderUploadProgress(file) {
      this.updateFileStatus(file);
    }

    onUploaderFileUploaded(file, info) {
      // Replace the dummy file entry in the file list with the the entry from the server response.
      const template = document.createElement("template");
      template.innerHTML = info.response;
      const newListItem = template.content.firstElementChild;
      this.ui.list.replaceChild(newListItem, this.fileListItem(file));
      window.CMS.fileLinks(newListItem);
    }

    onUploaderFilesRemoved(files) {
      for (const file of files) {
        this.removeFile(file);
      }
    }

    addFile(file) {
      this.ui.list.insertAdjacentHTML(
        "afterbegin",
        FileUpload.buildListItemHTML(file)
      );
      this.fileListItem(file)
        .querySelector(".cms-uploader-file-delete")
        .addEventListener("click", (evt) => {
          evt.preventDefault();
          this.uploader.removeFile(file);
        });
      this.updateFileStatus(file);
    }

    removeFile(file) {
      this.fileListItem(file).remove();
    }

    updateFileStatus(file) {
      const progressBar =
        this.fileListItem(file).querySelector(".progress-bar");
      switch (file.status) {
        case plupload.UPLOADING:
          progressBar.style.width = `${file.percent}%`;
          break;
        case plupload.FAILED:
          progressBar.style.width = "100%";
          progressBar.classList.add("progress-bar-danger");
          progressBar.querySelector("span").innerHTML = file.error_message;
          break;
      }
    }

    fileListItem({ id }) {
      return this.ui.container.querySelector(`#${id}`);
    }

    static buildListItemHTML({ id, name }) {
      return `<li id='${id}' class='row temp'>
        <div class='col-md-9 d-flex align-items-center'>
          <div class='progress'>
            <div class='progress-bar progress-bar-striped progress-bar-animated'>
              <span>${name}</span>
            </div>
          </div>
        </div>
        <div class='col-md-3 d-flex align-items-center justify-content-md-end'>
          <a class='btn btn-sm btn-danger float-right cms-uploader-file-delete' href='#'>Delete</a>
        </div>
      </li>`;
    }

    static defaultUploaderSettings(id) {
      return {
        runtimes: "html5,browserplus,silverlight,flash,gears",
        dragdrop: true,
        drop_element: `${id}-drag-drop-target`,
        browse_button: `${id}-browse`,
        container: id,
        file_data_name: "file[file]",
      };
    }
  }

  const uploaders = [];
  window.CMS.fileUpload = {
    init(root = document) {
      const el = root.querySelector("#cms-uploader");
      if (el === null) return;
      uploaders.push(
        new FileUpload(el, {
          url: el.dataset.cmsUploaderUrl,
          multipart_params: {
            [el.dataset.cmsUploaderTokenName]: el.dataset.cmsUploaderTokenValue,
            [el.dataset.cmsUploaderSessionName]:
              el.dataset.cmsUploaderSessionValue,
          },
        })
      );
    },
    dispose() {
      for (const uploader of uploader) {
        uploader.dispose();
      }
      uploaders.length = 0;
    },
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/files_modal.js">
import Modal from "bootstrap/js/src/popover";

// Site files modal.
(() => {
  let modal = null;

  const initModalContent = (modalContent) => {
    window.CMS.fileUpload.init(modalContent);
    window.CMS.fileLinks(modalContent);
    modalContent.addEventListener("dragstart", (evt) => {
      if (
        evt.target.nodeType === Node.ELEMENT_NODE &&
        evt.target.matches(".cms-uploader-filelist .item-title a") &&
        modal != null
      ) {
        modal.hide();
      }
    });
  };

  window.CMS.files = {
    init() {
      const modalToggle = document.querySelector(".cms-files-open-modal");
      const modalContainer = document.querySelector(".cms-files-modal");
      if (modalToggle === null || modalContainer === null) return;
      const modalContent = modalContainer.querySelector(".modal-content");
      modalToggle.addEventListener("click", (evt) => {
        evt.preventDefault();
        fetch(modalContainer.dataset.url, { credentials: "same-origin" })
          .then((resp) => resp.text())
          .then((html) => {
            modalContent.innerHTML = `<div class="modal-body">${html}</div>`;
            initModalContent(modalContent);
          });
        modal = modal || new Modal(modalContainer);
        modal.show();
      });
    },
    dispose() {
      if (modal !== null) {
        modal.hide();
        modal.dispose();
        modal = null;
      }
    },
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/timepicker.js">
import flatpickr from "flatpickr";

(() => {
  const flatpickrInstances = [];
  window.CMS.timepicker = {
    init(root = document) {
      const datetimes = root.querySelectorAll(
        "input[type=text][data-cms-datetime]"
      );
      const dates = root.querySelectorAll("input[type=text][data-cms-date]");
      if (datetimes.length === 0 && dates.length === 0) return;
      const locale = CMS.getLocale();
      for (const datetime of datetimes) {
        flatpickrInstances.push(
          flatpickr(datetime, {
            format: "yyyy-mm-dd hh:ii",
            enableTime: true,
            locale: locale,
          })
        );
      }
      for (const date of dates) {
        flatpickrInstances.push(
          flatpickr(date, {
            format: "yyyy-mm-dd",
            locale: locale,
          })
        );
      }
    },
    dispose() {
      for (const flatpickrInstance of flatpickrInstances) {
        flatpickrInstance.destroy();
      }
      flatpickrInstances.length = 0;
    },
  };
})();
</file>

<file path="app/assets/stylesheets/comfy/admin/cms/codemirror_overrides.sass">
body#comfy

  .CodeMirror
    min-height: 160px
    height: auto
    border: 1px solid #ccc
    border-radius: 3px
    padding: 6px
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075)
    transition: border linear 0.2s, box-shadow linear 0.2s

    .CodeMirror-scroll
      min-height: 160px

  .CodeMirror-focused
    border-color: rgba(82, 168, 236, 0.8)
    outline: 0
    outline: "thin dotted \9"
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6)
</file>

<file path="app/controllers/comfy/admin/cms/revisions/base_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::Revisions::BaseController < Comfy::Admin::Cms::BaseController
  helper_method :record_path

  before_action :load_record
  before_action :load_revision, except: :index
  before_action :authorize

  def index
    revision = @record.revisions.order(created_at: :desc).first
    if revision
      redirect_to action: :show, id: revision.id
    else
      redirect_to record_path
    end
  end

  def show
    @current_content    = @record.revision_fields.each_with_object({}) { |f, c| c[f] = @record.send(f) }
    @versioned_content  = @record.revision_fields.each_with_object({}) { |f, c| c[f] = @revision.data[f] }

    render 'comfy/admin/cms/revisions/show'
  end

  def revert
    @record.restore_from_revision(@revision)
    flash[:success] = I18n.t('comfy.admin.cms.revisions.reverted')
    redirect_to record_path
  end

protected

  def load_record
    raise 'not implemented'
  end

  def load_revision
    @revision = @record.revisions.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.revisions.not_found')
    redirect_to record_path
  end

  def record_path
    raise 'not implemented'
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/revisions/layout_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::Revisions::LayoutController < Comfy::Admin::Cms::Revisions::BaseController
private

  def load_record
    @record = @site.layouts.find(params[:layout_id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.revisions.record_not_found')
    redirect_to comfy_admin_cms_site_layouts_path(@site)
  end

  def record_path
    edit_comfy_admin_cms_site_layout_path(@site, @record)
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/revisions/page_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::Revisions::PageController < Comfy::Admin::Cms::Revisions::BaseController
  def show
    @current_content = @record.fragments.each_with_object({}) do |b, c|
      c[b.identifier] = b.content
    end
    @versioned_content = @record.fragments.each_with_object({}) do |b, c|
      d = @revision.data['fragments_attributes'].detect { |r| r[:identifier] == b.identifier }
      c[b.identifier] = d.try(:[], :content)
    end

    render 'comfy/admin/cms/revisions/show'
  end

private

  def load_record
    @record = @site.pages.find(params[:page_id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.revisions.record_not_found')
    redirect_to comfy_admin_cms_site_pages_path(@site)
  end

  def record_path
    edit_comfy_admin_cms_site_page_path(@site, @record)
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/revisions/snippet_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::Revisions::SnippetController < Comfy::Admin::Cms::Revisions::BaseController
private

  def load_record
    @record = @site.snippets.find(params[:snippet_id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.revisions.record_not_found')
    redirect_to comfy_admin_cms_site_snippets_path(@site)
  end

  def record_path
    edit_comfy_admin_cms_site_snippet_path(@site, @record)
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/revisions/translation_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::Revisions::TranslationController < Comfy::Admin::Cms::Revisions::BaseController
  def show
    @current_content = @record.fragments.each_with_object({}) do |b, c|
      c[b.identifier] = b.content
    end
    @versioned_content = @record.fragments.each_with_object({}) do |b, c|
      d = @revision.data['fragments_attributes'].detect { |r| r[:identifier] == b.identifier }
      c[b.identifier] = d.try(:[], :content)
    end

    render 'comfy/admin/cms/revisions/show'
  end

private

  def load_record
    @page   = @site.pages.find(params[:page_id])
    @record = @page.translations.find(params[:translation_id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.revisions.record_not_found')
    redirect_to comfy_admin_cms_site_pages_path(@site)
  end

  def record_path
    edit_comfy_admin_cms_site_page_translation_path(@site, @page, @record)
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/base_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::BaseController < Comfy::Admin::BaseController
  before_action :load_admin_site,
                :set_locale,
                :load_seeds,
                except: :jump

  layout :infer_layout

  if ComfortableMediaSurfer.config.admin_cache_sweeper.present?
    cache_sweeper(*ComfortableMediaSurfer.config.admin_cache_sweeper)
  end

  def jump
    path = ComfortableMediaSurfer.config.admin_route_redirect
    return redirect_to(path) unless path.blank?

    load_admin_site
    redirect_to comfy_admin_cms_site_pages_path(@site) if @site
  end

protected

  def load_admin_site
    id_param = params[:site_id] || session[:site_id]
    if (@site = ::Comfy::Cms::Site.find_by(id: id_param) || ::Comfy::Cms::Site.first)
      session[:site_id] = @site.id
    else
      I18n.locale = ComfortableMediaSurfer.config.admin_locale || I18n.default_locale
      flash[:danger] = I18n.t('comfy.admin.cms.base.site_not_found')
      redirect_to(new_comfy_admin_cms_site_path)
    end
  end

  def set_locale
    I18n.locale = ComfortableMediaSurfer.config.admin_locale || @site&.locale
    true
  end

  def load_seeds
    return unless ComfortableMediaSurfer.config.enable_seeds

    controllers = %w[layouts pages snippets files].collect { |c| "comfy/admin/cms/#{c}" }
    return unless controllers.member?(params[:controller]) && params[:action] == 'index'

    ComfortableMediaSurfer::Seeds::Importer.new(@site.identifier).import!
    flash.now[:warning] = I18n.t('comfy.admin.cms.base.seeds_enabled')
  end

  def infer_layout
    false if params[:layout] == 'false'
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/pages_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::PagesController < Comfy::Admin::Cms::BaseController
  include ::Comfy::ReorderAction
  self.reorder_action_resource = ::Comfy::Cms::Page

  before_action :check_for_layouts, only: %i[new edit]
  before_action :build_page,        only: %i[new create]
  before_action :load_page,         only: %i[edit update destroy]

  before_action :authorize

  before_action :preview_page, only: %i[create update]

  def index
    return redirect_to action: :new if site_has_no_pages?

    return index_for_redactor if params[:source] == 'redactor'

    @pages_by_parent = pages_grouped_by_parent

    @pages =
      if params[:categories].present?
        @site.pages.includes(:categories).for_category(params[:categories]).order(:label)
      else
        [@site.pages.root].compact
      end
  end

  def new
    render
  end

  def edit
    render
  end

  def update_family
    @page.siblings.each(&:save!) if @page.siblings
    @page.parent.save! if @page.parent
  end

  def create
    @page.save!
    update_family
    flash[:success] = I18n.t('comfy.admin.cms.pages.created')
    redirect_to action: :edit, id: @page
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.pages.creation_failure')
    render action: :new
  end

  def update
    @page.save!
    update_family
    flash[:success] = I18n.t('comfy.admin.cms.pages.updated')
    redirect_to action: :edit, id: @page
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.pages.update_failure')
    render action: :edit
  end

  def destroy
    @page.destroy
    update_family
    flash[:success] = I18n.t('comfy.admin.cms.pages.deleted')
    redirect_to action: :index
  end

  def form_fragments
    @page = @site.pages.find_by(id: params[:id]) || @site.pages.new
    @page.layout = @site.layouts.find_by(id: params[:layout_id])

    render(
      partial: 'comfy/admin/cms/fragments/form_fragments',
      locals: { record: @page, scope: :page },
      layout: false
    )
  end

  def toggle_branch
    @pages_by_parent = pages_grouped_by_parent
    @page = @site.pages.find(params[:id])
    s   = (session[:cms_page_tree] ||= [])
    id  = @page.id.to_s
    s.member?(id) ? s.delete(id) : s << id
  rescue ActiveRecord::RecordNotFound
    render nothing: true
  end

protected

  def index_for_redactor
    tree_walker = ->(page, list, offset) do
      return unless page.present?

      label = "#{'. . ' * offset}#{page.label}"
      list << { name: label, url: page.url(relative: true) }
      page.children.each do |child_page|
        tree_walker.call(child_page, list, offset + 1)
      end
      list
    end

    page_select_options = [{
      name: I18n.t('comfy.admin.cms.pages.form.choose_link'),
      url: false
    }] + tree_walker.call(@site.pages.root, [], 0)

    render json: page_select_options
  end

  def site_has_no_pages?
    @site.pages.count.zero?
  end

  def pages_grouped_by_parent
    @site.pages.order(:position).includes(:categories).group_by(&:parent_id)
  end

  def check_for_layouts
    return unless @site.layouts.count.zero?

    flash[:danger] = I18n.t('comfy.admin.cms.pages.layout_not_found')
    redirect_to new_comfy_admin_cms_site_layout_path(@site)
  end

  def build_page
    @page = @site.pages.new(page_params)
    @page.parent ||= @site.pages.find_by_id(params[:parent_id]) || @site.pages.root
    @page.layout ||= @page.parent&.layout || @site.layouts.first
  end

  def load_page
    @page = @site.pages.find(params[:id])
    @page.attributes = page_params
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.pages.not_found')
    redirect_to action: :index
  end

  def preview_page
    return unless params[:preview]

    layout = @page.layout.app_layout.blank? ? false : @page.layout.app_layout
    @cms_site   = @page.site
    @cms_layout = @page.layout
    @cms_page   = @page

    # Make sure to use the site locale to render the preview becaue it might
    # be different from the admin locale.
    I18n.locale = @cms_site.locale

    # Chrome chokes on content with iframes. Issue #434
    response.headers['X-XSS-Protection'] = '0'

    render inline: @page.render, layout: layout, content_type: 'text/html'
  end

  def page_params
    params.fetch(:page, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/base_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::BaseController < ComfortableMediaSurfer.config.admin_base_controller.to_s.constantize
  include Comfy::Paginate

  # Authentication module must have `authenticate` method
  include ComfortableMediaSurfer.config.admin_auth.to_s.constantize

  # Authorization module must have `authorize` method
  include ComfortableMediaSurfer.config.admin_authorization.to_s.constantize

  helper Comfy::Admin::CmsHelper
  helper Comfy::CmsHelper

  protect_from_forgery with: :exception

  before_action :authenticate

  layout 'comfy/admin/cms'
end
</file>

<file path="app/controllers/comfy/cms/base_controller.rb">
# frozen_string_literal: true

class Comfy::Cms::BaseController < ComfortableMediaSurfer.config.public_base_controller.to_s.constantize
  before_action :load_cms_site

  helper Comfy::CmsHelper

protected

  def load_cms_site
    @cms_site ||=
      if params[:site_id]
        ::Comfy::Cms::Site.find_by_id(params[:site_id])
      else
        ::Comfy::Cms::Site.find_site(request.host_with_port.downcase, request.fullpath)
      end

    raise ActionController::RoutingError, 'Site Not Found' unless @cms_site

    return unless @cms_site.path.present? && !params[:site_id]
    raise ActionController::RoutingError, 'Site Not Found' unless params[:cms_path]&.match(%r{\A#{@cms_site.path}})

    params[:cms_path].gsub!(%r{\A#{@cms_site.path}}, '')
    params[:cms_path]&.gsub!(%r{\A/}, '')
  end
end
</file>

<file path="app/controllers/concerns/comfy/paginate.rb">
# frozen_string_literal: true

module Comfy::Paginate
  def comfy_paginate(scope, per_page: 50)
    if defined?(Kaminari)
      scope.page(params[:page]).per(per_page)
    else
      scope
    end
  end
end
</file>

<file path="app/controllers/application_controller.rb">
# frozen_string_literal: true

class ApplicationController < ActionController::Base
  protect_from_forgery
end
</file>

<file path="app/helpers/comfy/cms_helper.rb">
# frozen_string_literal: true

module Comfy
  module CmsHelper
    # Raw content of a page fragment. This is how you get content from unrenderable
    # tags like {{cms:fragment meta, render: false}}
    # Example:
    #   cms_fragment_content(:left_column, CmsPage.first)
    #   cms_fragment_content(:left_column) # if @cms_page is present
    def cms_fragment_content(identifier, page = @cms_page)
      frag = page&.fragments&.detect { |f| f.identifier == identifier.to_s }
      return '' unless frag

      case frag.tag
      when 'date', 'datetime'
        frag.datetime
      when 'checkbox'
        frag.boolean
      when 'file', 'files'
        frag.attachments
      else
        frag.content
      end
    end

    # Same as cms_fragment_content but with cms tags expanded and rendered. Use
    # it only if you know you got more stuff in the fragment content other than
    # text because this is a potentially expensive call.
    def cms_fragment_render(identifier, page = @cms_page)
      node = page.fragment_nodes.detect { |n| n.identifier == identifier.to_s }
      return '' unless node

      node.renderable = true
      render inline: page.render([node])
    end

    # Raw content of a snippet.
    # Example:
    #   cms_snippet_content(:my_snippet)
    def cms_snippet_content(identifier, cms_site = @cms_site)
      cms_site ||= cms_site_detect
      snippet = cms_site&.snippets&.find_by_identifier(identifier)
      return '' unless snippet

      snippet.content
    end

    # Same as cms_snippet_content but cms tags will be expanded. Note that there
    # is no page context, so snippet cannot contain fragment tags.
    def cms_snippet_render(identifier, cms_site = @cms_site)
      cms_site ||= cms_site_detect
      snippet = cms_site&.snippets&.find_by_identifier(identifier)
      return '' unless snippet

      r = ComfortableMediaSurfer::Content::Renderer.new(snippet)
      render inline: r.render(r.nodes(r.tokenize(snippet.content)))
    end

    def cms_site_detect
      host = request.host_with_port.downcase
      path = request.fullpath
      Comfy::Cms::Site.find_site(host, path)
    end

    def comfy_paginate(collection)
      return unless collection

      paginate collection, theme: 'comfy' if defined?(Kaminari)
    end
  end
end
</file>

<file path="app/models/comfy/cms/categorization.rb">
# frozen_string_literal: true

class Comfy::Cms::Categorization < ActiveRecord::Base
  self.table_name = 'comfy_cms_categorizations'

  # -- Relationships -----------------------------------------------------------
  belongs_to :category
  belongs_to :categorized,
             polymorphic: true

  # -- Validations -------------------------------------------------------------
  validates :category_id,
            uniqueness: { scope: %i[categorized_type categorized_id] }
end
</file>

<file path="app/models/comfy/cms/category.rb">
# frozen_string_literal: true

class Comfy::Cms::Category < ActiveRecord::Base
  self.table_name = 'comfy_cms_categories'

  # -- Relationships --------------------------------------------------------
  belongs_to :site
  has_many :categorizations,
           dependent: :destroy

  # -- Validations ----------------------------------------------------------
  validates :label,
            presence: true,
            uniqueness: { scope: %i[categorized_type site_id] }
  validates :categorized_type,
            presence:   true

  # -- Scopes ---------------------------------------------------------------
  scope :of_type, ->(type) {
    where(categorized_type: type)
  }
end
</file>

<file path="app/models/comfy/cms/revision.rb">
# frozen_string_literal: true

class Comfy::Cms::Revision < ActiveRecord::Base
  self.table_name = 'comfy_cms_revisions'

  serialize :data, coder: Psych

  # -- Relationships --------------------------------------------------------
  belongs_to :record, polymorphic: true
end
</file>

<file path="app/models/comfy/cms/site.rb">
# frozen_string_literal: true

class Comfy::Cms::Site < ActiveRecord::Base
  self.table_name = 'comfy_cms_sites'

  # -- Relationships -----------------------------------------------------------
  with_options dependent: :destroy do |site|
    site.has_many :layouts
    site.has_many :pages
    site.has_many :snippets
    site.has_many :files
    site.has_many :categories
  end

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assign_identifier,
                    :assign_hostname,
                    :assign_label,
                    :clean_path

  # -- Validations -------------------------------------------------------------
  validates :identifier,
            presence: true,
            uniqueness: true,
            format: { with: %r{\A\w[a-z0-9_-]*\z}i }
  validates :label,
            presence: true
  validates :hostname,
            presence: true,
            uniqueness: { scope: :path },
            format: { with: %r{\A[\w.-]+(?::\d+)?\z} }

  # -- Class Methods -----------------------------------------------------------
  # returning the Comfy::Cms::Site instance based on host and path
  def self.find_site(host, path = nil)
    return Comfy::Cms::Site.first if Comfy::Cms::Site.count == 1

    cms_site = nil

    public_cms_path = ComfortableMediaSurfer.configuration.public_cms_path
    if path && public_cms_path != '/'
      path = path.sub(%r{\A#{public_cms_path}}, '')
    end

    Comfy::Cms::Site.where(hostname: real_host_from_aliases(host)).each do |site|
      if site.path.blank?
        cms_site = site
      elsif "#{path.to_s.split('?')[0]}/" =~ %r{^/#{Regexp.escape(site.path.to_s)}/}
        cms_site = site
        break
      end
    end
    cms_site
  end

  def self.real_host_from_aliases(host)
    if (aliases = ComfortableMediaSurfer.config.hostname_aliases)
      aliases.each do |alias_host, hosts|
        return alias_host if hosts.include?(host)
      end
    end
    host
  end

  # -- Instance Methods --------------------------------------------------------
  def url(relative: false)
    public_cms_path = ComfortableMediaSurfer.config.public_cms_path || '/'
    host = "//#{hostname}"
    path = ['/', public_cms_path, self.path].compact.join('/').squeeze('/').chomp('/')
    relative ? path.presence : [host, path].join
  end

protected

  def assign_identifier
    self.identifier = identifier.blank? ? hostname.try(:parameterize) : identifier
  end

  def assign_hostname
    self.hostname ||= identifier
  end

  def assign_label
    self.label = label.blank? ? identifier.try(:titleize) : label
  end

  def clean_path
    self.path ||= ''
    self.path.squeeze!('/')
    self.path.gsub!(%r{/$}, '')
    self.path = nil if self.path.blank?
  end
end
</file>

<file path="app/models/comfy/cms/snippet.rb">
# frozen_string_literal: true

class Comfy::Cms::Snippet < ActiveRecord::Base
  self.table_name = 'comfy_cms_snippets'

  include Comfy::Cms::WithCategories

  cms_has_revisions_for :content

  # -- Relationships -----------------------------------------------------------
  belongs_to :site

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assign_label
  before_create :assign_position
  after_save    :clear_page_content_cache
  after_destroy :clear_page_content_cache

  # -- Validations -------------------------------------------------------------
  validates :label,
            presence: true
  validates :identifier,
            presence: true,
            uniqueness: { scope: :site_id },
            format: { with: %r{\A\w[a-z0-9_-]*\z}i }

protected

  def assign_label
    self.label = label.blank? ? identifier.try(:titleize) : label
  end

  # When snippet is changed or removed we need to blow away all page caches as
  # we don't know where it was used.
  def clear_page_content_cache
    Comfy::Cms::Page.where(id: site.pages.pluck(:id)).update_all(content_cache: nil)
  end

  def assign_position
    max = site.snippets.maximum(:position)
    self.position = max ? max + 1 : 0
  end
end
</file>

<file path="app/models/comfy/cms/translation.rb">
# frozen_string_literal: true

class Comfy::Cms::Translation < ActiveRecord::Base
  self.table_name = 'comfy_cms_translations'

  include Comfy::Cms::WithFragments

  cms_has_revisions_for :fragments_attributes

  delegate :site, to: :page

  # -- Relationships -----------------------------------------------------------
  belongs_to :page

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assign_layout

  # -- Scopes ------------------------------------------------------------------
  scope :published, -> { where(is_published: true) }

  # -- Validations -------------------------------------------------------------
  validates :label,
            presence: true

  validates :locale,
            presence: true,
            uniqueness: { scope: :page_id }

  validate :validate_locale

private

  def validate_locale
    return unless page

    errors.add(:locale) if locale == page.site.locale
  end

  def assign_layout
    self.layout ||= page.layout if page.present?
  end
end
</file>

<file path="app/models/concerns/comfy/cms/with_categories.rb">
# frozen_string_literal: true

module Comfy::Cms::WithCategories
  extend ActiveSupport::Concern

  included do
    has_many :categorizations,
             as: :categorized,
             class_name: 'Comfy::Cms::Categorization',
             dependent: :destroy
    has_many :categories,
             through: :categorizations,
             class_name: 'Comfy::Cms::Category'

    attr_writer :category_ids

    after_save :sync_categories

    scope :for_category, ->(*categories) {
      if (categories = [categories].flatten.compact).present?
        distinct
          .joins(categorizations: :category)
          .where('comfy_cms_categories.label' => categories)
      end
    }
  end

  def category_ids
    @category_ids ||= categories.pluck(:id)
  end

  def sync_categories
    return unless category_ids.is_a?(Array)

    scope = Comfy::Cms::Category.of_type(self.class.to_s)
    existing_ids = scope.pluck(:id)

    ids_to_add = category_ids.map(&:to_i)

    # adding categorizations
    ids_to_add.each do |id|
      if (category = scope.find_by_id(id))
        category.categorizations.create(categorized: self)
      end
    end

    # removing categorizations
    ids_to_remove = existing_ids - ids_to_add
    categorizations.where(category_id: ids_to_remove).destroy_all
  end
end
</file>

<file path="app/models/concerns/comfy/cms/with_fragments.rb">
# frozen_string_literal: true

module Comfy::Cms::WithFragments
  extend ActiveSupport::Concern

  included do
    attr_accessor :fragments_attributes_changed

    belongs_to :layout,
               class_name: 'Comfy::Cms::Layout'

    has_many :fragments,
             class_name: 'Comfy::Cms::Fragment',
             as: :record,
             autosave: true,
             dependent: :destroy

    before_save :clear_content_cache

    validates :layout,
              presence: true
  end

  # Array of fragment hashes in the following format:
  #   [
  #     {identifier: "frag_a", format: "text", content: "fragment a content"},
  #     {identifier: "frag_b", format: "file", files: [{file_a}, {file_b}]}
  #   ]
  # It also handles when frag hashes come in as a hash:
  #   {
  #     "0" => {identifer: "foo", content: "bar"},
  #     "1" => {identifier: "bar", content: "foo"}
  #   }
  def fragments_attributes=(frag_hashes = [])
    frag_hashes = frag_hashes.values if frag_hashes.is_a?(Hash)

    frag_hashes.each do |frag_attrs|
      unless frag_attrs.is_a?(HashWithIndifferentAccess)
        frag_attrs.symbolize_keys!
      end

      identifier = frag_attrs.delete(:identifier)

      fragment =
        fragments.detect { |f| f.identifier == identifier } ||
        fragments.build(identifier: identifier)

      fragment.attributes = frag_attrs

      # tracking dirty
      self.fragments_attributes_changed ||= fragment.changed?
    end
  end

  # Snapshop of page fragments data used primarily for saving revisions
  def fragments_attributes(was = false)
    fragments.collect do |frag|
      attrs = {}
      %i[identifier tag content datetime boolean].each do |column|
        attrs[column] = frag.send(was ? "#{column}_was" : column)
      end
      # TODO: save files against revision (not on db though)
      # attrs[:files] = frag.attachments.collect do |a|
      #   {io: a.download, filename: a.filename.to_s, content_type: a.content_type}
      # end
      attrs
    end
  end

  # Method to collect prevous state of blocks for revisions
  def fragments_attributes_was
    fragments_attributes(:previous_values)
  end

  # Grabbing nodes that we need to render form elements in the admin area
  # Rejecting duplicates as we'd need to render only one form field. Don't declare
  # duplicate tags on the layout. That's wierd (but still works).
  def fragment_nodes
    nodes
      .select { |n| n.is_a?(ComfortableMediaSurfer::Content::Tags::Fragment) }
      .uniq(&:identifier)
  end

  # Rendered content of the page. We grab whatever layout is associated with the
  # page and feed its content tokens to the renderer while passing this page as
  # context.
  def render(n = nodes)
    renderer.render(n)
  end

  # If content_cache column is populated we don't need to call render for this
  # page.
  def content_cache
    if (cache = read_attribute(:content_cache)).nil?
      cache = render
      update_column(:content_cache, cache) unless new_record?
    end
    cache
  end

  # Nuking content cache so it can be regenerated.
  def clear_content_cache!
    update_column(:content_cache, nil)
  end

  # Blanking cache on page saves so it can be regenerated on access
  def clear_content_cache
    write_attribute(:content_cache, nil)
  end

protected

  def renderer
    ComfortableMediaSurfer::Content::Renderer.new(self)
  end

  def nodes
    return [] unless layout.present?

    tokens = layout.content_tokens
    renderer.nodes(tokens)
  end
end
</file>

<file path="app/views/comfy/admin/cms/categories/_edit.html.haml">
- url = comfy_admin_cms_site_category_path(@site, category)
= form_with model: @category, scope: :category, url: url, html: {class: "edit-category", id: dom_id(category)}, local: false do |form|
  .input-group
    = form.text_field :label, class: "form-control form-control-sm", id: nil
    .input-group-btn
      %button.btn.btn-primary.btn-sm{aria: {label: "Update Category"}}
        %i.fas.fa-fw.fa-check
</file>

<file path="app/views/comfy/admin/cms/categories/_index.html.haml">
.box.categories-widget

  .read
    .categories
      .category
        - active_class = params[:categories].blank?? "active" : nil
        = link_to t('.all'), {categories: nil}, class: "btn btn-sm btn-light btn-block #{active_class}"
      - @site.categories.of_type(type).each do |category|
        = render "comfy/admin/cms/categories/show", category: category, read: true
    %button.toggle-cat-edit.btn.btn-secondary.btn-sm.btn-block{type: "button"}
      = t(".edit")

  .editable
    .categories
      - @site.categories.of_type(type).each do |category|
        = render "comfy/admin/cms/categories/show", category: category

    - url = comfy_admin_cms_site_categories_path(@site)
    = form_with scope: :category, url: url, html: {id: "new-category"}, local: false do |form|
      = form.hidden_field :categorized_type, value: type
      .input-group
        = form.text_field :label, placeholder: t('.add_placeholder'), class: 'form-control form-control-sm', id: nil
        .input-group-btn
          %button.btn.btn-primary.btn-sm{aria: {label: "Create Category"}}
            %i.fas.fa-fw.fa-plus

    %button.toggle-cat-edit.btn.btn-light.btn-sm.btn-block{type: "button"}
      = t(".done")
</file>

<file path="app/views/comfy/admin/cms/files/_file.html.haml">
%li{data: {id: file.id}}
  :ruby
    file_tag  = cms_file_link_tag(file)
    thumb_url = url_for(file.attachment.representation(resize_to_limit: [200, nil])) if file.attachment.variable?
  .row
    .col-md-5.item
      .item-controls.d-none.d-lg-block
        - if !params[:categories].present? && @site.files.count > 1
          .dragger
            %i.fas.fa-bars
      .item-content
        .item-title
          = link_to file.label, file.attachment, target: "_blank",
                    data: {cms_file_thumb_url: thumb_url, cms_file_link_tag: file_tag}
        .item-meta
          .content-type
            = truncate(file.attachment.content_type)
          .file-size
            = number_to_human_size(file.attachment.byte_size)

    .col-md-2.item-categories.d-flex.align-items-center
      = render partial: "comfy/admin/cms/categories/categories", object: file

    .col-md-2.d-flex.align-items-center
      %span.file-path
        = file_tag

    .col-md-3.d-flex.align-items-center.justify-content-md-end
      .btn-group.btn-group-sm
        = link_to t(".edit"), edit_comfy_admin_cms_site_file_path(@site, file), class: "btn btn-outline-secondary"
        = link_to t(".delete"), comfy_admin_cms_site_file_path(@site, file), method: :delete, remote: true, data: {confirm: t(".are_you_sure")}, class: "btn btn-danger"
</file>

<file path="app/views/comfy/admin/cms/fragments/_form_fragment_attachments.html.haml">
.fragment-attachments
  - attachments.each do |attachment|
    :ruby
      thumb_url = if attachment.variable?
        url_for(attachment.variant(Comfy::Cms::File::VARIANT_SIZE[:thumb]))
      end
      filename = attachment.filename.to_s
      truncated_filename = truncate(filename, length: 40, omission: "...#{filename.last(10)}")

      link_data = {
        cms_file_thumb_url: thumb_url,
        cms_file_link_tag: cms_page_file_link_tag(
          fragment_id:  fragment_id,
          attachment:   attachment,
          multiple:     multiple
        )
      }

    .fragment-attachment.btn-group.btn-group-sm.mb-1
      = link_to truncated_filename, attachment, data: link_data, class: "btn btn-light text-truncate", target: "_blank"
      = check_box_tag "#{object_name}[fragments_attributes][#{index}][file_ids_destroy][]", attachment.id, false, id: dom_id(attachment)
      %label.btn.btn-light{for: dom_id(attachment)}
        %i.fas.fa-fw.fa-times
</file>

<file path="app/views/comfy/admin/cms/fragments/_form_fragments.html.haml">
- begin
  - nodes = record.fragment_nodes
  - namespace = nodes.group_by(&:namespace)

  #form-fragments
    - if nodes.empty?
      .alert.alert-warning
        - if record.layout
          = link_to record.layout.label, edit_comfy_admin_cms_site_layout_path(@site, record.layout)
        = t(".no_tags").html_safe

    - else
      .tabbable
        - if namespace.size > 1
          .row
            .col-sm-2
            .col-sm-10
              %ul.nav.nav-tabs
                - namespace.each_with_index do |(name, tags), index|
                  %li.nav-item
                    - active = index == 0 ? "active" : nil
                    - label = t("comfy.cms.content.namespace.#{name}", default: name.humanize)
                    = link_to label, "#ns-#{name}", class: "nav-link #{active}", data: {toggle: "tab"}

        .tab-content
          - frag_index = 0

          - builder_opts = { builder: ComfortableMediaSurfer::FormBuilder, bootstrap: { layout: :horizontal }}
          = fields scope, model: record, **builder_opts do |form|
            - namespace.each_with_index do |(name, tags), index|
              .tab-pane{id: "ns-#{name}", class: index == 0 ? "active" : nil}
                - tags.each do |tag|
                  = form.fragment_field(tag, frag_index)
                  - frag_index += 1

- rescue ComfortableMediaSurfer::Content::Renderer::SyntaxError, ComfortableMediaSurfer::Content::Tag::Error => e
  .alert.alert-danger
    = e
</file>

<file path="app/views/comfy/admin/cms/pages/index.html.haml">
- content_for :right_column do
  = render "comfy/admin/cms/categories/index", type: "Comfy::Cms::Page"

.page-header
  = link_to t('.new_link'), new_comfy_admin_cms_site_page_path(@site), class: "btn btn-secondary float-right"
  %h2= t('.title')

= comfy_admin_partial "comfy/admin/cms/partials/pages_before"

%ul.list.sortable
  = render partial: "index_branch", collection: @pages

= comfy_admin_partial "comfy/admin/cms/partials/pages_after"
</file>

<file path="app/views/comfy/admin/cms/sites/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/site_form_before", form: form

= form.text_field :label, data: {slugify: @site.new_record?}
= form.text_field :identifier, data: {slug: true}
= form.text_field :hostname
= form.text_field :path

- locales = ComfortableMediaSurfer.config.locales.to_a.collect{|l| ["#{l[1]} (#{l[0]})", l[0]]}
= form.select :locale, locales, bootstrap: {custom_control: true}

= comfy_admin_partial "comfy/admin/cms/partials/site_form_after", form: form

= form.form_actions do
  = submit_tag t(@site.new_record? ? ".create" : ".update"), class: "btn btn-primary"
  = link_to t(".cancel"), comfy_admin_cms_sites_path, class: "btn btn-link"
</file>

<file path="app/views/comfy/admin/cms/snippets/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/snippet_form_before", form: form

= form.text_field :label, data: {slugify: @snippet.new_record?}
= form.text_field :identifier, data: {slug: true}
= form.check_box :markdown

- if @snippet.markdown
  = form.text_area :content, data: {'cms-cm-mode' => 'text/x-markdown'}
- else
  = form.text_area :content, data: {'cms-cm-mode' => 'text/html'}

= render 'comfy/admin/cms/categories/form', form: form

= comfy_admin_partial 'comfy/admin/cms/partials/snippet_form_after', form: form

= form.form_actions do
  = submit_tag t(@snippet.new_record? ? ".create" : ".update"), class: "btn btn-primary"
  = link_to t(".cancel"), comfy_admin_cms_site_snippets_path, class: "btn btn-link"
</file>

<file path="app/views/kaminari/comfy/_first_page.html.haml">
- unless current_page.first?
  %li.page-item
    = link_to_unless current_page.first?, raw(t 'views.pagination.first'), url, class: 'page-link', remote: remote
</file>

<file path="app/views/layouts/comfy/admin/cms/_head.html.haml">
%head
  %title= ComfortableMediaSurfer.config.cms_title

  %meta{"http-equiv" => "Content-type", content: "text/html; charset=utf-8"}
  %meta{charset: "utf-8"}
  %meta{name: "viewport", content: "width=device-width, initial-scale=1, shrink-to-fit=no"}

  = csrf_meta_tag

  - if @site && @site.persisted?
    %meta{name: "cms-file-upload-path", content: comfy_admin_cms_site_files_path(@site)}
    %meta{name: "cms-pages-path",       content: comfy_admin_cms_site_pages_path(@site)}
    %meta{name: "cms-locale",           content: I18n.locale}

  = stylesheet_link_tag "comfy/admin/cms/application", media: "all", "data-turbolinks-track": "reload"

  = yield :head

  = comfy_admin_partial "comfy/admin/cms/partials/html_head"
</file>

<file path="config/initializers/comfortable_media_surfer.rb">
# frozen_string_literal: true

ComfortableMediaSurfer.configure do |config|
  # Title of the admin area
  #   config.cms_title = 'Comfy CMS Engine'

  # Controller that is inherited from CmsAdmin::BaseController
  #   config.admin_base_controller = 'ApplicationController'

  # Controller that Comfy::Cms::BaseController will inherit from
  #   config.public_base_controller = 'ApplicationController'

  # Module responsible for authentication. You can replace it with your own.
  # It simply needs to have #authenticate method. See http_auth.rb for reference.
  #   config.admin_auth = 'ComfyAdminAuthentication'

  # Module responsible for authorization on admin side. It should have #authorize
  # method that returns true or false based on params and loaded instance
  # variables available for a given controller.
  #   config.admin_authorization = 'ComfyAdminAuthorization'

  # Module responsible for public authentication. Similar to the above. You also
  # will have access to @cms_site, @cms_layout, @cms_page so you can use them in
  # your logic. Default module doesn't do anything.
  #   config.public_auth = 'ComfyPublicAuthentication'

  # Module responsible for public authorization. It should have #authorize
  # method that returns true or false based on params and loaded instance
  # variables available for a given controller.
  #   config.public_authorization = 'ComfyPublicAuthorization'

  # When arriving at /cms-admin you may chose to redirect to arbirtary path,
  # for example '/cms-admin/users'
  #   config.admin_route_redirect = ''

  # Sofa allows you to setup entire site from files. Database is updated with each
  # request (if necessary). Please note that database entries are destroyed if there's
  # no corresponding file. Seeds are disabled by default.
  #   config.enable_seeds = false

  # Path where seeds can be located.
  #   config.seeds_path = File.expand_path('db/cms_seeds', Rails.root)

  # Content for Layouts, Pages and Snippets has a revision history. You can revert
  # a previous version using this system. You can control how many revisions per
  # object you want to keep. Set it to 0 if you wish to turn this feature off.
  #   config.revisions_limit = 25

  # Locale definitions. If you want to define your own locale merge
  # {:locale => 'Locale Title'} with this.
  #   config.locales = {:en => 'English', :es => 'Español'}

  # Admin interface will respect the locale of the site being managed. However you can
  # force it to English by setting this to `:en`
  #   config.admin_locale = nil

  # A class that is included as a sweeper to admin base controller if it's set
  #   config.admin_cache_sweeper = nil

  # By default you cannot have irb code inside your layouts/pages/snippets.
  # Generally this is to prevent putting something like this:
  # <% User.delete_all %> but if you really want to allow it...
  #   config.allow_erb = false

  # Whitelist of all helper methods that can be used via {{cms:helper}} tag. By default
  # all helpers are allowed except `eval`, `send`, `call` and few others. Empty array
  # will prevent rendering of all helpers.
  #   config.allowed_helpers = nil

  # Whitelist of partials paths that can be used via {{cms:partial}} tag. All partials
  # are accessible by default. Empty array will prevent rendering of all partials.
  #   config.allowed_partials = nil

  # Site aliases, if you want to have aliases for your site. Good for harmonizing
  # production env with dev/testing envs.
  # e.g. config.hostname_aliases = {'host.com' => 'host.inv', 'host_a.com' => ['host.lvh.me', 'host.dev']}
  # Default is nil (not used)
  #   config.hostname_aliases = nil

  # Reveal partials that can be overwritten in the admin area.
  # Default is false.
  #   config.reveal_cms_partials = false
  #
  # Customize the returned content json data
  # include fragments in content json
  #   config.content_json_options = {
  #     include: [:fragments]
  #   }
end

# Default credentials for ComfortableMediaSurfer::AccessControl::AdminAuthentication
# YOU REALLY WANT TO CHANGE THIS BEFORE PUTTING YOUR SITE LIVE
ComfortableMediaSurfer::AccessControl::AdminAuthentication.username = 'user'
ComfortableMediaSurfer::AccessControl::AdminAuthentication.password = 'pass'

# Uncomment this module and `config.admin_auth` above to use custom admin authentication
# module ComfyAdminAuthentication
#   def authenticate
#     return true
#   end
# end

# Uncomment this module and `config.admin_authorization` above to use custom admin authorization
# module ComfyAdminAuthorization
#   def authorize
#     return true
#   end
# end

# Uncomment this module and `config.public_auth` above to use custom public authentication
# module ComfyPublicAuthentication
#   def authenticate
#     return true
#   end
# end

# Uncomment this module and `config.public_authorization` above to use custom public authorization
# module ComfyPublicAuthorization
#   def authorize
#     return true
#   end
# end
</file>

<file path="config/initializers/content_security_policy.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap, inline scripts, and inline styles.
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src style-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end
</file>

<file path="config/initializers/filter_parameter_logging.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += %i[
  passw secret token _key crypt salt certificate otp ssn
]
</file>

<file path="config/initializers/inflections.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end
</file>

<file path="config/initializers/json.rb">
# frozen_string_literal: true

module JSON
module_function

  def parse(source, opts = {})
    Parser.new(source, **opts).parse
  end
end
</file>

<file path="config/initializers/new_framework_defaults_7_0.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.
#
# This file eases your Rails 7.0 framework defaults upgrade.
#
# Uncomment each configuration one by one to switch to the new default.
# Once your application is ready to run with all new defaults, you can remove
# this file and set the `config.load_defaults` to `7.0`.
#
# Read the Guide for Upgrading Ruby on Rails for more info on each option.
# https://guides.rubyonrails.org/upgrading_ruby_on_rails.html

# `button_to` view helper will render `<button>` element, regardless of whether
# or not the content is passed as the first argument or as a block.
# Rails.application.config.action_view.button_to_generates_button_tag = true

# `stylesheet_link_tag` view helper will not render the media attribute by default.
# Rails.application.config.action_view.apply_stylesheet_media_default = false

# Change the digest class for the key generators to `OpenSSL::Digest::SHA256`.
# Changing this default means invalidate all encrypted messages generated by
# your application and, all the encrypted cookies. Only change this after you
# rotated all the messages using the key rotator.
#
# See upgrading guide for more information on how to build a rotator.
# https://guides.rubyonrails.org/v7.0/upgrading_ruby_on_rails.html
# Rails.application.config.active_support.key_generator_hash_digest_class = OpenSSL::Digest::SHA256

# Change the digest class for ActiveSupport::Digest.
# Changing this default means that for example Etags change and
# various cache keys leading to cache invalidation.
# Rails.application.config.active_support.hash_digest_class = OpenSSL::Digest::SHA256

# Don't override ActiveSupport::TimeWithZone.name and use the default Ruby
# implementation.
# Rails.application.config.active_support.remove_deprecated_time_with_zone_name = true

# Calls `Rails.application.executor.wrap` around test cases.
# This makes test cases behave closer to an actual request or job.
# Several features that are normally disabled in test, such as Active Record query cache
# and asynchronous queries will then be enabled.
# Rails.application.config.active_support.executor_around_test_case = true

# Set both the `:open_timeout` and `:read_timeout` values for `:smtp` delivery method.
# Rails.application.config.action_mailer.smtp_timeout = 5

# The ActiveStorage video previewer will now use scene change detection to generate
# better preview images (rather than the previous default of using the first frame
# of the video).
# Rails.application.config.active_storage.video_preview_arguments =
#   "-vf 'select=eq(n\\,0)+eq(key\\,1)+gt(scene\\,0.015),loop=loop=-1:size=2,trim=start_frame=1' -frames:v 1 -f image2"

# Automatically infer `inverse_of` for associations with a scope.
# Rails.application.config.active_record.automatic_scope_inversing = true

# Raise when running tests if fixtures contained foreign key violations
# Rails.application.config.active_record.verify_foreign_keys_for_fixtures = true

# Disable partial inserts.
# This default means that all columns will be referenced in INSERT queries
# regardless of whether they have a default or not.
# Rails.application.config.active_record.partial_inserts = false

# Protect from open redirect attacks in `redirect_back_or_to` and `redirect_to`.
# Rails.application.config.action_controller.raise_on_open_redirects = true

# Change the variant processor for Active Storage.
# Changing this default means updating all places in your code that
# generate variants to use image processing macros and ruby-vips
# operations. See the upgrading guide for detail on the changes required.
# The `:mini_magick` option is not deprecated; it's fine to keep using it.
# Rails.application.config.active_storage.variant_processor = :vips

# Enable parameter wrapping for JSON.
# Previously this was set in an initializer. It's fine to keep using that initializer if you've customized it.
# To disable parameter wrapping entirely, set this config to `false`.
# Rails.application.config.action_controller.wrap_parameters_by_default = true

# Specifies whether generated namespaced UUIDs follow the RFC 4122 standard for namespace IDs provided as a
# `String` to `Digest::UUID.uuid_v3` or `Digest::UUID.uuid_v5` method calls.
#
# See https://guides.rubyonrails.org/configuring.html#config-active-support-use-rfc4122-namespaced-uuids for
# more information.
# Rails.application.config.active_support.use_rfc4122_namespaced_uuids = true

# Change the default headers to disable browsers' flawed legacy XSS protection.
# Rails.application.config.action_dispatch.default_headers = {
#   "X-Frame-Options" => "SAMEORIGIN",
#   "X-XSS-Protection" => "0",
#   "X-Content-Type-Options" => "nosniff",
#   "X-Download-Options" => "noopen",
#   "X-Permitted-Cross-Domain-Policies" => "none",
#   "Referrer-Policy" => "strict-origin-when-cross-origin"
# }

# ** Please read carefully, this must be configured in config/application.rb **
# Change the format of the cache entry.
# Changing this default means that all new cache entries added to the cache
# will have a different format that is not supported by Rails 6.1 applications.
# Only change this value after your application is fully deployed to Rails 7.0
# and you have no plans to rollback.
# When you're ready to change format, add this to `config/application.rb` (NOT this file):
#  config.active_support.cache_format_version = 7.0

# Cookie serializer: 2 options
#
# If you're upgrading and haven't set `cookies_serializer` previously, your cookie serializer
# is `:marshal`. The default for new apps is `:json`.
#
# Rails.application.config.action_dispatch.cookies_serializer = :json
#
#
# To migrate an existing application to the `:json` serializer, use the `:hybrid` option.
#
# Rails transparently deserializes existing (Marshal-serialized) cookies on read and
# re-writes them in the JSON format.
#
# It is fine to use `:hybrid` long term; you should do that until you're confident *all* your cookies
# have been converted to JSON. To keep using `:hybrid` long term, move this config to its own
# initializer or to `config/application.rb`.
#
# Rails.application.config.action_dispatch.cookies_serializer = :hybrid
#
#
# If your cookies can't yet be serialized to JSON, keep using `:marshal` for backward-compatibility.
#
# If you have configured the serializer elsewhere, you can remove this section of the file.
#
# See https://guides.rubyonrails.org/action_controller_overview.html#cookies for more information.

# Change the return value of `ActionDispatch::Request#content_type` to the Content-Type header without modification.
# Rails.application.config.action_dispatch.return_only_request_media_type_on_content_type = false

# Active Storage `has_many_attached` relationships will default to replacing the current collection instead of appending to it.
# Thus, to support submitting an empty collection, the `file_field` helper will render an hidden field
# `include_hidden` by default when `multiple_file_field_include_hidden` is set to `true`.
# See https://guides.rubyonrails.org/configuring.html#config-active-storage-multiple-file-field-include-hidden for more information.
# Rails.application.config.active_storage.multiple_file_field_include_hidden = true

# ** Please read carefully, this must be configured in config/application.rb (NOT this file) **
# Disables the deprecated #to_s override in some Ruby core classes
# See https://guides.rubyonrails.org/configuring.html#config-active-support-disable-to-s-conversion for more information.
# config.active_support.disable_to_s_conversion = true
</file>

<file path="config/initializers/new_framework_defaults_7_1.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.
#
# This file eases your Rails 7.1 framework defaults upgrade.
#
# Uncomment each configuration one by one to switch to the new default.
# Once your application is ready to run with all new defaults, you can remove
# this file and set the `config.load_defaults` to `7.1`.
#
# Read the Guide for Upgrading Ruby on Rails for more info on each option.
# https://guides.rubyonrails.org/upgrading_ruby_on_rails.html

# No longer add autoloaded paths into `$LOAD_PATH`. This means that you won't be able
# to manually require files that are managed by the autoloader, which you shouldn't do anyway.
# This will reduce the size of the load path, making `require` faster if you don't use bootsnap, or reduce the size
# of the bootsnap cache if you use it.
# Rails.application.config.add_autoload_paths_to_load_path = false

# Remove the default X-Download-Options headers since it is used only by Internet Explorer.
# If you need to support Internet Explorer, add back `"X-Download-Options" => "noopen"`.
# Rails.application.config.action_dispatch.default_headers = {
#   "X-Frame-Options" => "SAMEORIGIN",
#   "X-XSS-Protection" => "0",
#   "X-Content-Type-Options" => "nosniff",
#   "X-Permitted-Cross-Domain-Policies" => "none",
#   "Referrer-Policy" => "strict-origin-when-cross-origin"
# }

# Do not treat an `ActionController::Parameters` instance
# as equal to an equivalent `Hash` by default.
# Rails.application.config.action_controller.allow_deprecated_parameters_hash_equality = false

# Active Record Encryption now uses SHA-256 as its hash digest algorithm. Important: If you have
# data encrypted with previous Rails versions, there are two scenarios to consider:
#
# 1. If you have +config.active_support.key_generator_hash_digest_class+ configured as SHA1 (the default
# before Rails 7.0), you need to configure SHA-1 for Active Record Encryption too:
# Rails.application.config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1
# 2. If you have +config.active_support.key_generator_hash_digest_class+ configured as SHA256 (the new default
# in 7.0), then you need to configure SHA-256 for Active Record Encryption:
# Rails.application.config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256
#
# If you don't currently have data encrypted with Active Record encryption, you can disable this setting to
# configure the default behavior starting 7.1+:
# Rails.application.config.active_record.encryption.support_sha1_for_non_deterministic_encryption = false

# No longer run after_commit callbacks on the first of multiple Active Record
# instances to save changes to the same database row within a transaction.
# Instead, run these callbacks on the instance most likely to have internal
# state which matches what was committed to the database, typically the last
# instance to save.
# Rails.application.config.active_record.run_commit_callbacks_on_first_saved_instances_in_transaction = false

# Configures SQLite with a strict strings mode, which disables double-quoted string literals.
#
# SQLite has some quirks around double-quoted string literals.
# It first tries to consider double-quoted strings as identifier names, but if they don't exist
# it then considers them as string literals. Because of this, typos can silently go unnoticed.
# For example, it is possible to create an index for a non existing column.
# See https://www.sqlite.org/quirks.html#double_quoted_string_literals_are_accepted for more details.
# Rails.application.config.active_record.sqlite3_adapter_strict_strings_by_default = true

# Disable deprecated singular associations names
# Rails.application.config.active_record.allow_deprecated_singular_associations_name = false

# Enable the Active Job `BigDecimal` argument serializer, which guarantees
# roundtripping. Without this serializer, some queue adapters may serialize
# `BigDecimal` arguments as simple (non-roundtrippable) strings.
#
# When deploying an application with multiple replicas, old (pre-Rails 7.1)
# replicas will not be able to deserialize `BigDecimal` arguments from this
# serializer. Therefore, this setting should only be enabled after all replicas
# have been successfully upgraded to Rails 7.1.
# Rails.application.config.active_job.use_big_decimal_serializer = true

# Specify if an `ArgumentError` should be raised if `Rails.cache` `fetch` or
# `write` are given an invalid `expires_at` or `expires_in` time.
# Options are `true`, and `false`. If `false`, the exception will be reported
# as `handled` and logged instead.
# Rails.application.config.active_support.raise_on_invalid_cache_expiration_time = true

# Specify whether Query Logs will format tags using the SQLCommenter format
# (https://open-telemetry.github.io/opentelemetry-sqlcommenter/), or using the legacy format.
# Options are `:legacy` and `:sqlcommenter`.
# Rails.application.config.active_record.query_log_tags_format = :sqlcommenter

# Specify the default serializer used by `MessageEncryptor` and `MessageVerifier`
# instances.
#
# The legacy default is `:marshal`, which is a potential vector for
# deserialization attacks in cases where a message signing secret has been
# leaked.
#
# In Rails 7.1, the new default is `:json_allow_marshal` which serializes and
# deserializes with `ActiveSupport::JSON`, but can fall back to deserializing
# with `Marshal` so that legacy messages can still be read.
#
# In Rails 7.2, the default will become `:json` which serializes and
# deserializes with `ActiveSupport::JSON` only.
#
# Alternatively, you can choose `:message_pack` or `:message_pack_allow_marshal`,
# which serialize with `ActiveSupport::MessagePack`. `ActiveSupport::MessagePack`
# can roundtrip some Ruby types that are not supported by JSON, and may provide
# improved performance, but it requires the `msgpack` gem.
#
# For more information, see
# https://guides.rubyonrails.org/v7.1/configuring.html#config-active-support-message-serializer
#
# If you are performing a rolling deploy of a Rails 7.1 upgrade, wherein servers
# that have not yet been upgraded must be able to read messages from upgraded
# servers, first deploy without changing the serializer, then set the serializer
# in a subsequent deploy.
# Rails.application.config.active_support.message_serializer = :json_allow_marshal

# Enable a performance optimization that serializes message data and metadata
# together. This changes the message format, so messages serialized this way
# cannot be read by older versions of Rails. However, messages that use the old
# format can still be read, regardless of whether this optimization is enabled.
#
# To perform a rolling deploy of a Rails 7.1 upgrade, wherein servers that have
# not yet been upgraded must be able to read messages from upgraded servers,
# leave this optimization off on the first deploy, then enable it on a
# subsequent deploy.
# Rails.application.config.active_support.use_message_serializer_for_metadata = true

# Set the maximum size for Rails log files.
#
# `config.load_defaults 7.1` does not set this value for environments other than
# development and test.
#
# if Rails.env.local?
#   Rails.application.config.log_file_size = 100 * 1024 * 1024
# end

# Enable raising on assignment to attr_readonly attributes. The previous
# behavior would allow assignment but silently not persist changes to the
# database.
# Rails.application.config.active_record.raise_on_assign_to_attr_readonly = true

# Enable validating only parent-related columns for presence when the parent is mandatory.
# The previous behavior was to validate the presence of the parent record, which performed an extra query
# to get the parent every time the child record was updated, even when parent has not changed.
# Rails.application.config.active_record.belongs_to_required_validates_foreign_key = false

# Enable precompilation of `config.filter_parameters`. Precompilation can
# improve filtering performance, depending on the quantity and types of filters.
# Rails.application.config.precompile_filter_parameters = true

# Enable before_committed! callbacks on all enrolled records in a transaction.
# The previous behavior was to only run the callbacks on the first copy of a record
# if there were multiple copies of the same record enrolled in the transaction.
# Rails.application.config.active_record.before_committed_on_all_records = true

# Disable automatic column serialization into YAML.
# To keep the historic behavior, you can set it to `YAML`, however it is
# recommended to explicitly define the serialization method for each column
# rather than to rely on a global default.
# Rails.application.config.active_record.default_column_serializer = nil

# Enable a performance optimization that serializes Active Record models
# in a faster and more compact way.
#
# To perform a rolling deploy of a Rails 7.1 upgrade, wherein servers that have
# not yet been upgraded must be able to read caches from upgraded servers,
# leave this optimization off on the first deploy, then enable it on a
# subsequent deploy.
# Rails.application.config.active_record.marshalling_format_version = 7.1

# Run `after_commit` and `after_*_commit` callbacks in the order they are defined in a model.
# This matches the behaviour of all other callbacks.
# In previous versions of Rails, they ran in the inverse order.
# Rails.application.config.active_record.run_after_transaction_callbacks_in_order_defined = true

# Whether a `transaction` block is committed or rolled back when exited via `return`, `break` or `throw`.
#
# Rails.application.config.active_record.commit_transaction_on_non_local_return = true

# Controls when to generate a value for <tt>has_secure_token</tt> declarations.
#
# Rails.application.config.active_record.generate_secure_token_on = :initialize

# ** Please read carefully, this must be configured in config/application.rb **
# Change the format of the cache entry.
# Changing this default means that all new cache entries added to the cache
# will have a different format that is not supported by Rails 7.0
# applications.
# Only change this value after your application is fully deployed to Rails 7.1
# and you have no plans to rollback.
# When you're ready to change format, add this to `config/application.rb` (NOT
# this file):
#   config.active_support.cache_format_version = 7.1

# Configure Action View to use HTML5 standards-compliant sanitizers when they are supported on your
# platform.
#
# `Rails::HTML::Sanitizer.best_supported_vendor` will cause Action View to use HTML5-compliant
# sanitizers if they are supported, else fall back to HTML4 sanitizers.
#
# In previous versions of Rails, Action View always used `Rails::HTML4::Sanitizer` as its vendor.
#
# Rails.application.config.action_view.sanitizer_vendor = Rails::HTML::Sanitizer.best_supported_vendor

# Configure Action Text to use an HTML5 standards-compliant sanitizer when it is supported on your
# platform.
#
# `Rails::HTML::Sanitizer.best_supported_vendor` will cause Action Text to use HTML5-compliant
# sanitizers if they are supported, else fall back to HTML4 sanitizers.
#
# In previous versions of Rails, Action Text always used `Rails::HTML4::Sanitizer` as its vendor.
#
# Rails.application.config.action_text.sanitizer_vendor = Rails::HTML::Sanitizer.best_supported_vendor

# Configure the log level used by the DebugExceptions middleware when logging
# uncaught exceptions during requests
# Rails.application.config.action_dispatch.debug_exception_log_level = :error

# Configure the test helpers in Action View, Action Dispatch, and rails-dom-testing to use HTML5
# parsers.
#
# Nokogiri::HTML5 isn't supported on JRuby, so JRuby applications must set this to :html4.
#
# In previous versions of Rails, these test helpers always used an HTML4 parser.
#
# Rails.application.config.dom_testing_default_html_version = :html5
</file>

<file path="config/initializers/permissions_policy.rb">
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Define an application-wide HTTP permissions policy. For further
# information see: https://developers.google.com/web/updates/2018/06/feature-policy

# Rails.application.config.permissions_policy do |policy|
#   policy.camera      :none
#   policy.gyroscope   :none
#   policy.microphone  :none
#   policy.usb         :none
#   policy.fullscreen  :self
#   policy.payment     :self, "https://secure.example.com"
# end
</file>

<file path="config/locales/ca.yml">
ca:
  activerecord:
    models:
      comfy/cms/site: Lloc
      comfy/cms/layout: Plantilla
      comfy/cms/page: Pàgina
      comfy/cms/snippet: Fragment
      comfy/cms/file: Arxiu
      comfy/cms/translation: Traducció

    attributes:
      comfy/cms/site:
        identifier: Identificador
        label: Nom
        hostname: Adreça
        path: Ruta
        locale: Lengua
      comfy/cms/layout:
        identifier: Identificador
        label: Nom de la plantilla
        app_layout: Plantilla base
        parent_id: Plantilla pare
        content: Contingut
        css: Full d'estil
        js: JavaScript
      comfy/cms/page:
        label: Títol
        layout_id: Plantilla
        slug: Ruta
        full_path: Ruta complerta
        parent_id: Pare
        target_page_id: Redirigir a
        content: Contingut
        is_published: Publicada
      comfy/cms/file:
        label: Nom
        file: Arxiu
        description: Descripció
      comfy/cms/snippet:
        label: Nom
        identifier: Identificador
        content: Contingut
      comfy/cms/translation:
        locale: Idioma
        label: Nom
        layout_id: Plantilla
        is_published: Publicat

  comfy:
    cms:
      content:
        site_not_found: El lloc no s'ha pogut trobar
        layout_not_found: El disseny no s'ha pogut trobar
        page_not_found: La pàgina no s'ha pogut trobar

    admin:
      cms:
        base:
          site_not_found: El lloc no s'ha pogut trobar
          seeds_enabled: CMS Fixtures habilitades. Tots els canvis realitzats seran rebutjats.
          sites: Llocs
          layouts: Dissenys
          pages: Pàgines
          snippets: Fragments
          files: Arxius

        sites:
          created: S'ha creat el lloc
          creation_failure: El lloc no s'ha pogut ser crear
          updated: S'ha actualitzat el lloc
          update_failure: El lloc no s'ha pogut actualitzar
          deleted: S'ha esborrat el lloc
          not_found: El lloc no s'ha pogut trobar

          index:
            title: Llistat de llocs
            new_link: Crea un nou lloc
            select: Selecciona el lloc
            edit: Edita
            delete: Esborra
            are_you_sure: Esteu segur de que voleu eliminar aquest lloc?
          new:
            title: Creant lloc
          edit:
            title: Editant lloc
          form:
            create: Crea lloc
            cancel: Cancel·la
            update: Actualiza el lloc

        layouts:
          created: S'ha creat el disseny
          creation_failure: El disseny no s'ha pogut crear
          updated: S'ha actualitzat el disseny
          update_failure: El disseny NO s'ha pogut actualitzar
          deleted: S'ha esborrat el disseny
          not_found: El disseny no s'ha pogut trobar

          index:
            title: Dissenys
            new_link: Crea un nou disseny
          index_branch:
            add_child_layout: Afegeix un disseny fill
            edit: Edita
            delete: Esborra
            are_you_sure: Esteu segur?
          new:
            title: Nou disseny
          edit:
            title: Editant disseny
          form:
            select_parent_layout: Seleccioneu el disseny pare
            select_app_layout: Seleccioneu el disseny per a l'aplicació
            create: Crea el disseny
            cancel: Cancel·la
            update: Actualitza el disseny

        pages:
          created: S'ha creat la pàgina
          creation_failure: La pàgina no s'ha pogut crear
          updated: S'ha actualitzat la pàgina
          update_failure: La pàgina no s'ha pogut actualitzar
          deleted: S'ha esborrat la pàgina
          not_found: La pàgina no s'ha pogut esborrar
          layout_not_found: No s'ha trobat cap disseny. Creeu-ne un primer.

          index:
            title: Pàgines
            new_link: Crea una nova pàgina
          index_branch:
            toggle: Canvia
            add_child_page: Afegeix una pàgina filla
            edit: Edita
            delete: Elimina
            are_you_sure: Esteu segur?
          new:
            title: Nova pàgina
          edit:
            title: Editant pàgina
          form:
            select_target_page: No redirigir
            preview: Vista prèvia
            create: Crea la pàgina
            cancel: Cancel·la
            update: Actualitza la pàgina
            choose_link: Sel·leccioneu una pàgina…

        fragments:
          form_fragments:
            no_tags: |-
              La plantilla no té etiquetes de contingut definides.<br/>
              Editeu el contingut per a incloure alguna etiqueta de pàgina o camp, com per exemple: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: S'ha creat la traducció
          creation_failure: La traducció no s'ha pogut crear
          updated: S'ha actualitzat la traducció
          update_failure: La traducció no s'ha pogut actualitzar
          deleted: S'ha esborrat la traducció
          not_found: La traducció no s'ha pogut esborrar

          new:
            title: Nova traducció
          edit:
            title: Editant traducció
          form:
            preview: Vista prèvia
            create: Crea
            update: Actualitza
            cancel: Cancel·la
          sidebar:
            new: Crea una nova traducció
            confirm: Esteu segur?

        snippets:
          created: S'ha creat el fragment
          creation_failure: El fragment no s'ha pogut crear
          updated: S'ha actualitzat el fragment
          update_failure: El fragment no s'ha pogut actualitzar
          deleted: S'ha esborrat el fragment
          not_found: Fragment no trobat

          index:
            title: Fragments
            new_link: Crea un nou fragment
            edit: Edita
            delete: Elimina
            are_you_sure: Esteu segur?
          new:
            title: Nou fragment
          edit:
            title: Editant fragment
          form:
            create: Crear el fragment
            cancel: Cancel·la
            update: Actualitza el fragment

        revisions:
          reverted: S'ha revertit el contingut
          record_not_found: El fragment no s'ha pogut trobar
          not_found: La revisió no s'ha pogut trobar

          show:
            title: Revisions de
            revision: Revisió
            update: Actualitza a aquesta versió
            cancel: Cancel·la
            content: Contingut
            changes: Canvis
            previous: Anterior
            current: Actual
          sidebar:
            revision:
              zero: No hi ha cap revisió
              one: '%{count} revisió'
              few: '%{count} revisions'
              many: '%{count} revisions'
              other: '%{count} revisions'

        files:
          created: S'ha pujat l'arxiu
          creation_failure: L'arxiu no s'ha pogut pujar
          updated: S'ha actualitzat l'arxiu
          update_failure: L'arxiu no s'ha pogut actualitzar
          deleted: S'ha esborrat l'arxiu
          not_found: L'arxiu no s'ha pogut trobar

          index:
            title: Arxius
            new_link: Puja un nou arxiu
            button: Carrega els arxius
          new:
            title: Nou arxiu
          edit:
            title: Editant arxiu
          form:
            current_file: Arxiu actual
            create: Pujar arxiu
            cancel: Cancel·la
            update: Actualitza arxiu
            delete: Esborra
            are_you_sure: Esteu segur?
          page_form:
            are_you_sure: Esteu segur?
          file:
            edit: Edita
            delete: Esborra
            are_you_sure: Esteu segur?

        categories:
          index:
            edit: Edita
            done: Fet
            all: Tots
            add: Afegeix
            add_placeholder: Afegeix una categoria
          show:
            are_you_sure: Esteu segur?
          edit:
            save: Guarda
          form:
            label: Categories
</file>

<file path="config/locales/cs.yml">
cs:
  activerecord:
    models:
      comfy/cms/site: Web
      comfy/cms/layout: Rozložení
      comfy/cms/page: Stránka
      comfy/cms/snippet: Úryvek
      comfy/cms/file: Soubor
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifikátor
        label: Popis
        hostname: Doména
        path: Cesta
        locale: Jazyk
      comfy/cms/layout:
        identifier: Identifikátor
        label: Název rozložení
        app_layout: Rozložení aplikace
        parent_id: Rodičovské rozložení
        content: Obsah
        css: Styl
        js: Javascript
      comfy/cms/page:
        label: Popis
        layout_id: Rozložení
        slug: Slug
        full_path: Full path
        parent_id: Rodič
        target_page_id: Přesměrovat na stránku
        content: Obsah
        is_published: Publikovaný
      comfy/cms/file:
        label: Popis
        file: Soubor
        description: Popis
      comfy/cms/snippet:
        identifier: Identifikátor
        label: Popis
        content: Obsah
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Web nenalezen
        layout_not_found: Rozložení nenalezeno
        page_not_found: Stránka nenalezena

    admin:
      cms:
        base:
          site_not_found: Web nenalezen
          seeds_enabled: Je povolen pevně definovaný obsah CMS. Všechny zde provedené změny budou ztraceny.
          sites: Weby
          layouts: Rozložení
          pages: Stránky
          snippets: Úryvky
          files: Soubory

        sites:
          created: Web vytvořen
          creation_failure: Nepodařilo se vytvořit web
          updated: Web upraven
          update_failure: Nepodařilo se upravit web
          deleted: Web odstraněn
          not_found: Web nenalezen

          index:
            title: Weby
            new_link: Vytvořit web
            select: Vyberte web
            edit: Upravit
            delete: Smazat
            are_you_sure: Určitě chcete odstranit tento web?
          new:
            title: Nový web
          edit:
            title: Úprava webu
          form:
            create: Vytvořit web
            cancel: Zrušit
            update: Upravit web

        layouts:
          created: Rozložení vytvořeno
          creation_failure: Nepodařilo se vytvořit rozložení
          updated: Rozložení upraveno
          update_failure: Nepodařilo se upravit rozložení
          deleted: Rozložení odstraněno
          not_found: Rozložení nenalezeno

          index:
            title: Rozložení
            new_link: Vytvořit nové rozložení
          index_branch:
            add_child_layout: Přidat odvozené rozložení
            edit: Upravit
            delete: Smazat
            are_you_sure: Určitě?
          new:
            title: Nové rozložení
          edit:
            title: Úprava rozložení
          form:
            select_parent_layout: Zvolte rodičovské rozložení
            select_app_layout: Zvolte rozložení aplikace
            create: Vytvořit rozložení
            cancel: Zrušit
            update: Upravit rozložení

        pages:
          created: Stránka vytvořena
          creation_failure: Nepodařilo se vytvořit stránku
          updated: Stránka upravena
          update_failure: Nepodařilo se upravit stránku
          deleted: Stránka odstraněna
          not_found: Stránka nenalezena
          layout_not_found: "Nebyla nalezena žádná rozložení, vytvořte je prosím."

          index:
            title: Stránky
            new_link: Vytvořit novou stránku
          index_branch:
            toggle: Přepnout
            add_child_page: Přidat podstránku
            edit: Upravit
            delete: Smazat
            are_you_sure: Určitě?
          new:
            title: Nová stránka
          edit:
            title: Úprava stránky
          form:
            select_target_page: Bez přesměrování
            preview: Náhled
            create: Vytvořit stránku
            cancel: Zrušit
            update: Upravit stránku
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Rozložení nedefinuje žádné obsahové značky.<br/>
              Upravte jeho obsah tak, aby zahrnovalo obsahové značky. Například: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Úryvek vytvořen
          creation_failure: Nepodařilo se vytvořit úryvek
          updated: Úryvek upraven
          update_failure: Nepodařilo se upravit úryvek
          deleted: Úryvek odstraněn
          not_found: Úryvek nenalezen

          index:
            title: Úryvky
            new_link: Vytvořit úryvek
            edit: Upravit
            delete: Smazat
            are_you_sure: Určitě?
          new:
            title: Nový úryvek
          edit:
            title: Upravit úryvek
          form:
            create: Vytvořit úryvek
            cancel: Zrušit
            update: Upravit úryvek

        revisions:
          reverted: Obsah byl obnoven
          record_not_found: Záznam nenalezen
          not_found: Revize nenalezena

          show:
            title: Revize pro
            revision: Revize
            update: Použít tuto revizi
            cancel: Zrušit
            content: Obsah
            changes: Změny
            previous: Předchozí
            current: Aktuální
          sidebar:
            revision:
              zero: Žádné revize
              one: '%{count} revize'
              few: '%{count} revize'
              many: '%{count} revizí'
              other: '%{count} revizí'

        files:
          created: Soubory nahrány
          creation_failure: Nepodařilo se nahrát soubory
          updated: Soubor upraven
          update_failure: Nepodařilo se upravit soubor
          deleted: Soubor odstraněn
          not_found: Soubor nenalezen

          index:
            title: Soubory
            new_link: Nahrát nový soubor
            button: Nahrát soubory
          new:
            title: Nový soubor
          edit:
            title: Upravit soubor
          form:
            current_file: Aktuální soubor
            create: Nahrát soubor
            cancel: Zrušit
            update: Upravit soubor
            delete: Smazat
            are_you_sure: Určitě?
          page_form:
            are_you_sure: Určitě?
          file:
            edit: Upravit
            delete: Smazat
            are_you_sure: Určitě?

        categories:
          index:
            edit: Upravit
            done: Hotovo
            all: Všechny Kategorie
            add: Přidat
            add_placeholder: Přidat kategorii
          show:
            are_you_sure: Určitě?
          edit:
            save: Uložit
          form:
            label: Kategorie
</file>

<file path="config/locales/da.yml">
da:
  activerecord:
    models:
      comfy/cms/site: Websted
      comfy/cms/layout: Layout
      comfy/cms/page: Side
      comfy/cms/snippet: Snippet
      comfy/cms/file: Fil
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Nøgleord
        label: Etiket
        hostname: Værtsnavn
        path: Sti
        locale: Sprog
      comfy/cms/layout:
        identifier: Nøgleord
        label: Layout Navn
        app_layout: App Layout
        parent_id: Overordnet Layout
        content: Indhold
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Etiket
        layout_id: Layout
        slug: Slug
        full_path: Full path
        parent_id: Overordnet
        target_page_id: Viderestil til Side
        content: Indhold
        is_published: Udgivet
      comfy/cms/file:
        label: Etiket
        file: Fil
        description: Beskrivelse
      comfy/cms/snippet:
        identifier: Nøgleord
        label: Etiket
        content: Indhold
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Websted findes ikke
        layout_not_found: Layout findes ikke
        page_not_found: Side findes ikke

    admin:
      cms:
        base:
          site_not_found: Webstedet findes ikke
          seeds_enabled: CMS Fixtures er slået til. Alle ændringer til blive ignoreret.
          sites: Websteder
          layouts: Layouts
          pages: Sider
          snippets: Snippets
          files: Filer

        sites:
          created: Websted oprettet
          creation_failure: Oprettelse af websted mislykkedes
          updated: Websted opdateret
          update_failure: Opdatering af websted mislykkedes
          deleted: Websted slettet
          not_found: Websted findes ikke

          index:
            title: Websteder
            new_link: Opret nyt websted
            select: Vælg websted
            edit: Rediger
            delete: Slet
            are_you_sure: Er du sikker på at du vil slette webstedet?
          new:
            title: Nyt websted
          edit:
            title: Rediger websted
          form:
            create: Opret websted
            cancel: Annuller
            update: Opdater websted

        layouts:
          created: Layout oprettet
          creation_failure: Oprettelse af layout mislykkedes
          updated: Layout opdateret
          update_failure: Opdatering af layout mislykkedes
          deleted: Layout slettet
          not_found: Layout findes ikke

          index:
            title: Layouts
            new_link: Opret nyt layout
          index_branch:
            add_child_layout: Tilføj underliggende layout
            edit: Rediger
            delete: Slet
            are_you_sure: Er du sikker?
          new:
            title: Nyt layout
          edit:
            title: Rdiger layout
          form:
            select_parent_layout: Vælg overordnet layout
            select_app_layout: Vælg applikationens layout
            create: Opret layout
            cancel: Annuller
            update: Opdater layout

        pages:
          created: Side oprettet
          creation_failure: Oprettelse af side mislykkedes
          updated: Side opdateret
          update_failure: Opdatering af side mislykkedes
          deleted: Side slettet
          not_found: Side findes ikke
          layout_not_found: Ingen layouts findes. Opret venligst et layout.

          index:
            title: Sider
            new_link: Opret ny side
          index_branch:
            toggle: Toggle
            add_child_page: Tilføj underliggende side
            edit: Rediger
            delete: Slet
            are_you_sure: Er du sikker?
          new:
            title: Ny side
          edit:
            title: Rediger side
          form:
            select_target_page: Ingen viderestilling
            preview: Preview
            create: Opret side
            cancel: Annuller
            update: Opdater side
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Layout har ingen indholdtags defineret.<br/>
              Rediger indholdet for at inkluderere et side- eller felttag. Eksempelvis: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snippet oprettet
          creation_failure: Oprettelse af snippet mislykkedes
          updated: Snippet opdateret
          update_failure: Opdatering af snippet mislykkedes
          deleted: Snippet slettet
          not_found: Snippet findes ikke

          index:
            title: Snippets
            new_link: Opret ny snippet
            edit: Rediger
            delete: Slet
            are_you_sure: Er du sikker?
          new:
            title: Ny snippet
          edit:
            title: Rediger snippet
          form:
            create: Opret snippet
            cancel: Annuller
            update: Opdater snippet

        revisions:
          reverted: Indhold gendannet
          record_not_found: Indhold findes ikke
          not_found: Revision findes ikke

          show:
            title: Revisioner for
            revision: Revision
            update: Opdater til denne revision
            cancel: Annuller
            content: Indhold
            changes: Ændringer
            previous: Forrige
            current: Nuværende
          sidebar:
            revision:
              zero: Ingen revisioner
              one: '%{count} revision'
              few: '%{count} revisioner'
              many: '%{count} revisioner'
              other: '%{count} revisioner'

        files:
          created: Filer sendt
          creation_failure: Sending af filer mislykkedes
          updated: Fil opdateret
          update_failure: Opdatering af fil mislykkedes
          deleted: Fil slettet
          not_found: Fil findes ikke

          index:
            title: Filer
            new_link: Send ny fil
            button: Send filer
          new:
            title: Ny fil
          edit:
            title: Rediger fil
          form:
            current_file: Nuværende fil
            create: Send fil
            cancel: Annuller
            update: Opdater fil
            delete: Slet
            are_you_sure: Er du sikker?
          page_form:
            are_you_sure: Er du sikker?
          file:
            edit: Rediger
            delete: Slet
            are_you_sure: Er du sikker?

        categories:
          index:
            edit: Rediger
            done: Udført
            all: Alle Kategorier
            add: Tilføj
            add_placeholder: Tilføj kategori
          show:
            are_you_sure: Er du sikker?
          edit:
            save: Gem
          form:
            label: Kategorier
</file>

<file path="config/locales/es.yml">
es:
  activerecord:
    models:
      comfy/cms/site: Sitio
      comfy/cms/layout: Plantilla
      comfy/cms/page: Página
      comfy/cms/snippet: Fragmento
      comfy/cms/file: File
      comfy/cms/translation: Traducción

    attributes:
      comfy/cms/site:
        identifier: Identificador
        label: Nombre
        hostname: Dirección
        path: Ruta
        locale: Lengua
      comfy/cms/layout:
        identifier: Identifier
        label: Nombre de Plantilla
        app_layout: Plantilla Base
        parent_id: Plantilla Padre
        content: Contenido
        css: Hoja de Estilo
        js: Javascript
      comfy/cms/page:
        label: Título
        layout_id: Plantilla
        slug: Ruta
        full_path: Ruta completa
        parent_id: Padre
        target_page_id: Redirigir a
        content: Contenido
        is_published: Publicada
      comfy/cms/file:
        label: Nombre
        file: File
        description: Description
      comfy/cms/snippet:
        label: Nombre
        identifier: Identifier
        content: Contenido
      comfy/cms/translation:
        locale: Lengua
        label: Nombre
        layout_id: Plantilla
        is_published: Publicada

  comfy:
    cms:
      content:
        site_not_found: Sitio no encontrado
        layout_not_found: Diseño no encontrado
        page_not_found: Página no encontrada

    admin:
      cms:
        base:
          site_not_found: Sitio no encontrado
          seeds_enabled: CMS Fixtures habilitadas. Todos los cambios realizados serán descartados.
          sites: Sitios
          layouts: Diseños
          pages: Páginas
          snippets: Fragmentos
          files: Archivos

        sites:
          created: Sitio creado
          creation_failure: El sitio no ha podido ser creado
          updated: Sitio actualizado
          update_failure: El sitio no ha podido ser actualizado
          deleted: Sitio eliminado
          not_found: Sitio no encontrado

          index:
            title: Listado de Sitios
            new_link: Crear nuevo Sitio
            select: Selecciona el Sitio
            edit: Editar
            delete: Eliminar
            are_you_sure: ¿Está seguro de que desea eliminar este sitio?
          new:
            title: Creando Sitio
          edit:
            title: Editando Sitio
          form:
            create: Crear Sitio
            cancel: Cancelar
            update: Actualizar Sitio

        layouts:
          created: Diseño Creado
          creation_failure: El diseño NO ha podido ser Creado
          updated: Diseño Actualizado"
          update_failure: El diseño NO ha podido ser Actualizado
          deleted: Diseñó Eliminado
          not_found: Diseño no encontrado

          index:
            title: Diseños
            new_link: Crear Nuevo Diseño
          index_branch:
            add_child_layout: Añadir diseño hijo
            edit: Editar
            delete: Eliminar
            are_you_sure: ¿Está seguro?
          new:
            title: Nuevo Diseño
          edit:
            title: Editando Diseño
          form:
            select_parent_layout: Seleccionar diseño padre
            select_app_layout: Seleccionar diseño (App)
            create: Crear Diseño
            cancel: Cancelar
            update: Actualizar Diseño

        pages:
          created: Página creada
          creation_failure: La página no ha podido ser creada
          updated: Página actualizada
          update_failure: La página no ha podido ser actualizada
          deleted: Página eliminada
          not_found: Página no encontrada
          layout_not_found: No se ha encontrado una plantilla. Cree una primero.

          index:
            title: Páginas
            new_link: Crear Nueva Página
          index_branch:
            toggle: Cambiar
            add_child_page: Añadir página hija
            edit: Editar
            delete: Eliminar
            are_you_sure: ¿Está seguro?
          new:
            title: Nueva Página
          edit:
            title: Editando Página
          form:
            select_target_page: No Redirigir
            preview: Vista Previa
            create: Crear Página
            cancel: Cancelar
            update: Actualizar Página
            choose_link: Seleccione una página...

        fragments:
          form_fragments:
            no_tags: |-
              La plantilla no tiene etiquetas de contenido definidas.<br/>
              Edite el contenido para incluir alguna etiqueta de página o campo, por ejemplo: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Traducción creada
          creation_failure: La traducción no ha podido ser creada
          updated: Traducción actualizada
          update_failure: La traducción no ha podido ser actualizada
          deleted: Traducción eliminada
          not_found: Traducción no encontrada

          new:
            title: Nueva Traducción
          edit:
            title: Editando Traducción
          form:
            preview: Vista Previa
            create: Crear
            update: Actualizar
            cancel: Regresar a la Página
          sidebar:
            new: Nueva Traducción
            confirm: ¿Está seguro?

        snippets:
          created: Fragmento creado
          creation_failure: El fragmento no ha podido ser creado
          updated: Fragmento actualizado
          update_failure: El fragmento no ha podido ser actualizado
          deleted: Fragmento eliminado
          not_found: Fragmento no encontrado

          index:
            title: Fragmentos
            new_link: Crear nuevo Fragmento
            edit: Editar
            delete: Eliminar
            are_you_sure: ¿Está seguro?
          new:
            title: Nuevo Fragmento
          edit:
            title: Editando Fragmento
          form:
            create: Crear Fragmento
            cancel: Cancelar
            update: Actualizar Fragmento

        revisions:
          reverted: Contenido revertido
          record_not_found: Registro no encontrado
          not_found: Revisión no encontrada

          show:
            title: Revisiones de
            revision: Revisión
            update: Actualizar a esta versión
            cancel: Cancelar
            content: Contenido
            changes: Cambios
            previous: Anterior
            current: Actual
          sidebar:
            revision:
              zero: Sin Revisiones
              one: '%{count} Revisión'
              few: '%{count} Revisiones'
              many: '%{count} Revisiones'
              other: '%{count} Revisiones'

        files:
          created: Archivos subidos
          creation_failure: Fallo la subida del archivo
          updated: Archivo actualizado
          update_failure: Fallo la actualización del archivo
          deleted: Archivo borrado
          not_found: Archivo no encontrado

          index:
            title: Archivos
            new_link: Subir Nuevo Archivo
            button: Cargar Archivos
          new:
            title: Nuevo Archivo
          edit:
            title: Editar Archivo
          form:
            current_file: Archivo Actual
            create: Subir Archivo
            cancel: Cancelar
            update: Actualizar Archivo
            delete: Borrar
            are_you_sure: ¿Estás seguro?
          page_form:
            are_you_sure: ¿Estás seguro?
          file:
            edit: Editar
            delete: Borrar
            are_you_sure: ¿Estás seguro?

        categories:
          index:
            edit: Editar
            done: Listo
            all: Todas las Categorias
            add: Agregar
            add_placeholder: Añadir Categoría
          show:
            are_you_sure: ¿Estás seguro?
          edit:
            save: Guardar
          form:
            label: Categorias
</file>

<file path="config/locales/fi.yml">
fi:
  activerecord:
    models:
      comfy/cms/site: Sivusto
      comfy/cms/layout: Ulkoasu
      comfy/cms/page: Sivu
      comfy/cms/snippet: Koodinpätkä
      comfy/cms/file: Tiedosto
      comfy/cms/translation: Käännös

    attributes:
      comfy/cms/site:
        identifier: Tunniste
        label: Merkintä
        hostname: Isäntänimi
        path: Polku
        locale: Kieli
      comfy/cms/layout:
        identifier: Tunniste
        label: Ulkoasun nimi
        app_layout: Sovelluksen ulkoasu
        parent_id: Edeltäjän ulkoasu
        content: Sisältö
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Merkintä
        layout_id: Ulkoasu
        slug: URL-osa
        full_path: Koko polku
        parent_id: Edeltäjä
        target_page_id: Ohjaa sivulle
        content: Sisältö
        is_published: Julkaistu
      comfy/cms/file:
        label: Merkintä
        file: Tiedosto
        description: Kuvaus
      comfy/cms/snippet:
        label: Merkintä
        identifier: Tunniste
        content: Sisältö
      comfy/cms/translation:
        locale: Kieli
        label: Merkintä
        layout_id: Ulkoasu
        is_published: Julkaistu

  comfy:
    cms:
      content:
        site_not_found: Sivustoa ei löydy
        layout_not_found: Ulkoasua ei löydy
        page_not_found: Sivua ei löydy

    admin:
      cms:
        base:
          site_not_found: Sivustoa ei löydy
          seeds_enabled: CMS Seeds on kytketty päälle. Kaikki tehdyt muutokset hävitetään.
          sites: Sivustot
          layouts: Ulkoasut
          pages: Sivut
          snippets: Koodinpätkät
          files: Tiedostot

        sites:
          created: Sivusto on luotu
          creation_failure: Sivustoa ei voitu luoda
          updated: Sivusto on päivitetty
          update_failure: Sivustoa ei voitu päivittää
          deleted: Sivusto on poistettu
          not_found: Sivustoa ei löydy

          index:
            title: Sivustot
            new_link: Luo uusi sivusto
            select: Sivuston valinta
            edit: Muokkaa
            delete: Poista
            are_you_sure: Oletko varma, että haluat poistaa tämän sivuston?
          new:
            title: Uusi sivusto
          edit:
            title: Sivuston muokkaus
          form:
            create: Luo sivusto
            cancel: Peru
            update: Päivitä sivusto

        layouts:
          created: Ulkoasu on luotu
          creation_failure: Ulkoasua ei voitu luoda
          updated: Ulkoasu on päivitetty
          update_failure: Ulkoasua ei voitu päivittää
          deleted: Ulkoasu on poistettu
          not_found: Ulkoasua ei löydy

          index:
            title: Ulkoasut
            new_link: Luo uusi ulkoasu
          index_branch:
            add_child_layout: Lisää periytyvä ulkoasu
            edit: Muokkaa
            delete: Poista
            are_you_sure: Oletko varma?
          new:
            title: Uusi ulkoasu
          edit:
            title: Ulkoasun muokkaus
          form:
            select_parent_layout: Valitse edeltävä ulkoasu
            select_app_layout: Valitse sovelluksen ulkoasu
            create: Luo ulkoasu
            cancel: Peru
            update: Päivitä ulkoasu

        pages:
          created: Sivu on luotu
          creation_failure: Sivua ei voitu luoda
          updated: Sivu on päivitetty
          update_failure: Sivua ei voitu päivittää
          deleted: Sivu on poistettu
          not_found: Sivua ei löydy
          layout_not_found: Yhtään ulkoasua ei löydy. Ole hyvä ja luo sellainen.

          index:
            title: Sivut
            new_link: Luo uusi sivu
          index_branch:
            toggle: Valinta
            add_child_page: Lisää periytyvä sivu
            edit: Muokkaa
            delete: Poista
            are_you_sure: Oletko varma?
          new:
            title: Uusi sivu
          edit:
            title: Sivun muokkaus
          form:
            select_target_page: Ei uudelleenohjausta
            preview: Esikatselu
            create: Luo sivu
            cancel: Peru
            update: Päivitä sivu
            choose_link: Valitse sivu...

        fragments:
          form_fragments:
            no_tags: |-
              Ulkoasulla ei ole määriteltyjä tageja sisällölle.<br/>
              Muokkaa ulkoasun sisältöä niin, että se sisältää koodileikkeen tagin. Esimerkiksi: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Käännös on luotu
          creation_failure: Käännöstä ei voitu luoda
          updated: Käännös on päivitetty
          update_failure: Käännöstä ei voitu päivittää
          deleted: Käännös on poistettu
          not_found: Käännöstä ei löydy

          new:
            title: Uusi käännös
          edit:
            title: Käännöksen muokkaus
          form:
            preview: Esikatselu
            create: Luo käännös
            update: Päivitä käännös
            cancel: Palaa sivulle
          sidebar:
            new: Uusi käännös
            confirm: Oletko varma?

        snippets:
          created: Koodileike on luotu
          creation_failure: Koodileikettä ei voitu luoda
          updated: Koodileike on päivitetty
          update_failure: Koodileikettä ei voitu päivittää
          deleted: Koodileike on poistettu
          not_found: Koodileikettä ei löydy

          index:
            title: Koodileikkeet
            new_link: Luo uusi koodileike
            edit: Muokkaa
            delete: Poista
            are_you_sure: Oletko varma?
          new:
            title: Uusi koodileike
          edit:
            title: Koodileikkeen muokkaaminen
          form:
            create: Luo koodileike
            cancel: Peru
            update: Päivitä koodileike

        revisions:
          reverted: Aiempi sisältö on palautettu
          record_not_found: Tietuetta ei löydy
          not_found: Versiota ei löydy

          show:
            title: Versiot kohteelle
            revision: Versio
            update: Päivitä tähän versioon
            cancel: Peru
            content: Sisältö
            changes: Muokkaukset
            previous: Edellinen
            current: Nykyinen
          sidebar:
            revision:
              zero: Ei versiohistoriaa
              one: '%{count} aiempi versio'
              few: '%{count} aiempaa versiota'
              many: '%{count} aiempaa versiota'
              other: '%{count} versiota'

        files:
          created: Tiedostot on ladattu onnistuneesti
          creation_failure: Tiedostojen lataaminen epäonnistui
          updated: Tiedosto on päivitetty
          update_failure: Tiedoston päivittäminen epäonnistui
          deleted: Tiedosto on poistettu
          not_found: Tiedostoa ei löydy

          index:
            title: Tiedostot
            new_link: Lataa uusi tiedosto
            button: Lataa tiedostoja
          new:
            title: Uusi tiedosto
          edit:
            title: Tiedoston muokkaus
          form:
            current_file: Nykyinen tiedosto
            create: Lataa tiedosto
            cancel: Peru
            update: Päivitä tiedosto
            delete: Poista tiedosto
            are_you_sure: Oletko varma?
          page_form:
            are_you_sure: Oletko varma?
          file:
            edit: Muokkaa
            delete: Poista
            are_you_sure: Oletko varma?

        categories:
          index:
            edit: Muokkaa
            done: Valmis
            all: Kaikki luokat
            add: Lisää
            add_placeholder: Lisää luokka
          show:
            are_you_sure: Oletko varma?
          edit:
            save: Tallenna
          form:
            label: Luokat
</file>

<file path="config/locales/fr.yml">
fr:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Mise en page
      comfy/cms/page: Page
      comfy/cms/snippet: Fragment
      comfy/cms/file: Fichier
      comfy/cms/translation: Traduction

    attributes:
      comfy/cms/site:
        identifier: Identifiant
        label: Nom
        hostname: Nom d'hôte
        path: Chemin
        locale: Langue
      comfy/cms/layout:
        identifier: Identifiant
        label: Nom de la mise en page
        app_layout: Mise en page de l'application
        parent_id: Mise en page parent
        content: Contenu
        css: Feuille de style
        js: Javascript
      comfy/cms/page:
        label: Nom de la page
        layout_id: Mise en page
        slug: Identifiant
        full_path: Chemin complet
        parent_id: Parent
        target_page_id: Rediriger vers
        content: Contenu
        is_published: Publiée
      comfy/cms/file:
        label: Nom
        file: Fichier
        description: Description
      comfy/cms/snippet:
        identifier: Identifiant
        label: Nom
        content: Contenu
      comfy/cms/translation:
        locale: Langue
        label: Nom
        layout_id: Mise en page
        is_published: Publiée

  comfy:
    cms:
      content:
        site_not_found: Site introuvable
        layout_not_found: Mise en page introuvable
        page_not_found: Page introuvable

    admin:
      cms:
        base:
          site_not_found: Site introuvable
          seeds_enabled: Fixtures activés. Toutes les modifications seront supprimées.
          sites: Sites
          layouts: Mises en page
          pages: Pages
          snippets: Fragments
          files: Fichiers

        sites:
          created: Site créé
          creation_failure: Échec de la création du site
          updated: Site modifié
          update_failure: Échec de la modification du site
          deleted: Site supprimé
          not_found: Site introuvable

          index:
            title: Sites
            new_link: Nouveau site
            select: Sélectionner ce site
            edit: Modifier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer ce site ?
          new:
            title: Nouveau site
          edit:
            title: Modification du site
          form:
            create: Créer le site
            cancel: Annuler
            update: Modifier le site

        layouts:
          created: Mise en page créée
          creation_failure: Échec de la création de la mise en page
          updated: Mise en page modifiée
          update_failure: Échec de la modification de la mise en page
          deleted: Mise en page supprimée
          not_found: Mise en page introuvable

          index:
            title: Mises en page
            new_link: Nouvelle mise en page
          index_branch:
            add_child_layout: Ajouter une mise en page enfant
            edit: Modifier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer cette mise en page ?
          new:
            title: Nouvelle mise en page
          edit:
            title: Modification de la mise en page
          form:
            select_parent_layout: Sélectionner une mise en page parent
            select_app_layout: Sélectionner une mise en page de l'application
            create: Créer la mise en page
            cancel: Annuler
            update: Modifier la mise en page

        pages:
          created: Page créée
          creation_failure: Échec de la création de la page
          updated: Page modifiée
          update_failure: Échec de la modification de la page
          deleted: Page supprimée
          not_found: Page introuvable
          layout_not_found: Aucune mise en page disponible. Créez-en une nouvelle.

          index:
            title: Pages
            new_link: Nouvelle page
          index_branch:
            toggle: Basculer
            add_child_page: Ajouter une page enfant
            edit: Modifier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer cette page ?
          new:
            title: Nouvelle page
          edit:
            title: Modification de la page
          form:
            select_target_page: Pas de redirection
            preview: Prévisualiser
            create: Créer la page
            cancel: Annuler
            update: Modifier la page
            choose_link: Sélectionner une page...

        fragments:
          form_fragments:
            no_tags: |-
              Mise en page sans aucun tag de contenu.<br/>
              Modifiez le contenu pour y ajouter un tag de page ou de champ. Exemple : <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Traduction créée
          creation_failure: Échec de la création de la traduction
          updated: Traduction modifiée
          update_failure: Échec de la modification de la traduction
          deleted: Traduction supprimée
          not_found: Traduction introuvable

          new:
            title: Nouvelle Traduction
          edit:
            title: Modification de la Traduction
          form:
            preview: Prévisualiser
            create: Créer
            update: Modifier
            cancel: Annuler
          sidebar:
            new: Nouvelle Traduction
            confirm: Êtes-vous sûr ?

        snippets:
          created: Fragment créé
          creation_failure: Échec de la création du fragment
          updated: Fragment modifié
          update_failure: Échec de la modification du fragment
          deleted: Fragment supprimé
          not_found: Fragment introuvable

          index:
            title: Fragments
            new_link: Nouveau fragment
            edit: Modifier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer ce fragment ?
          new:
            title: Nouveau fragment
          edit:
            title: Modification du fragment
          form:
            create: Créer le fragment
            cancel: Annuler
            update: Modifier le fragment

        revisions:
          reverted: Contenu restauré
          record_not_found: Enregistrement introuvable
          not_found: Révision introuvable

          show:
            title: "Révisions :"
            revision: révision
            update: Restaurer cette révision
            cancel: Annuler
            content: Contenu
            changes: Changements
            previous: Précédente
            current: Actuelle
          sidebar:
            revision:
              zero: Pas de Révision
              one: '%{count} Révision'
              few: '%{count} Révisions'
              many: '%{count} Révisions'
              other: '%{count} Révisions'

        files:
          created: Fichier téléchargé
          creation_failure: Échec du téléchargement du fichier
          updated: Fichier modifié
          update_failure: Échec de la modification du fichier
          deleted: Fichier supprimé
          not_found: Fichier introuvable

          index:
            title: Fichiers
            new_link: Nouveau fichier
            button: Ajouter des fichiers
          new:
            title: Nouveau fichier
          edit:
            title: Modification du fichier
          form:
            current_file: Fichier actuel
            create: Envoyer
            cancel: Annuler
            update: Modifier le fichier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer ce fichier ?
          page_form:
            are_you_sure: Êtes-vous sûr de vouloir supprimer ce fichier ?
          file:
            edit: Modifier
            delete: Supprimer
            are_you_sure: Êtes-vous sûr de vouloir supprimer ce fichier ?

        categories:
          index:
            edit: Modifier
            done: Terminé
            all: Toutes les Catégories
            add: Ajouter
            add_placeholder: Ajouter la Catégorie
          show:
            are_you_sure: Êtes-vous sûr de vouloir supprimer cette catégorie ?
          edit:
            save: Enregistrer
          form:
            label: Catégories
</file>

<file path="config/locales/gr.yml">
gr:
  activerecord:
    models:
      comfy/cms/site: Ιστότοπος
      comfy/cms/layout: Διάταξη
      comfy/cms/page: Σελίδα
      comfy/cms/snippet: Snippet
      comfy/cms/file: Αρχείο
      comfy/cms/translation: Μετάφραση

    attributes:
      comfy/cms/site:
        identifier: Αναγνωριστικό
        label: Ετικέτα
        hostname: Όνομα host
        path: Διαδρομή
        locale: Γλώσσα
      comfy/cms/layout:
        identifier: Αναγνωριστικό
        label: Όνομα Διάταξης
        app_layout: Διάταξη Εφαρμογής
        parent_id: Διάταξη γονέα
        content: Περιεχόμενο
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Ετικέτα
        layout_id: Διάταξη
        slug: Slug
        full_path: Πλήρης Διαδρομή
        parent_id: Γονέας
        target_page_id: Ανακατεύθυνση σε Σελίδα
        content: Περιεχόμενο
        is_published: Δημοσιευμένο
      comfy/cms/file:
        label: Ετικέτα
        file: Αρχείο
        description: Περιγραφή
      comfy/cms/snippet:
        label: Ετικέτα
        identifier: Αναγνωριστικό
        content: Περιεχόμενο
      comfy/cms/translation:
        locale: Γλώσσα
        label: Ετικέτα
        layout_id: Διάταξη
        is_published: Δημοσιευμένο

  comfy:
    cms:
      content:
        site_not_found: Ο Ιστότοπος Δεν Βρέθηκε
        layout_not_found: Η Διάταξη Δεν Βρέθηκε
        page_not_found: Η Σελίδα Δεν Βρέθηκε

    admin:
      cms:
        base:
          site_not_found: Ο Ιστότοπος Δεν Βρέθηκε
          seeds_enabled: Τα CMS Seeds είναι ενεργοποιημένα. Όλες οι αλλαγές που θα γίνουν εδώ δεν θα αποθηκευτούν.
          sites: Ιστότοποι
          layouts: Διατάξεις
          pages: Σελίδες
          snippets: Snippets
          files: Αρχεία

        sites:
          created: Ο ιστότοπος δημιουργήθηκε
          creation_failure: Αποτυχία δημιουργίας ιστοτόπου
          updated: Ο ιστότοπος ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης ιστοτόπου
          deleted: Ο ιστότοπος διαγράφηκε
          not_found: Ο ιστότοπος δεν βρέθηκε

          index:
            title: Ιστότοποι
            new_link: Δημιουργία Νέου Ιστότοπου
            select: Επιλογή Ιστότοπου
            edit: Επεξεργασία
            delete: Διαγραφή
            are_you_sure: Είστε σίγουροι πως θέλετε να διαγράψετε αυτόν τον ιστότοπο;
          new:
            title: Νέος Ιστότοπος
          edit:
            title: Επεξεργασία Ιστοτόπου
          form:
            create: Δημιουργία Ιστοτόπου
            cancel: Ακύρωση
            update: Ενημέρωση Ιστοτόπου

        layouts:
          created: Η διάταξη δημιουργήθηκε
          creation_failure: Αποτυχία δημιουργίας διάταξης
          updated: Η διάταξη ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης διάταξης
          deleted: Η διάταξη διαγράφηκε
          not_found: Η διάταξη δεν βρέθηκε

          index:
            title: Διατάξεις
            new_link:  Δημιουργία Νέας Διάταξης
          index_branch:
            add_child_layout: Προσθήκη Child Διάταξης
            edit: Επεξεργασία
            delete: Διαγραφή
            are_you_sure: Είστε σίγουροι;
          new:
            title: Νέα Διάταξη
          edit:
            title: Επεξεργασία Διάταξης
          form:
            select_parent_layout: Επιλογή Διάταξης Γονέα
            select_app_layout: Επιλογή Διάταξης Εφαρμογής
            create: Δημιουργία Διάταξης
            cancel: Ακύρωση
            update: Ενημέρωση Διάταξης

        pages:
          created: Η σελίδα δημιουργήθηκε
          creation_failure: Αποτυχία δημιουργίας σελίδας
          updated: Η σελίδα ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης σελίδας
          deleted: Η σελίδα διαγράφηκε
          not_found: Η σελίδα δεν βρέθηκε
          layout_not_found: Η διάταξη δεν βρέθηκε. Προσπαθήστε να δημιουργήσετε μία.

          index:
            title: Σελίδες
            new_link: Δημιουργία Νέας Σελίδας
          index_branch:
            toggle: Toggle
            add_child_page: Δημιουργία Child Σελίδας
            edit: Επεξεργασία
            delete: Διαγραφή
            are_you_sure: Είστε σίγουροι;
          new:
            title: Νέα Σελίδα
          edit:
            title: Επεξεργασία Σελίδας
          form:
            select_target_page: Καμία Ανακατεύθυνση
            preview: Προεπισκόπηση
            create: Δημιουργία Σελίδας
            cancel: Ακύρωση
            update: Ενημέρωση Σελίδας
            choose_link: Επιλογή σελίδας...

        fragments:
          form_fragments:
            no_tags: |-
              Η διάταξη δεν έχει καθορίσει ετικέτες περιεχομένου.<br/>
              Επεξεργαστείτε το περιεχόμενο για να συμπεριλάβετε μια ετικέτα σελίδας ή πεδίου. Για παράδειγμα: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Η μετάφραση δημιουρήθηκε
          creation_failure: Αποτυχία δημιουργίας μετάφρασης
          updated: Η μετάφραση ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης μετάφρασης
          deleted: Η μετάφραση διαγράφηκε
          not_found: Η μετάφραση δεν βρέθηκε

          new:
            title: Νέα Μετάφραση
          edit:
            title: Επεξεργασία Μετάφρασης
          form:
            preview: Προεπισκόπηση
            create: Δημιουργία
            update: Ενημέρωση
            cancel: Επιστροφή στην Σελίδα
          sidebar:
            new: Νέα Μετάφραση
            confirm: Είστε σίγουροι;

        snippets:
          created: Το Snippet δημιουργήθηκε
          creation_failure: Αποτυχία δημιουργίας snippet
          updated: Το Snippet ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης snippet
          deleted: To Snippet διαγράφηκε
          not_found: Το Snippet δεν βρέθηκε

          index:
            title: Snippets
            new_link: Δημιουργία νέου Snippet
            edit: Επεξεργασία
            delete: Διαγραφή
            are_you_sure: Είστε σίγουροι;
          new:
            title: Νέο Snippet
          edit:
            title: Επεξεργασία Snippet
          form:
            create: Δημιουργία Snippet
            cancel: Ακύρωση
            update: Ενημέρωση Snippet

        revisions:
          reverted: Το περιεχόμενο επαναφέρθηκε
          record_not_found: Η Αναγραφή δεν βρέθηκε
          not_found: Η αναθεώρηση δεν βρέθηκε

          show:
            title: Αναθεωρήσεις για
            revision: Αναθεώρηση
            update: Ενημερωσή σε αυτή την Αναθεώρηση
            cancel: Ακύρωση
            content: Περιεχόμενο
            changes: Αλλαγές
            previous: Προηγούμενη
            current: Τρέχουσα
          sidebar:
            revision:
              zero: Καμία Αναθεώρηση
              one: '%{count} Αναθεώρηση'
              few: '%{count} Αναθεωρήσεις'
              many: '%{count} Αναθεωρήσεις'
              other: '%{count} Αναθεωρήσεις'

        files:
          created: Το αρχείο ανέβηκε
          creation_failure: Αποτυχία ανεβάσματος αρχείου
          updated: Το αρχείο ενημερώθηκε
          update_failure: Αποτυχία ενημέρωσης αρχείου
          deleted: Το αρχείο διαγράφηκε
          not_found: Το αρχεία δεν βρέθηκε

          index:
            title: Αρχεία
            new_link: Ανέβασμα Νέων Αρχείων
            button: Ανέβασμα Αρχείων
          new:
            title: Νέο Αρχείο
          edit:
            title: Επεξεργασία Αρχείου
          form:
            current_file: Τρέχων Αρχείο
            create: Ανέβασμα Αρχείου
            cancel: Ακύρωση
            update: Ενημέρωση Αρχείου
            delete: Διαγραφή Αρχείου
            are_you_sure: Είστε σίγουροι;
          page_form:
            are_you_sure: Είστε σίγουροι;
          file:
            edit: Επεξεργασία
            delete: Διαγραφή
            are_you_sure: Είστε σίγουροι;

        categories:
          index:
            edit: Επεξεργασία
            done: Τέλος
            all: Όλες οι κατηγορίες
            add: Προσθήκη
            add_placeholder: Προσθήκη κατηγορίας
          show:
            are_you_sure: Είστε σίγουροι;
          edit:
            save: Αποθήκευση
          form:
            label: Κατηγορίες
</file>

<file path="config/locales/it.yml">
it:
  activerecord:
    models:
      comfy/cms/site: Sito
      comfy/cms/layout: Layout
      comfy/cms/page: Pagina
      comfy/cms/snippet: Snippet
      comfy/cms/file: File
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identificatore
        label: Etichetta
        hostname: Indirizzo Host
        path: Percorso
        locale: Lingua
      comfy/cms/layout:
        identifier: Identificatore
        label: Nome Layout
        app_layout: Layout Applicazione
        parent_id: Layout Padre
        content: Contenuto
        css: Foglio di stile
        js: Javascript
      comfy/cms/page:
        label: Etichetta
        layout_id: Layout
        slug: Slug
        full_path: Full path
        parent_id: Padre
        target_page_id: Reindirizza a Pagina
        content: Contenuto
        is_published: Pubblicato
      comfy/cms/file:
        label: Etichetta
        file: File
        description: Descrizione
      comfy/cms/snippet:
        label: Etichetta
        identifier: Identificatore
        content: Contenuto
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Sito non trovato
        layout_not_found: Layout non trovato
        page_not_found: Pagina non trovata

    admin:
      cms:
        base:
          site_not_found: Sito non trovato
          seeds_enabled: Le Fixtures CMS sono abilitate. Tutti i cambiamenti fatti qui saranno scartati.
          sites: Siti
          layouts: Layout
          pages: Pagine
          snippets: Snippet
          files: Files

        sites:
          created: Sito creato
          creation_failure: Impossibile creare il sito
          updated: Sito aggiornato
          update_failure: Impossibile modificare il sito
          deleted: Sito eliminato
          not_found: Sito non trovato

          index:
            title: Siti
            new_link: Crea nuovo sito
            select: Seleziona sito
            edit: Modifica
            delete: Elimina
            are_you_sure: Sei sicuro di voler eliminare questo sito?
          new:
            title: Nuovo sito
          edit:
            title: Modifica sito
          form:
            create: Crea sito
            cancel: Cancellare
            update: Modifica sito

        layouts:
          created: Layout creato
          creation_failure: Impossibile creare il layout
          updated: Layout modificato
          update_failure: Impossibile modificare il layout
          deleted: Layout eliminato
          not_found: Layout non trovato

          index:
            title: Layout
            new_link: Crea nuovo layout
          index_branch:
            add_child_layout: Aggiungi Layout figlio
            edit: Modifica
            delete: Elimina
            are_you_sure: Sei sicuro di voler eliminare questo Layout?
          new:
            title: Nuovo Layout
          edit:
            title: Modifica Layout
          form:
            select_parent_layout: Seleziona Layout padre
            select_app_layout: Seleziona Layout applicazione
            create: Crea Layout
            cancel: Cancellare
            update: Modifica Layout

        pages:
          created: Pagina creata
          creation_failure: Impossibile creare la pagina
          updated: Pagina modificata
          update_failure: Impossibile modificare la pagina
          deleted: Pagina eliminata
          not_found: Pagina non trovata
          layout_not_found: Nessun layout trovato. Creane uno per favore.

          index:
            title: Pagine
            new_link: Crea nuova pagina
          index_branch:
            toggle: Alterna
            add_child_page: Aggiungi Pagina figlio
            edit: Modifica
            delete: Elimina
            are_you_sure: Sei sicuro di voler eliminare questa pagina?
          new:
            title: Nuova Pagina
          edit:
            title: Modifica Pagina
          form:
            select_target_page: Nessun reindirizzamento
            preview: Anteprima
            create: Crea Pagina
            cancel: Cancellare
            update: Modifica Pagina
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Il Layout non ha tag di contenuto definiti.<br/>
              Modifica il contenuto per includere una pagina o un campo. Per esempio: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snippet creato
          creation_failure: Impossibile creare lo snippet
          updated: Snippet modificato
          update_failure: Impossibile modificare lo snippet
          deleted: Snippet eliminato
          not_found: Snippet non trovato

          index:
            title: Snippet
            new_link: Crea nuovo Snippet
            edit: Modifica
            delete: Elimina
            are_you_sure: Sei sicuro di voler eliminare questo snippet?
          new:
            title: Nuovo Snippet
          edit:
            title: Modifica Snippet
          form:
            create: Crea Snippet
            cancel: Cancellare
            update: Modifica Snippet

        revisions:
          reverted: Contenuto ripristinato con successo
          record_not_found: Record non trovato
          not_found: Revisione non trovata

          show:
            title: Revisioni per
            revision: Revisione
            update: Aggiorna a questa revisione
            cancel: Cancellare
            content: Contenuto
            changes: Cambiamenti
            previous: Precedente
            current: Attuale
          sidebar:
            revision:
              zero: '%{count} Revisioni'
              one: '%{count} Revisione'
              few: '%{count} Revisioni'
              many: '%{count} Revisioni'
              other: '%{count} Revisioni'

        files:
          created: File caricati
          creation_failure: Impossibile caricare i file
          updated: File aggiornato
          update_failure: Impossibile aggiornare il file
          deleted: File eliminato
          not_found: File non trovato

          index:
            title: Files
            new_link: Carica nuovo file
            button: Carica File
          new:
            title: Nuovo File
          edit:
            title: Modifica File
          form:
            current_file: File attuale
            create: Carica File
            cancel: Cancellare
            update: Modifica File
            delete: Elimina
            are_you_sure: Sei sicuro?
          page_form:
            are_you_sure: Sei sicuro?
          file:
            edit: Modifica
            delete: Elimina
            are_you_sure: Sei sicuro?

        categories:
          index:
            edit: Modifica
            done: Fatto
            all: Tutte Categorie
            add: Aggiungi
            add_placeholder: Aggiungi categoria
          show:
            are_you_sure: Sei sicuro?
          edit:
            save: Salva
          form:
            label: Categorie
</file>

<file path="config/locales/ja.yml">
ja:
  activerecord:
    models:
      comfy/cms/site: サイト
      comfy/cms/layout: レイアウト
      comfy/cms/page: ページ
      comfy/cms/snippet: スニペット
      comfy/cms/file: File
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifier
        label: ラベル
        hostname: ホスト名
        path: パス
        locale: 言語
      comfy/cms/layout:
        identifier: Identifier
        label: レイアウト名
        app_layout: アプリケーションレイアウト
        parent_id: 親レイアウト
        content: コンテンツ
        css: スタイルシート
        js: Javascript
      comfy/cms/page:
        label: ラベル
        layout_id: レイアウト
        slug: スラッグ
        full_path: Full path
        parent_id: 親
        target_page_id: ページにリダイレクト
        content: コンテンツ
        is_published: パブリッシュ済み
      comfy/cms/file:
        label: ラベル
        file: File
        description: Description
      comfy/cms/snippet:
        identifier: Identifier
        label: ラベル
        content: コンテンツ
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: サイトが見つかりません
        layout_not_found: レイアウトが見つかりません
        page_not_found: ページが見つかりません

    admin:
      cms:
        base:
          site_not_found: サイトが見つかりません
          seeds_enabled: CMS フィクスチャが有効です。 ここでの変更はすべて破棄されます。
          sites: サイト
          layouts: レイアウト
          pages: ページ
          snippets: スニペット
          files: ファイル

        sites:
          created: サイトが作成されました
          creation_failure: サイトの作成に失敗しました
          updated: サイトが更新されました
          update_failure: サイトの更新に失敗しました
          deleted: サイトが削除されました
          not_found: サイトが見つかりません

          index:
            title: サイト
            new_link: 新規サイトを作成
            select: サイトを選択
            edit: 編集
            delete: 削除
            are_you_sure: このサイトを削除してもよろしいですか？
          new:
            title: 新規サイト
          edit:
            title: サイトを編集
          form:
            create: サイトを作成
            cancel: キャンセル
            update: サイトを更新

        layouts:
          created: レイアウトが作成されました
          creation_failure: レイアウトの作成に失敗しました
          updated: レイアウトが更新されました
          update_failure: レイアウトの更新に失敗しました
          deleted: レイアウトが削除されました
          not_found: レイアウトが見つかりません

          index:
            title: レイアウト
            new_link: 新規レイアウトを作成
          index_branch:
            add_child_layout: 子レイアウトを追加
            edit: 編集
            delete: 削除
            are_you_sure: よろしいですか？
          new:
            title: 新規レイアウト
          edit:
            title: レイアウトを編集
          form:
            select_parent_layout: 親レイアウトを選択
            select_app_layout: アプリケーションレイアウトを選択
            create: レイアウトを作成
            cancel: キャンセル
            update: レイアウトを更新

        pages:
          created: ページが作成されました
          creation_failure: ページの作成に失敗しました
          updated: ページが更新されました
          update_failure: ページの更新に失敗しました
          deleted: ページが削除されました
          not_found: ページが見つかりません
          layout_not_found: レイアウトが見つかりません。 レイアウトを作成してください。

          index:
            title: ページ
            new_link: 新規ページを作成
          index_branch:
            toggle: 切り替え
            add_child_page: 子ページを追加
            edit: 編集
            delete: 削除
            are_you_sure: よろしいですか？
          new:
            title: 新規ページ
          edit:
            title: ページを編集
          form:
            select_target_page: リダイレクトなし
            preview: プレビュー
            create: ページを作成
            cancel: キャンセル
            update: ページを更新
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              レイアウトにはコンテンツタグが定義されていません。<br/>
              コンテンツを編集してページまたはフィールドタグを含めてください。 例:  <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: スニペットが作成されました
          creation_failure: スニペットの作成に失敗しました
          updated: スニペットが更新されました
          update_failure: スニペットの更新に失敗しました
          deleted: スニペットが削除されました
          not_found: スニペットが見つかりません

          index:
            title: スニペット
            new_link: 新規スニペットを作成
            edit: 編集
            delete: 削除
            are_you_sure: よろしいですか？
          new:
            title: 新規スニペット
          edit:
            title: スニペットを編集
          form:
            create: スニペットを作成
            cancel: キャンセル
            update: スニペットを更新

        revisions:
          reverted: コンテンツが元に戻りました
          record_not_found: レコードが見つかりません
          not_found: リビジョンが見つかりません

          show:
            title: リビジョン
            revision: リビジョン
            update: このリビジョンに更新
            cancel: キャンセル
            content: Content
            changes: Changes
            previous: Previous
            current: Current
          sidebar:
            revision: &revision
              zero: リビジョン
              one: '%{count} リビジョン'
              few: '%{count} リビジョン'
              many: '%{count} リビジョン'
              other: '%{count} リビジョン'

        files:
          created: ファイルがアップロードされました
          creation_failure: ファイルのアップロードに失敗しました
          updated: ファイルが更新されました
          update_failure: ファイルの更新に失敗しました
          deleted: ファイルが削除されました
          not_found: ファイルが見つかりません

          index:
            title: ファイル
            new_link: 新規ファイルをアップロード
            button: ファイルをアップロード
          new:
            title: 新規ファイル
          edit:
            title: ファイルを編集
          form:
            current_file: 現在のファイル
            create: ファイルをアップロード
            cancel: キャンセル
            update: ファイルを更新
            delete: 削除
            are_you_sure: よろしいですか？
          page_form:
            are_you_sure: よろしいですか？
          file:
            edit: 編集
            delete: 削除
            are_you_sure: よろしいですか？

        categories:
          index:
            edit: 編集
            done: 完了
            all: すべて カテゴリー
            add: 追加
            add_placeholder: カテゴリを追加
          show:
            are_you_sure: よろしいですか？
          edit:
            save: 保存
          form:
            label: カテゴリー
</file>

<file path="config/locales/nb.yml">
nb:
  activerecord:
    models:
      comfy/cms/site: Nettside
      comfy/cms/layout: Layout
      comfy/cms/page: Side
      comfy/cms/snippet: Snutt
      comfy/cms/file: Fil
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifikator
        label: Navn
        hostname: Tjenestenavn
        path: Sti
        locale: Språk
      comfy/cms/layout:
        identifier: Identifikator
        label: Layoutnavn
        app_layout: Applayout
        parent_id: Hovedlayout
        content: Innhold
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Navn
        layout_id: Layout
        slug: Sti
        full_path: Fullstendig sti
        parent_id: Underside til
        target_page_id: Videresend til
        content: Innhold
        is_published: Publisert
      comfy/cms/file:
        label: Navn
        file: Fil
        description: Beskrivelse
      comfy/cms/snippet:
        identifier: Identifikator
        label: Navn
        content: Innhold
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Fant ikke nettside
        layout_not_found: Fant ikke layout
        page_not_found: Fant ikke side

    admin:
      cms:
        base:
          site_not_found: Fant ikke nettside
          seeds_enabled: CMS Fixtures er aktivert. Alle endringer som er er utført vil bli fjernet.
          sites: Nettsider
          layouts: Layouter
          pages: Sider
          snippets: Snutter
          files: Filer

        sites:
          created: Nettside opprettet
          creation_failure: Klarte ikke å opprette ny nettside
          updated: Nettside oppdatert
          update_failure: Klarte ikke å endre nettside
          deleted: Nettside fjernet
          not_found: Fant ikke nettside

          index:
            title: Nettsider
            new_link: Opprett ny nettside
            select: Velg nettside
            edit: Endre
            delete: Fjern
            are_you_sure: Er du sikker på at du vil fjerne denne nettsiden?
          new:
            title: Ny nettside
          edit:
            title: Endrer nettside
          form:
            create: Opprett nettside
            cancel: Cancel
            update: Oppdater nettside

        layouts:
          created: Layout opprettet
          creation_failure: Klarte ikke å opprette ny layout
          updated: Layout oppdatert
          update_failure: Klarte ikke å endre layout
          deleted: Layout fjernet
          not_found: Fant ikke layout

          index:
            title: Layouter
            new_link: Opprett ny layout
          index_branch:
            add_child_layout: Legg til underlayout
            edit: Endre
            delete: Fjern
            are_you_sure: Er du sikker?
          new:
            title: Ny layout
          edit:
            title: Endrer layout
          form:
            select_parent_layout: Velg hovedlayout
            select_app_layout: Velg applikasjonslayout
            create: Opprett layout
            cancel: Cancel
            update: Endre layout

        pages:
          created: Side opprettet
          creation_failure: Klarte ikke å opprette side
          updated: Side oppdatert
          update_failure: Klarte ikke å endre side
          deleted: Side fjernet
          not_found: Fant ikke side
          layout_not_found: Ingen layouter eksisterer. Vennligst opprett en.

          index:
            title: Sider
            new_link: Opprett ny side
          index_branch:
            toggle: Toggle
            add_child_page: Legg til underside
            edit: Endre
            delete: Fjern
            are_you_sure: Er du sikker?
          new:
            title: Ny side
          edit:
            title: Endrer side
          form:
            select_target_page: Ingen videresending
            preview: Forhåndsvisning
            create: Opprett side
            cancel: Cancel
            update: Endre side
            choose_link: Velg side...

        fragments:
          form_fragments:
            no_tags: |-
              layout har ingen innholdsknagger definert.<br/>
              Endre innholdet til å inkludere innhold- eller feltknagg. For eksempel: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snutt opprettet
          creation_failure: Klarte ikke å opprette snutt
          updated: Snutt oppdatert
          update_failure: Klarte ikke å oppdatere snutt
          deleted: Snutt fjernet
          not_found: Fant ikke snutt

          index:
            title: Snutter
            new_link: Opprett ny snutt
            edit: Endre
            delete: Fjerne
            are_you_sure: Er du sikker?
          new:
            title: Ny snutt
          edit:
            title: Endrer snutt
          form:
            create: Oprett snutt
            cancel: Cancel
            update: Endre snutt

        revisions:
          reverted: Innhold tilbakeført
          record_not_found: Fant ikke revisjon
          not_found: Revisjon ikke funnet

          show:
            title: Revisjon for
            revision: Revisjon
            update: Oppdatert til denne revisjonen
            cancel: Cancel
            content: Innhold
            changes: Endringer
            previous: Forrige
            current: Nåværende
          sidebar:
            revision:
              zero: Ingen revisjoner
              one: '%{count} revisjon'
              few: '%{count} revisjoner'
              many: '%{count} revisjoner'
              other: '%{count} revisjoner'

        files:
          created: Opplastede filer
          creation_failure: Klarte ikke å laste opp filer
          updated: Fil oppdatert
          update_failure: Klarte ikke å endre fil
          deleted: Fil fjernet
          not_found: File not found

          index:
            title: Filer
            new_link: Last opp ny fil
            button: Last opp filer
          new:
            title: Ny fil
          edit:
            title: Endrer fil
          form:
            current_file: Nåværende fil
            create: Last opp fil
            cancel: Cancel
            update: Endre fil
            delete: Fjerne
            are_you_sure: Er du sikker?
          page_form:
            are_you_sure: Er du sikker?
          file:
            edit: Endre
            delete: Fjerne
            are_you_sure: Er du sikker?

        categories:
          index:
            edit: Endre
            done: Ferdig
            all: Alle Kategorier
            add: Legg til
            add_placeholder: Legg til kategori
          show:
            are_you_sure: Er du sikker?
          edit:
            save: Lagre
          form:
            label: Kategorier
</file>

<file path="config/locales/nl.yml">
nl:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Lay-out
      comfy/cms/page: Pagina
      comfy/cms/snippet: Snippet
      comfy/cms/file: Bestand
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifier
        label: Label
        hostname: Hostname
        path: Pad
        locale: Taal
      comfy/cms/layout:
        identifier: Identifier
        label: Lay-out Naam
        app_layout: App Lay-out
        parent_id: Ouder Lay-out
        content: Inhoud
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Label
        layout_id: Lay-out
        slug: Slug
        full_path: Full path
        parent_id: Ouder
        target_page_id: Omleiding naar Pagina
        content: Inhoud
        is_published: Gepubliceerd
      comfy/cms/file:
        label: Label
        file: Bestand
        description: Omschrijving
      comfy/cms/snippet:
        identifier: Identifier
        label: Label
        content: Inhoud
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Site niet gevonden
        layout_not_found: Lay-out niet gevonden
        page_not_found: Pagina niet gevonden

    admin:
      cms:
        base:
          site_not_found: Site niet gevonden
          seeds_enabled: CMS Fixtures zijn ingeschakeld. Alle veranderingen die hier gedaan zijn worden weggegooid.
          sites: Sites
          layouts: Lay-outs
          pages: Pagina's
          snippets: Snippets
          files: Bestanden

        sites:
          created: Site aangemaakt
          creation_failure: Site aanmaken mislukt
          updated: Site bijgewerkt
          update_failure: Site bijwerken mislukt
          deleted: Site verwijderd
          not_found: Site niet gevonden

          index:
            title: Sites
            new_link: Maak Nieuwe Site Aan
            select: Selecteer Site
            edit: Bewerk
            delete: Verwijder
            are_you_sure: Weet u zeker dat u deze site wilt verwijderen?
          new:
            title: Nieuwe Site
          edit:
            title: Site Bewerken
          form:
            create: Site Aanmaken
            cancel: Annuleren
            update: Site Bijwerken

        layouts:
          created: Lay-out aangemaakt
          creation_failure: Lay-out aanmaken mislukt
          updated: Lay-out bijgewerkt
          update_failure: Lay-out bijwerken mislukt
          deleted: Lay-out verwijderd
          not_found: Lay-out niet gevonden

          index:
            title: Lay-outs
            new_link: Maak Nieuwe Lay-out Aan
          index_branch:
            add_child_layout: Voeg Kind Lay-out Toe
            edit: Bewerk
            delete: Verwijder
            are_you_sure: Weet u het zeker?
          new:
            title: Nieuwe Lay-out
          edit:
            title: Lay-out Bewerken
          form:
            select_parent_layout: Selecteer Ouder Lay-out
            select_app_layout: Selecteer Applicatie Lay-out
            create: Lay-out Aanmaken
            cancel: Annuleren
            update: Lay-out Bijwerken

        pages:
          created: Pagina aangemaakt
          creation_failure: Pagina aanmaken mislukt
          updated: Pagina bijgewerkt
          update_failure: Pagina bijwerken mislukt
          deleted: Pagina verwijderd
          not_found: Pagina niet gevonden
          layout_not_found: Geen Lay-outs gevonden. Maak er a.u.b. een aan.

          index:
            title: Pagina's
            new_link: Maak Nieuwe Pagina Aan
          index_branch:
            toggle: Toggle
            add_child_page: Voeg Kind Pagina Toe
            edit: Bewerk
            delete: Verwijder
            are_you_sure: Weet u het zeker?
          new:
            title: Nieuwe Pagina
          edit:
            title: Pagina Bewerken
          form:
            select_target_page: Geen Omleiding
            preview: Preview
            create: Pagina Aanmaken
            cancel: Annuleren
            update: Pagina Bijwerken
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Lay-out heeft geen inhoud-tags gedefinieerd.<br/>
              Bewerk de inhoud van de lay-out om een inhoud-tag toe te voegen. Bijvoorbeeld: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snippet aangemaakt
          creation_failure: Snippet aangemaakt mislukt
          updated: Snippet bijgewerkt
          update_failure: Snippet bijwerken mislukt
          deleted: Snippet verwijderd
          not_found: Snippet niet gevonden

          index:
            title: Snippets
            new_link: Maak Nieuw Snippet Aan
            edit: Bewerk
            delete: Verwijder
            are_you_sure: Weet u het zeker?
          new:
            title: Nieuw Snippet
          edit:
            title: Snippet Bewerken
          form:
            create: Snippet Aanmaken
            cancel: Annuleren
            update: Snippet Bijwerken

        revisions:
          reverted: Content teruggezet
          record_not_found: Record niet gevonden
          not_found: Revisie niet gevonden

          show:
            title: Revisies van
            revision: Revisie
            update: Zet terug naar deze Revisie
            cancel: Annuleren
            content: Content
            changes: Changes
            previous: Previous
            current: Huidig
          sidebar:
            revision:
              zero: '%{count} Revisies'
              one: '%{count} Revisie'
              few: '%{count} Revisies'
              many: '%{count} Revisies'
              other: '%{count} Revisies'

        files:
          created: Bestanden geüpload
          creation_failure: Bestanden uploaden mislukt
          updated: Bestand bijgewerkt
          update_failure: Bestand bijwerken mislukt
          deleted: Bestand verwijderd
          not_found: Bestand niet gevonden

          index:
            title: Bestanden
            new_link: Upload Nieuw Bestand
            button: Upload Bestanden
          new:
            title: Nieuw Bestand
          edit:
            title: Bestand Bewerken
          form:
            current_file: Huidig Bestand
            create: Upload Bestand
            cancel: Annuleren
            update: Update Bestand
            delete: Verwijder
            are_you_sure: Weet u het zeker?
          page_form:
            are_you_sure: Weet u het zeker?
          file:
            edit: Bewerk
            delete: Verwijder
            are_you_sure: Weet u het zeker?

        categories:
          index:
            edit: Bewerk
            done: Klaar
            all: Alle Categorieën
            add: Toevoegen
            add_placeholder: Categorie Toevoegen
          show:
            are_you_sure: Weet u het zeker?
          edit:
            save: Opslaan
          form:
            label: Categorieën
</file>

<file path="config/locales/pt-BR.yml">
pt-BR:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Leiaute
      comfy/cms/page: Página
      comfy/cms/snippet: Fragmento
      comfy/cms/file: Arquivo
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identificador
        label: Nome
        hostname: Nome do Host
        path: Caminho
        locale: Idioma
      comfy/cms/layout:
        identifier: Identificador
        label: Nome do Leiaute
        app_layout: Leiaute da Aplicação
        parent_id: Leiaute Pai
        content: Conteúdo
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Título
        layout_id: Leiaute
        slug: Identificador
        full_path: Full path
        parent_id: Pai
        target_page_id: Redirecionar para a Página
        content: Conteúdo
        is_published: Publicada
      comfy/cms/file:
        label: Nome
        file: Arquivo
        description: Descrição
      comfy/cms/snippet:
        identifier: Identificador
        label: Nome
        content: Conteúdo
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Site Não Encontrado
        layout_not_found: Leiaute Não Encontrado
        page_not_found: Página Não Encontrada

    admin:
      cms:
        base:
          site_not_found: Site não encontrado
          seeds_enabled: Os Fixtures do CMS estão ativados. Todas as mudanças feitas aqui serão descartadas.
          sites: Sites
          layouts: Leiautes
          pages: Páginas
          snippets: Fragmentos
          files: Arquivos

        sites:
          created: Site criado com sucesso.
          creation_failure: Não foi possível criar site.
          updated: Site atualizado com sucesso.
          update_failure: Não foi possível atualizar site.
          deleted: Site excluído com sucesso.
          not_found: Site não encontrado.

          index:
            title: Sites
            new_link: Criar Novo Site
            select: Selecionar Site
            edit: Editar
            delete: Excluir
            are_you_sure: Tem certeza que deseja excluir este site?
          new:
            title: Novo Site
          edit:
            title: Editando Site
          form:
            create: Criar Site
            cancel: Cancelar
            update: Atualizar Site

        layouts:
          created: Leiaute criado com sucesso.
          creation_failure: Não foi possível criar leiaute.
          updated: Leiaute atualizado com sucesso.
          update_failure: Não foi possível atualizar leiaute.
          deleted: Leiaute excluído com sucesso.
          not_found: Leiaute não encontrado.

          index:
            title: Leiautes
            new_link: Criar Novo Leiaute
          index_branch:
            add_child_layout: Adicionar Leiaute Filho
            edit: Editar
            delete: Excluir
            are_you_sure: Tem certeza?
          new:
            title: Novo Leiaute
          edit:
            title: Editando Leiaute
          form:
            select_parent_layout: Selecione o Leiaute Pai
            select_app_layout: Selecione o Leiaute da Aplicação
            create: Criar Leiaute
            cancel: Cancelar
            update: Atualizar Leiaute

        pages:
          created: Página criada com sucesso.
          creation_failure: Não foi possível criar página.
          updated: Página atualizada com sucesso.
          update_failure: Não foi possível atualizar página.
          deleted: Página excluída com sucesso.
          not_found: Página não encontrada.
          layout_not_found: "Nenhum leiaute foi encontrado. Por favor, crie um."

          index:
            title: Páginas
            new_link: Criar Nova Página
          index_branch:
            toggle: Alterar
            add_child_page: Adicionar Página Filha
            edit: Editar
            delete: Excluir
            are_you_sure: Tem certeza?
          new:
            title: Nova Página
          edit:
            title: Editando Página
          form:
            select_target_page: Não Redirecionar
            preview: Pré-visualização
            create: Criar Página
            cancel: Cancelar
            update: Atualizar Página
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              O leiaute não possui tags de conteúdo definidas.<br/>
              Edite o conteúdo e inclua uma tag de página ou de campo. Por exemplo: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Fragmento criado com sucesso.
          creation_failure: Não foi possível criar fragmento.
          updated: Fragmento atualizado com sucesso.
          update_failure: Não foi possível atualizar fragmento.
          deleted: Fragmento excluído com sucesso.
          not_found: Fragmento não encontrado.

          index:
            title: Fragmentos
            new_link: Criar Novo Fragmento
            edit: Editar
            delete: Excluir
            are_you_sure: Tem certeza?
          new:
            title: Novo Fragmento
          edit:
            title: Editando Fragmento
          form:
            create: Criar Fragmento
            cancel: Cancelar
            update: Atualizar Fragmento

        revisions:
          reverted: Conteúdo revertido com sucesso.
          record_not_found: Registro não encontrado.
          not_found: Revisão não encontrada.

          show:
            title: Revisões de
            revision: Revisão
            update: Atualizar para esta revisão
            cancel: Cancelar
            content: Content
            changes: Changes
            previous: Previous
            current: Atual
          sidebar:
            revision:
              zero: '%{count} Revisão'
              one: '%{count} Revisão'
              few: '%{count} Revisões'
              many: '%{count} Revisões'
              other: '%{count} Revisões'

        files:
          created: Arquivo enviado com sucesso.
          creation_failure: Não foi possível enviar arquivo.
          updated: Arquivo atualizado com sucesso.
          update_failure: Não foi possível atualizar arquivo.
          deleted: Arquivo excluído com sucesso.
          not_found: Arquivo não encontrado.

          index:
            title: Arquivos
            new_link: Enviar Novo Arquivo
            button: Enviar Arquivos
          new:
            title: Novo Arquivo
          edit:
            title: Editando Arquivo
          form:
            current_file: Arquivo Atual
            create: Enviar Arquivo
            cancel: Cancelar
            update: Atualizar Arquivo
            delete: Excluir
            are_you_sure: Tem certeza?
          page_form:
            are_you_sure: Tem certeza?
          file:
            edit: Editar
            delete: Excluir
            are_you_sure: Tem certeza?

        categories:
          index:
            edit: Editar
            done: Pronto
            all: Todas Categorias
            add: Adicionar
            add_placeholder: Adicione uma Categoria
          show:
            are_you_sure: Tem certeza?
          edit:
            save: Salvar
          form:
            label: Categorias
</file>

<file path="config/locales/ru.yml">
ru:
  activerecord:
    models:
      comfy/cms/site: Сайт
      comfy/cms/layout: Шаблон
      comfy/cms/page: Страница
      comfy/cms/snippet: Сниппет
      comfy/cms/file: Файл
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Идентификатор
        label: Название
        hostname: Имя хоста
        path: Путь
        locale: Язык
      comfy/cms/layout:
        identifier: Идентификатор
        label: Название шаблона
        app_layout: Шаблон приложения
        parent_id: Родительский шаблон
        content: Контент
        css: CSS
        js: Javascript
      comfy/cms/page:
        label: Название
        layout_id: Шаблон
        parent_id: Родительская страница
        full_path: Полный путь
        slug: Ссылка
        target_page_id: Редирект на страницу
        content: Контент
        is_published: Опубликована
      comfy/cms/file:
        label: Название
        file: Файл
        description: Описание
      comfy/cms/snippet:
        identifier: Идентификатор
        label: Название
        content: Контент
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Сайт не найден
        layout_not_found: Шаблон не найден
        page_not_found: Страница не найдена

    admin:
      cms:
        base:
          site_not_found: Сайт не найден
          seeds_enabled: CMS Fixtures включены. Все изменения, сделанные здесь, будут отменены.
          sites: Сайты
          layouts: Шаблоны
          pages: Страницы
          snippets: Сниппеты
          files: Файлы

        sites:
          created: Сайт создан
          creation_failure: Не удалось создать сайт
          updated: Сайт обновлен
          update_failure: Не удалось обновить сайт
          deleted: Сайт удален
          not_found: Сайт не найден

          index:
            title: Сайты
            new_link: Создать новый сайт
            select: Выбрать сайт
            edit: Редактировать
            delete: Удалить
            are_you_sure: Вы уверены, что хотите удалить этот сайт?
          new:
            title: Новый сайт
          edit:
            title: Редактирование сайта
          form:
            create: Создать сайт
            cancel: Oтменить
            update: Обновить сайт

        layouts:
          created: Шаблон создан
          creation_failure: Не удалось создать шаблон
          updated: Шаблон обновлен
          update_failure: Не удалось обновить шаблон
          deleted: Шаблон удален
          not_found: Шаблон не найден

          index:
            title: Шаблоны
            new_link: Создать новый шаблон
          index_branch:
            add_child_layout: Добавить дочерний шаблон
            edit: Редактировать
            delete: Удалить
            are_you_sure: Вы уверены?
          new:
            title: Новый шаблон
          edit:
            title: Редактирование шаблона
          form:
            select_parent_layout: Выбрать родительский шаблон
            select_app_layout: Выбрать шаблон приложения
            create: Создать шаблон
            cancel: Oтменить
            update: Обновить шаблон

        pages:
          created: Страница создана
          creation_failure: Не удалось создать страницу
          updated: Страница обновлена
          update_failure: Не удалось обновить страницу
          deleted: Страница удалена
          not_found: Страница не найдена
          layout_not_found: Шаблоны не найдены. Пожалуйста, создайте хотя бы один шаблон.

          index:
            title: Страницы
            new_link: Создать новую страницу
          index_branch:
            toggle: Toggle
            add_child_page: Добавить дочернюю страницу
            edit: Редактировать
            delete: Удалить
            are_you_sure: Вы уверены?
          new:
            title: Новая страница
          edit:
            title: Редактирование страницы
          form:
            select_target_page: Без редиректа
            preview: Предпросмотр
            create: Создать страницу
            cancel: Oтменить
            update: Обновить страницу
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Шаблон не содержит ни одного контент-тега.<br/>
              Отредактируйте контент, вставив тег страницы или поля. Например: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Сниппет создан
          creation_failure: Не удалось создать сниппет
          updated: Сниппет обновлен
          update_failure: Не удалось обновить сниппет
          deleted: Сниппет удален
          not_found: Сниппет не найден

          index:
            title: Сниппеты
            new_link: Создать новый сниппет
            edit: Редактировать
            delete: Удалить
            are_you_sure: Вы уверены?
          new:
            title: Новый сниппет
          edit:
            title: Редактирование сниппета
          form:
            create: Создать сниппет
            cancel: Oтменить
            update: Обновить сниппет

        revisions:
          reverted: Контент возвращен в прежнее состояние
          record_not_found: Запись не найдена
          not_found: Ревизия не найдена

          show:
            title: Ревизии для
            revision: Ревизия
            update: Обновить до этой ревизии
            cancel: Oтменить
            content: Content
            changes: Changes
            previous: Previous
            current: Текущая
          sidebar:
            revision:
              zero: 'Нет Ревизий'
              one: '%{count} Ревизия'
              few: '%{count} Ревизии'
              many: '%{count} Ревизий'
              other: '%{count} Ревизии'

        files:
          created: Файлы загружены
          creation_failure: Не удалось загрузить файлы
          updated: Файл обновлен
          update_failure: Не удалось обновить файл
          deleted: Файл удален
          not_found: Файл не найден

          index:
            title: Файлы
            new_link: Загрузить новый файл
            button: Загрузить файлы
          new:
            title: Новый файл
          edit:
            title: Редактирование файла
          form:
            current_file: Текущий файл
            create: Загрузить файл
            cancel: Oтменить
            update: Обновить файл
            delete: Удалить
            are_you_sure: Вы уверены?
          page_form:
            are_you_sure: Вы уверены?
          file:
            edit: Редактировать
            delete: Удалить
            are_you_sure: Вы уверены?

        categories:
          index:
            edit: Редактировать
            done: Применить
            all: Все Категории
            add: Добавить
            add_placeholder: добавить категорию
          show:
            are_you_sure: Вы уверены?
          edit:
            save: Сохранить
          form:
            label: Категории
</file>

<file path="config/locales/sk.yml">
sk:
  activerecord:
    models:
      comfy/cms/site: Web
      comfy/cms/layout: Rozloženie
      comfy/cms/page: Stránka
      comfy/cms/snippet: Fragment
      comfy/cms/file: Súbor
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifikátor
        label: Popis
        hostname: Doména
        path: Cesta
        locale: Jazyk
      comfy/cms/layout:
        identifier: Identifikátor
        label: Názov rozloženia
        app_layout: Rozloženie aplikácie
        parent_id: Nadradené rozloženie
        content: Obsah
        css: Štýl
        js: Javascript
      comfy/cms/page:
        label: Popis
        layout_id: Rozloženie
        slug: Strojový názov
        full_path: Plná cesta
        parent_id: Nadradené
        target_page_id: Presmerovať na stránku
        content: Obsah
        is_published: Zverejnené
      comfy/cms/file:
        label: Popis
        file: Súbor
        description: Popis
      comfy/cms/snippet:
        identifier: Identifikátor
        label: Popis
        content: Obsah
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Web nenájdený
        layout_not_found: Rozloženie nenájdené
        page_not_found: Stránka nenájdená

    admin:
      cms:
        base:
          site_not_found: Web nenájdený
          seeds_enabled: Sú povolené CMS Fixtures. Všetky tu vykonané zmeny budú stratené.
          sites: Weby
          layouts: Rozloženia
          pages: Stránky
          snippets: Fragmenty
          files: Súbory

        sites:
          created: Web vytvorený
          creation_failure: Nepodarilo sa vytvoriť web
          updated: Web upravený
          update_failure: Nepodarilo sa upraviť web
          deleted: Web odstránený
          not_found: Web nenájdený

          index:
            title: Weby
            new_link: Vytvoriť web
            select: Zvoľte web
            edit: Upraviť
            delete: Zmazať
            are_you_sure: Ste si istí, že chcete odstrániť tento web?
          new:
            title: Nový web
          edit:
            title: Úprava webu
          form:
            create: Vytvoriť web
            cancel: Zrušiť
            update: Upraviť web

        layouts:
          created: Rozloženie vytvorené
          creation_failure: Nepodarilo sa vytvoriť rozloženie
          updated: Rozloženie upravené
          update_failure: Nepodarilo sa upraviť rozloženie
          deleted: Rozloženie odstránené
          not_found: Rozloženie nenájdené

          index:
            title: Rozloženia
            new_link: Vytvoriť nové rozloženie
          index_branch:
            add_child_layout: Pridať podriadené rozloženie
            edit: Upraviť
            delete: Zmazať
            are_you_sure: Ste si istí?
          new:
            title: Nové rozloženie
          edit:
            title: Úprava rozloženia
          form:
            select_parent_layout: Zvoľte nadradené rozloženie
            select_app_layout: Zvoľte rozloženie aplikácie
            create: Vytvoriť rozloženie
            cancel: Zrušiť
            update: Upraviť rozloženie

        pages:
          created: Stránka vytvorená
          creation_failure: Nepodarilo sa vytvoriť stránku
          updated: Stránka upravená
          update_failure: Nepodarilo sa upraviť stránku
          deleted: Stránka odstránená
          not_found: Stránka nenájdená
          layout_not_found: "Neboli nájdené žiadne rozloženia, vytvorte prosím nejaké."

          index:
            title: Stránky
            new_link: Vytvoriť novú stránku
          index_branch:
            toggle: Prepnúť
            add_child_page: Pridať podstránku
            edit: Upraviť
            delete: Zmazať
            are_you_sure: Ste si istí?
          new:
            title: Nová stránka
          edit:
            title: Úprava stránky
          form:
            select_target_page: Bez presmerovania
            preview: Náhľad
            create: Vytvoriť stránku
            cancel: Zrušiť
            update: Upraviť stránku
            choose_link: Zvoľte stránku...

        fragments:
          form_fragments:
            no_tags: |-
              Rozloženie nemá definované žiadne značky obsahu.<br/>
              Upravte obsah tak, aby obsahoval značky stránok alebo polí. Napríklad: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Fragment vytvorený
          creation_failure: Nepodarilo sa vytvoriť fragment
          updated: Fragment upravený
          update_failure: Nepodarilo sa upraviť fragment
          deleted: Fragment odstránený
          not_found: Fragment nenájdený

          index:
            title: Fragmenty
            new_link: Vytvoriť fragment
            edit: Upraviť
            delete: Zmazať
            are_you_sure: Ste si istí?
          new:
            title: Nový fragment
          edit:
            title: Upraviť fragment
          form:
            create: Vytvoriť fragment
            cancel: Zrušiť
            update: Upraviť fragment

        revisions:
          reverted: Obsah bol obnovený
          record_not_found: Záznam nenájdený
          not_found: Revízia nenájdená

          show:
            title: Revízia pre
            revision: Revízia
            update: Použiť túto revíziu
            cancel: Zrušiť
            content: Obsah
            changes: Zmeny
            previous: Predchádzajúca
            current: Súčasná
          sidebar:
            revision:
              zero: Žiadne revízie
              one: '%{count} revízia'
              few: '%{count} revízie'
              many: '%{count} revízií'
              other: '%{count} revízií'

        files:
          created: Súbory nahrané
          creation_failure: Nepodarilo sa nahrať súbory
          updated: Súbor upravený
          update_failure: Nepodarilo sa upraviť súbor
          deleted: Súbor odstránený
          not_found: Súbor nenájdený

          index:
            title: Súbory
            new_link: Nahrať nový súbor
            button: Nahrať súbory
          new:
            title: Nový súbor
          edit:
            title: Upraviť súbor
          form:
            current_file: Aktuálny súbor
            create: Nahrať súbor
            cancel: Zrušiť
            update: Upraviť súbor
            delete: Zmazať
            are_you_sure: Ste si istí?
          page_form:
            are_you_sure: Ste si istí?
          file:
            edit: Upraviť
            delete: Zmazať
            are_you_sure: Ste si istí?

        categories:
          index:
            edit: Upraviť
            done: Hotovo
            all: Všetky Kategórie
            add: Pridať
            add_placeholder: Pridať kategóriu
          show:
            are_you_sure: Ste si istí?
          edit:
            save: Uložiť
          form:
            label: Kategórie
</file>

<file path="config/locales/sv.yml">
sv:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Layout
      comfy/cms/page: Sida
      comfy/cms/snippet: Snippet
      comfy/cms/file: Fil
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifierare
        label: Label
        hostname: Hostnamn
        path: Sökväg
        locale: Språk
      comfy/cms/layout:
        identifier: Identifierare
        label: Layout Namn
        app_layout: App Layout
        parent_id: Förälderlayout
        content: Innehåll
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Label
        layout_id: Layout
        slug: Slug
        full_path: Full path
        parent_id: Förälder
        target_page_id: Vidarebefodra till sida
        content: Innehåll
        is_published: Publicerad
      comfy/cms/file:
        label: Label
        file: Fil
        description: Beskrivninig
      comfy/cms/snippet:
        identifier: Identifierare
        label: Label
        content: Innehåll
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Kunde inte hitta site
        layout_not_found: Kunde inte hitta layout
        page_not_found: Kunde inte hitta sida

    admin:
      cms:
        base:
          site_not_found: Site kan inte hittas
          seeds_enabled: CMS Fixtures är aktiverade. Inga ändringar kommer att sparas.
          sites: Sites
          layouts: Layouter
          pages: Sidor
          snippets: Snippets
          files: Filer

        sites:
          created: Site skapad
          creation_failure: Kunde inte skapa site
          updated: Site uppdaterad
          update_failure: Uppdatering av site misslyckades
          deleted: Site borttagen
          not_found: Kunde inte hitta site

          index:
            title: Siter
            new_link: Skapa ny site
            select: Välj site
            edit: Ändra
            delete: Ta bort
            are_you_sure: Är du säker på att du vill ta bort den här siten?
          new:
            title: Ny site
          edit:
            title: Ändrar Site
          form:
            create: Skapa Site
            cancel: Avbryt
            update: Uppdatera Site

        layouts:
          created: Layout skapad
          creation_failure: Misslyckades att skapa site
          updated: Layout uppdaterad
          update_failure: Uppdatering av layout misslyckades
          deleted: Layout borttagen
          not_found: Layout kunde inte hittas

          index:
            title: Layouter
            new_link: Skapa ny layout
          index_branch:
            add_child_layout: Lägg till underlayout
            edit: Ändra
            delete: Ta bort
            are_you_sure: Är du säker?
          new:
            title: Ny layout
          edit:
            title: Ändra layout
          form:
            select_parent_layout: Välj överordnad layout
            select_app_layout: Väl Applikationslayout
            create: Skapa Layout
            cancel: Avbryt
            update: Uppdatera Layout

        pages:
          created: Sida skapad
          creation_failure: Misslyckades att skapa sida
          updated: Sida uppdaterad
          update_failure: Uppdateringen av sidan misslyckades
          deleted: Sidan borttagen
          not_found: Sida kunde inte hittas
          layout_not_found: Kunde inte hitta layout. Vänligen skapa en.

          index:
            title: Sidor
            new_link: Skapa ny sida
          index_branch:
            toggle: Välj
            add_child_page: Lägg till undersida
            edit: Ändra
            delete: Ta bort
            are_you_sure: Är du säker?
          new:
            title: Ny sida
          edit:
            title: Ändra sida
          form:
            select_target_page: Ingen vidarebefodring
            preview: Förhandsgranska
            create: Skapa sida
            cancel: Avbryt
            update: Uppdatera sida
            choose_link: Välj sida...

        fragments:
          form_fragments:
            no_tags: |-
              Layout har inga innehållstaggar definierade.<br/>
              Ändra innehållet så att det innehåller en sid eller fält tagg. Exempelvis: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snippet skapad
          creation_failure: Misslyckades att skapa snippet
          updated: Snippet uppdaterad
          update_failure: Uppdateringen av snippet misslyckades
          deleted: Snippet borttagen
          not_found: Snippet kunde inte hittas

          index:
            title: Snippets
            new_link: Skapa Ny Snippet
            edit: Ändra
            delete: Ta bort
            are_you_sure: Är du säker?
          new:
            title: Ny Snippet
          edit:
            title: Ändra Snippet
          form:
            create: Skapa Snippet
            cancel: Avbryt
            update: Uppdatera Snippet

        revisions:
          reverted: Innehåll återställt
          record_not_found: Kunde inte hitta data för återställning
          not_found: Återställningspunkt inte hittad

          show:
            title: Revisioner för
            revision: Revision
            update: Ändra till denna revisionen
            cancel: Avbryt
            content: Content
            changes: Changes
            previous: Previous
            current: Nuvarande
          sidebar:
            revision:
              zero: No Revisions
              one: '%{count} Revision'
              few: '%{count} Revisions'
              many: '%{count} Revisions'
              other: '%{count} Revisions'

        files:
          created: Filer uppladdade
          creation_failure: Kunde inte skapa fil
          updated: Fil uppdaterad
          update_failure: Kunde inte uppdatera fil
          deleted: Fil borttagen
          not_found: Kunde inte hitta fil

          index:
            title: Filer
            new_link: Ladda upp en ny fil
            button: Ladda upp filer
          new:
            title: Ny Fil
          edit:
            title: Ändrar Fil
          form:
            current_file: Nuvarande Fil
            create: Ladda upp fil
            cancel: Avbryt
            update: Uppdatera fil
            delete: Delete
            are_you_sure: Är du säker?
          page_form:
            are_you_sure: Är du säker?
          file:
            edit: Ända
            delete: Delete
            are_you_sure: Är du säker?

        categories:
          index:
            edit: Ändra
            done: Klar
            all: Alla Kategorier
            add: Lägg till
            add_placeholder: Lägga Kategori
          show:
            are_you_sure: Är du säker?
          edit:
            save: Spara
          form:
            label: Kategorier
</file>

<file path="config/locales/tr.yml">
tr:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Şablon
      comfy/cms/page: Sayfa
      comfy/cms/snippet: Pasaj
      comfy/cms/file: Dosya
      comfy/cms/translation: Çeviri

    attributes:
      comfy/cms/site:
        identifier: Tanımlayıcı
        label: Etiket
        hostname: Sunucu Adı
        path: Yol
        locale: Dil
      comfy/cms/layout:
        identifier: Tanımlayıcı
        label: Şablon Adı
        app_layout: Uygulama Şablonu
        parent_id: Üst Şablon
        content: İçerik
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Etiket
        layout_id: Şablon
        slug: Slug
        full_path: Tam Yol
        parent_id: Üst
        target_page_id: Sayfaya Yönlendir
        content: İçerik
        is_published: Yayında mı?
      comfy/cms/file:
        label: Etiket
        file: Dosya
        description: Açıklama
      comfy/cms/snippet:
        label: Etiket
        identifier: Tanımlayıcı
        content: İçerik
      comfy/cms/translation:
        locale: Dil
        label: Etiket
        layout_id: Şablon
        is_published: Yayında mı?

  comfy:
    cms:
      content:
        site_not_found: Site Bulunamadı
        layout_not_found: Şablon Bulunamadı
        page_not_found: Sayfa Bulunamadı

    admin:
      cms:
        base:
          site_not_found: Site Bulunamadı
          seeds_enabled: CMS Fixtures etkinleştirildi. Burada yapılan değişiklikler kullanılmayacak.
          sites: Siteler
          layouts: Şablonlar
          pages: Sayfalar
          snippets: Pasajlar
          files: Dosyalar

        sites:
          created: Site oluşturuldu
          creation_failure: Site oluşturulamadı
          updated: Site güncellendi
          update_failure: Site güncellenemedi
          deleted: Site silindi
          not_found: Site bulunamadı

          index:
            title: Siteler
            new_link: Yeni Site Oluştur
            select: Site Seç
            edit: Düzenle
            delete: Sil
            are_you_sure: Bu siteyi silmek istediğinizden emin misiniz?
          new:
            title: Yeni Site
          edit:
            title: Siteyi Düzenle
          form:
            create: Siteyi Oluştur
            cancel: İptal
            update: Siteyi Güncelle

        layouts:
          created: Şablon oluşturuldu
          creation_failure: Şablon oluşturulamadı
          updated: Şablon güncellendi
          update_failure: Şablon güncellenemedi
          deleted: Şablon silindi
          not_found: Şablon bulunamadı

          index:
            title: Şablonlar
            new_link: Yeni Şablon Oluştur
          index_branch:
            add_child_layout: Alt Şablon Oluştur
            edit: Düzenle
            delete: Sil
            are_you_sure: Emin misin?
          new:
            title: Yeni Şablon
          edit:
            title: Şablon Düzenleniyor
          form:
            select_parent_layout: Üst Şablon Seç
            select_app_layout: Uygulama Şablonu Seç
            create: Şablon Oluştur
            cancel: İptal
            update: Şablonu Güncelle

        pages:
          created: Sayfa oluşturuldu
          creation_failure: Sayfa oluşturulamadı
          updated: Sayfa güncellendi
          update_failure: Sayfa güncellenemedi
          deleted: Sayfa silindi
          not_found: Sayfa bulunamadı
          layout_not_found: Şablon bulunamadı. Lütfen oluşturun.

          index:
            title: Sayfalar
            new_link: Yeni Sayfa Oluştur
          index_branch:
            toggle: Toggle
            add_child_page: Alt Sayfa Oluştur
            edit: Düzenle
            delete: Sil
            are_you_sure: Emin misin?
          new:
            title: Yeni Sayfa
          edit:
            title: Sayfa Düzenleniyor
          form:
            select_target_page: Yönlendirme Yok
            preview: Önizle
            create: Sayfa Oluştur
            cancel: İptal
            update: Sayfayı Güncelle
            choose_link: Sayfa Seç...

        fragments:
          form_fragments:
            no_tags: |-
              Şablon etiket içermiyor.<br/>
              Lütfen bir etiket ekleyin. Örnek: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Çeviri oluşturuldu
          creation_failure: Çeviri oluşturulamadı
          updated: Çeviri güncellendi
          update_failure: Çeviri güncellenemedi
          deleted: Çeviri silindi
          not_found: Çeviri bulunamadı

          new:
            title: Yeni Çeviri
          edit:
            title: Çeviri Düzenleniyor
          form:
            preview: Önizleme
            create: Oluştur
            update: Güncelle
            cancel: Sayfaya Geri Dön
          sidebar:
            new: Yeni Çeviri
            confirm: Emin Misin?

        snippets:
          created: Pasaj oluşturuldu
          creation_failure: Pasaj oluşturulamadı
          updated: Pasaj güncellendi
          update_failure: Pasaj güncellenemedi
          deleted: Pasaj silindi
          not_found: Pasaj bulunamadı

          index:
            title: Pasajlar
            new_link: Yeni Pasaj Oluştur
            edit: Düzenle
            delete: Sil
            are_you_sure: Emin misin?
          new:
            title: Yeni Pasaj
          edit:
            title: Pasaj Düzenleniyor
          form:
            create: Pasaj Oluştur
            cancel: İptal
            update: Pasajı Güncelle

        revisions:
          reverted: İçerik Geri Alındı
          record_not_found: Kayıt bulunamadı
          not_found: Revizyon bulunamadı

          show:
            title: Revizeler
            revision: Revizyon
            update: Bu revizyona Güncelle
            cancel: İptal
            content: İçerik
            changes: Değişiklikler
            previous: Önceki
            current: Şimdiki
          sidebar:
            revision:
              zero: Revize Yok
              one: '%{count} Revizyon'
              few: '%{count} Revizyon'
              many: '%{count} Revizyon'
              other: '%{count} Revizyon'

        files:
          created: Dosyalar yüklendi
          creation_failure: Dosyalar yüklenemedi
          updated: Dosya güncellendi
          update_failure: Dosya güncellenemedi
          deleted: Dosya silindi
          not_found: Dosya bulunamadı

          index:
            title: Dosyalar
            new_link: Yeni Dosya Yükle
            button: Dosyaları Yükle
          new:
            title: Yeni Dosya
          edit:
            title: Dosyayı Düzenle
          form:
            current_file: Şimdiki Dosya
            create: Dosya Yükle
            cancel: İptal
            update: Dosyayı Güncelle
            delete: Dosyayı Sil
            are_you_sure: Emin misin?
          page_form:
            are_you_sure: Emin misin?
          file:
            edit: Düzenle
            delete: Sil
            are_you_sure: Emin misin?

        categories:
          index:
            edit: Düzenle
            done: Tamam
            all: Hepsi Kategoriler
            add: Ekle
            add_placeholder: Kategori Ekle
          show:
            are_you_sure: Emin misin?
          edit:
            save: Kaydet
          form:
            label: Kategoriler
</file>

<file path="config/locales/uk.yml">
uk:
  activerecord:
    models:
      comfy/cms/site: Сайт
      comfy/cms/layout: Шаблон
      comfy/cms/page: Сторінка
      comfy/cms/snippet: Сніппет
      comfy/cms/file: Файл
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Ідентифікатор
        label: Назва
        hostname: Ім'я хоста
        path: Шлях
        locale: Мова
      comfy/cms/layout:
        identifier: Ідентифікатор
        label: Назва шаблону
        app_layout: Шаблон додатку
        parent_id: Батьківскький шаблон
        content: Зміст
        css: CSS
        js: Javascript
      comfy/cms/page:
        label: Назва
        layout_id: Шаблон
        slug: Посилання
        full_path: Повний Шлях
        parent_id: Parent
        target_page_id: Редірект на сторінку
        content: Зміст
        is_published: Опублікована
      comfy/cms/file:
        label: Назва
        file: Файл
        description: Опис
      comfy/cms/snippet:
        identifier: Ідентифікатор
        label: Назва
        content: Зміст
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Сайт не знайдено
        layout_not_found: Шаблон не знайдено
        page_not_found: Сторінку не знайдено

    admin:
      cms:
        base:
          site_not_found: Сайт не знайдено
          seeds_enabled: CMS Fixtures ввімкнені. Всі зміни, зроблені тут, будуть скасовані.
          sites: Сайти
          layouts: Шаблони
          pages: Сторінки
          snippets: Сніппети
          files: Файли

        sites:
          created: Сайт створено
          creation_failure: Не вийшло створити сайт
          updated: Сайт оновлено
          update_failure: Не вдалося оновити сайт
          deleted: Сайт видалено
          not_found: Сайт не знайдено

          index:
            title: Сайти
            new_link: Створити новий сайт
            select: Обрати сайт
            edit: Редагувати
            delete: Видалити
            are_you_sure: Ви впевнені що хочете видалити цей сайт?
          new:
            title: Новий сайт
          edit:
            title: Редагувати сайт
          form:
            create: Створити сайт
            cancel: Cкасувати
            update: Оновити сайт

        layouts:
          created: Шаблон створено
          creation_failure: Не вдалося створити шаблон
          updated: Шаблон оновлено
          update_failure: Не вдалося оновити шаблон
          deleted: Шаблон видалено
          not_found: Шаблон не знайдено

          index:
            title: Шаблони
            new_link: Створити новий шаблон
          index_branch:
            add_child_layout: Додати дочірній шаблон
            edit: Редагувати
            delete: Видалити
            are_you_sure: Ви впевнені?
          new:
            title: Новий шаблон
          edit:
            title: Редагувати шаблон
          form:
            select_parent_layout: Вибрати батьківский шаблон
            select_app_layout: Вибрати шаблон додатку
            create: Створити шаблон
            cancel: Cкасувати
            update: Оновити шаблон

        pages:
          created: Сторінка створена
          creation_failure: Не вийшло створити сторінку
          updated: Сторінку оновлено
          update_failure: Не вийшло оновити сторінку
          deleted: Сторінка видалена
          not_found: Сторінку не знайдено
          layout_not_found: Жодного шаблону не знайдено

          index:
            title: Сторінки
            new_link: Створити нову сторінку
          index_branch:
            toggle: Перемикач
            add_child_page: Додати дочірню сторінку
            edit: Редагувати
            delete: Видалити
            are_you_sure: Ви впевнені?
          new:
            title: Нова сторінка
          edit:
            title: Редагування сторінки
          form:
            select_target_page: Без редіректу
            preview: Передперегляд
            create: Створити сторінку
            cancel: Cкасувати
            update: Оновити сторінку
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Шаблон не містить жодного контент-тега. <br/>
              Відредагуйте контент, вставивши тег сторінки або поля. Наприклад: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Сніппет створено
          creation_failure: Не вдалося створити сніппет
          updated: Сніппет оновлено
          update_failure: Не вдалося оновити сніппет
          deleted: Сніппет видалено
          not_found: Сніппет не знайдено

          index:
            title: Сніппети
            new_link: Створити новий сніппет
            edit: Редагувати
            delete: Видалити
            are_you_sure: Ви впевнені?
          new:
            title: Новий сніппет
          edit:
            title: Редагувати сніппет
          form:
            create: Створити сніппет
            cancel: Cкасувати
            update: Оновити сніппет

        revisions:
          reverted: Контент повернутий до попереднього стану
          record_not_found: Запису не знайдено
          not_found: Ревізії не знайдено

          show:
            title: Ревізія для
            revision: Ревізія
            update: Оновити до цієї ревізії
            cancel: Cкасувати
            content: Зміст
            changes: Зміни
            previous: Попередній
            current: Поточний
          sidebar:
            revision:
              zero: Нeмa Ревізій
              one: '%{count} Ревізія'
              few: '%{count} Ревізій'
              many: '%{count} Ревізій'
              other: '%{count} Ревізій'

        files:
          created: Файли завантажені
          creation_failure: Не вдалося завантажити файли
          updated: Файл оновлено
          update_failure: Не вдалося оновити файл
          deleted: Файл видалено
          not_found: Файл не знайдено

          index:
            title: Файли
            new_link: Завантажити новий файл
            button: Завантажити файли
          new:
            title: Новий файл
          edit:
            title: Редагувати файл
          form:
            current_file: Поочний файл
            create: Оновити файл
            cancel: Cкасувати
            update: Оновити файл
            delete: Видалити
            are_you_sure: Ви впевнені?
          page_form:
            are_you_sure: Ви впевнені?
          file:
            edit: Редагувати
            delete: Видалити
            are_you_sure: Ви впевнені?

        categories:
          index:
            edit: Редагувати
            done: Зроблено
            all: Всі Категорії
            add: Додати
            add_placeholder: Додати Категорію
          show:
            are_you_sure: Ви впевнені?
          edit:
            save: Save
          form:
            label: Зберегти
</file>

<file path="config/locales/zh-CN.yml">
zh-CN:
  activerecord:
    models:
      comfy/cms/site: 站点
      comfy/cms/layout: 布局
      comfy/cms/page: 页面
      comfy/cms/snippet: 片段
      comfy/cms/file: 文件
      comfy/cms/translation: 翻译

    attributes:
      comfy/cms/site:
        identifier: 标识符
        label: 标签
        hostname: 主机名
        path: 路径
        locale: 语言
      comfy/cms/layout:
        identifier: 标识符
        label: 布局名称
        app_layout: 应用布局
        parent_id: 上级布局
        content: 内容
        css: 样式
        js: Javascript
      comfy/cms/page:
        label: 页面名称
        layout_id: 布局
        slug: 缩略路径
        full_path: 完整路径
        parent_id: 上级
        target_page_id: 跳转至
        content: 内容
        is_published: 发布
      comfy/cms/file:
        label: 标签
        file: 文件
        description: 描述
      comfy/cms/snippet:
        identifier: 标识符
        label: 标签
        content: 内容
      comfy/cms/translation:
        locale: 语言
        label: 标签
        layout_id: 布局
        is_published: 发布

  comfy:
    cms:
      content:
        site_not_found: 站点不存在
        layout_not_found: 布局不存在
        page_not_found: 页面不存在

    admin:
      cms:
        base:
          site_not_found: 没有该站点
          seeds_enabled: CMS样板已经启用，在此处的所有修改将被忽略。
          sites: 站点
          layouts: 布局
          pages: 页面
          snippets: 片段
          files: 文件

        sites:
          created: 站点创建成功
          creation_failure: 站点创建失败
          updated: 站点更新成功
          update_failure: 站点更新失败
          deleted: 站点删除成功
          not_found: 站点不存在

          index:
            title: 站点
            new_link: 创建站点
            select: 选择站点
            edit: 编辑
            delete: 删除
            are_you_sure: 确定删除该站点吗？
          new:
            title: 新站点
          edit:
            title: 编辑站点
          form:
            create: 创建站点
            cancel: 取消
            update: 更新站点

        layouts:
          created: 布局创建成功
          creation_failure: 布局创建失败
          updated: 布局更新成功
          update_failure: 布局更新失败
          deleted: 布局删除成功
          not_found: 布局不存在

          index:
            title: 布局
            new_link: 创建新布局
          index_branch:
            add_child_layout: 创建子布局
            edit: 编辑
            delete: 删除
            are_you_sure: 确定删除该布局吗？
          new:
            title: 新布局
          edit:
            title: 编辑布局
          form:
            select_parent_layout: 选择上级布局
            select_app_layout: 选择应用布局
            create: 创建布局
            cancel: 取消
            update: 更新布局

        pages:
          created: 页面创建成功
          creation_failure: 页面创建失败
          updated: 页面更新成功
          update_failure: 页面更新失败
          deleted: 页面删除成功
          not_found: 页面不存在
          layout_not_found: 没有布局，请先创建一个布局。

          index:
            title: 页面
            new_link: 创建新页面
          index_branch:
            toggle: 切换
            add_child_page: 创建子页面
            edit: 编辑
            delete: 删除
            are_you_sure: 确定删除该页面吗？
          new:
            title: 新页面
          edit:
            title: 编辑页面
          form:
            select_target_page: 没有跳转
            preview: 预览
            create: 创建页面
            cancel: 取消
            update: 更新页面
            choose_link: 选择页面...

        fragments:
          form_fragments:
            no_tags: |-
              布局中没有定义内容标签。<br/>
              编辑内容使其包含一个页面或者field标签。例如： <code>{{cms:wysiwyg content}}</code>

        translations:
          created: 翻译创建成功
          creation_failure: 翻译创建失败
          updated: 翻译更新成功
          update_failure: 翻译更新失败
          deleted: 翻译删除成功
          not_found: 翻译不存在

          new:
            title: 新翻译
          edit:
            title: 编辑翻译
          form:
            preview: 预览
            create: 创建
            update: 更新
            cancel: 取消
          sidebar:
            new: 新翻译
            confirm: 确定刪除该翻译吗?

        snippets:
          created: 片段创建成功
          creation_failure: 片段创建失败
          updated: 片段更新成功
          update_failure: 片段更新失败
          deleted: 片段删除成功
          not_found: 片段不存在

          index:
            title: 片段
            new_link: 创建新片段
            edit: 编辑
            delete: 删除
            are_you_sure: 确定删除该片段吗？
          new:
            title: 新片段
          edit:
            title: 编辑片段
          form:
            create: 创建片段
            cancel: 取消
            update: 更新片段

        revisions:
          reverted: 内容恢复成功
          record_not_found: 记录不存在
          not_found: 修订版本不存在

          show:
            title: 修订版本属于
            revision: 修订版本
            update: 更新到该修订版本
            cancel: 取消
            content: 内容
            changes: 更改
            previous: 先前
            current: 当前
          sidebar:
            revision:
              zero: '%{count} 修订版本'
              one: '%{count} 修订版本'
              few: '%{count} 修订版本'
              many: '%{count} 修订版本'
              other: '%{count} 修订版本'

        files:
          created: 文件上传成功
          creation_failure: 文件上传失败
          updated: 文件更新成功
          update_failure: 文件更新失败
          deleted: 文件删除成功
          not_found: 文件不存在

          index:
            title: 文件
            new_link: 上传新文件
            button: 上传文件
          new:
            title: 新文件
          edit:
            title: 编辑文件
          form:
            current_file: 当前文件
            create: 上传文件
            cancel: 取消
            update: 更新文件
            delete: 删除
            are_you_sure: 确定删除该文件吗？
          page_form:
            are_you_sure: 确定删除该文件吗？
          file:
            edit: 编辑
            delete: 删除
            are_you_sure: 确定删除该文件吗？

        categories:
          index:
            edit: 编辑
            done: 完成
            all: 全部 分类
            add: 创建
            add_placeholder: 添加类别
          show:
            are_you_sure: 确定删除该分类吗？
          edit:
            save: 保存
          form:
            label: 分类
</file>

<file path="config/locales/zh-TW.yml">
zh-TW:
  activerecord:
    models:
      comfy/cms/site: 站點
      comfy/cms/layout: 佈局
      comfy/cms/page: 頁面
      comfy/cms/snippet: 片段
      comfy/cms/file: 文件
      comfy/cms/translation: 翻譯

    attributes:
      comfy/cms/site:
        identifier: 標識符
        label: 標籤
        hostname: 主機名
        path: 路徑
        locale: 語言
      comfy/cms/layout:
        identifier: 標識符
        label: 佈局名稱
        app_layout: 應用佈局
        parent_id: 上級佈局
        content: 內容
        css: 樣式
        js: Javascript
      comfy/cms/page:
        label: 頁面名稱
        layout_id: 佈局
        slug: 路徑名
        full_path: 完整路徑
        parent_id: 上級
        target_page_id: 跳轉至
        content: 內容
        is_published: 發佈
      comfy/cms/file:
        label: 標籤
        file: 文件
        description: 描述
      comfy/cms/snippet:
        identifier: 標識符
        label: 標籤
        content: 內容
      comfy/cms/translation:
        locale: 語言
        label: 標籤
        layout_id: 佈局
        is_published: 發佈

  comfy:
    cms:
      content:
        site_not_found: 站點不存在
        layout_not_found: 佈局不存在
        page_not_found: 頁面不存在

    admin:
      cms:
        base:
          site_not_found: 沒有該站點
          seeds_enabled: CMS樣板已經啟用，在此處的所有修改將被忽略。
          sites: 站點
          layouts: 佈局
          pages: 頁面
          snippets: 片段
          files: 文件

        sites:
          created: 站點創建成功
          creation_failure: 站點創建失敗
          updated: 站點更新成功
          update_failure: 站點更新失敗
          deleted: 站點刪除成功
          not_found: 站點不存在

          index:
            title: 站點
            new_link: 創建站點
            select: 選擇站點
            edit: 編輯
            delete: 刪除
            are_you_sure: 確定刪除該站點嗎？
          new:
            title: 新站點
          edit:
            title: 編輯站點
          form:
            create: 創建站點
            cancel: 取消
            update: 更新站點

        layouts:
          created: 佈局創建成功
          creation_failure: 佈局創建失敗
          updated: 佈局更新成功
          update_failure: 佈局更新失敗
          deleted: 佈局刪除成功
          not_found: 佈局不存在

          index:
            title: 佈局
            new_link: 創建新佈局
          index_branch:
            add_child_layout: 創建子佈局
            edit: 編輯
            delete: 刪除
            are_you_sure: 確定刪除該佈局嗎？
          new:
            title: 新佈局
          edit:
            title: 編輯佈局
          form:
            select_parent_layout: 選擇上級佈局
            select_app_layout: 選擇應用佈局
            create: 創建佈局
            cancel: 取消
            update: 更新佈局

        pages:
          created: 頁面創建成功
          creation_failure: 頁面創建失敗
          updated: 頁面更新成功
          update_failure: 頁面更新失敗
          deleted: 頁面刪除成功
          not_found: 頁面不存在
          layout_not_found: 沒有佈局，請先創建一個佈局。

          index:
            title: 頁面
            new_link: 創建新頁面
          index_branch:
            toggle: 切換
            add_child_page: 創建子頁面
            edit: 編輯
            delete: 刪除
            are_you_sure: 確定刪除該頁面嗎？
          new:
            title: 新頁面
          edit:
            title: 編輯頁面
          form:
            select_target_page: 沒有跳轉
            preview: 預覽
            create: 創建頁面
            cancel: 取消
            update: 更新頁面
            choose_link: 選擇頁面...

        fragments:
          form_fragments:
            no_tags: |-
              佈局中沒有定義內容標記。<br/>
              編輯內容使其包含一個頁面或者欄位標記。例如： <code>{{cms:wysiwyg content}}</code>

        translations:
          created: 翻譯創建成功
          creation_failure: 翻譯創建失敗
          updated: 翻譯更新成功
          update_failure: 翻譯更新失敗
          deleted: 翻譯刪除成功
          not_found: 翻譯不存在

          new:
            title: 新翻譯
          edit:
            title: 編輯翻譯
          form:
            preview: 預覽
            create: 創建
            update: 更新
            cancel: 取消
          sidebar:
            new: 新翻譯
            confirm: 確定刪除該翻譯嗎?

        snippets:
          created: 片段創建成功
          creation_failure: 片段創建失敗
          updated: 片段更新成功
          update_failure: 片段更新失敗
          deleted: 片段刪除成功
          not_found: 片段不存在

          index:
            title: 片段
            new_link: 創建新片段
            edit: 編輯
            delete: 刪除
            are_you_sure: 確定刪除該片段嗎？
          new:
            title: 新片段
          edit:
            title: 編輯片段
          form:
            create: 創建片段
            cancel: 取消
            update: 更新片段

        revisions:
          reverted: 內容恢復成功
          record_not_found: 記錄不存在
          not_found: 修訂版本不存在

          show:
            title: 修訂版本屬於
            revision: 修訂版本
            update: 更新到該修訂版本
            cancel: 取消
            content: 內容
            changes: 變更
            previous: 先前
            current: 現在
          sidebar:
            revision:
              zero: '%{count} 修訂版本'
              one: '%{count} 修訂版本'
              few: '%{count} 修訂版本'
              many: '%{count} 修訂版本'
              other: '%{count} 修訂版本'

        files:
          created: 文件上傳成功
          creation_failure: 文件上傳失敗
          updated: 文件更新成功
          update_failure: 文件更新失敗
          deleted: 文件刪除成功
          not_found: 文件不存在

          index:
            title: 文件
            new_link: 上傳新文件
            button: 上傳文件
          new:
            title: 新文件
          edit:
            title: 編輯文件
          form:
            current_file: 當前文件
            create: 上傳文件
            cancel: 取消
            update: 更新文件
            delete: 刪除
            are_you_sure: 確定刪除該文件嗎？
          page_form:
            are_you_sure: 確定刪除該文件嗎？
          file:
            edit: 編輯
            delete: 刪除
            are_you_sure: 確定刪除該文件嗎？

        categories:
          index:
            edit: 編輯
            done: 完成
            all: 全部 分類
            add: 創建
            add_placeholder: 添加類別
          show:
            are_you_sure: 確定刪除該分類嗎？
          edit:
            save: 保存
          form:
            label: 分類
</file>

<file path="config/boot.rb">
# frozen_string_literal: true

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)

require 'bundler/setup' # Set up gems listed in the Gemfile.
</file>

<file path="config/cable.yml">
development:
  adapter: async

test:
  adapter: test

production:
  adapter: redis
  url: <%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %>
  channel_prefix: occams_production
</file>

<file path="config/cms_routes.rb">
# frozen_string_literal: true

# We can't have this in config/routes.rb as they will get pulled in into parent
# application automatically. We want user to manually place them.
ComfortableMediaSurfer::Application.routes.draw do
  comfy_route :cms_admin
  comfy_route :cms
end
</file>

<file path="config/database.yml">
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 10000

test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 10000

# default: &default
#   adapter: mysql2
#   encoding: utf8mb4
#   pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
#   username: root
#   password:
#   socket: /tmp/mysql.sock
#
# development:
#   <<: *default
#   database: comfy_dev
#
# test:
#   <<: *default
#   database: comfy_test

# default: &default
#   adapter: postgresql
#   encoding: unicode
#   pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
#
# development:
#   <<: *default
#   database: comfy_dev
#
# test:
#   <<: *default
#   database: comfy_test
</file>

<file path="config/environment.rb">
# frozen_string_literal: true

# Load the Rails application.
require_relative 'application'

# Initialize the rails application
ComfortableMediaSurfer::Application.initialize!
</file>

<file path="config/puma.rb">
# frozen_string_literal: true

# This configuration file will be evaluated by Puma. The top-level methods that
# are invoked here are part of Puma's configuration DSL. For more information
# about methods provided by the DSL, see https://puma.io/puma/Puma/DSL.html.
#
# Puma starts a configurable number of processes (workers) and each process
# serves each request in a thread from an internal thread pool.
#
# You can control the number of workers using ENV["WEB_CONCURRENCY"]. You
# should only set this value when you want to run 2 or more workers. The
# default is already 1.
#
# The ideal number of threads per worker depends both on how much time the
# application spends waiting for IO operations and on how much you wish to
# prioritize throughput over latency.
#
# As a rule of thumb, increasing the number of threads will increase how much
# traffic a given process can handle (throughput), but due to CRuby's
# Global VM Lock (GVL) it has diminishing returns and will degrade the
# response time (latency) of the application.
#
# The default is set to 3 threads as it's deemed a decent compromise between
# throughput and latency for the average Rails application.
#
# Any libraries that use a connection pool or another resource pool should
# be configured to provide at least as many connections as the number of
# threads. This includes Active Record's `pool` parameter in `database.yml`.
threads_count = ENV.fetch('RAILS_MAX_THREADS', 3)
threads threads_count, threads_count

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
port ENV.fetch('PORT', 3000)

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart

# Run the Solid Queue supervisor inside of Puma for single-server deployments
plugin :solid_queue if ENV['SOLID_QUEUE_IN_PUMA']

# Specify the PID file. Defaults to tmp/pids/server.pid in development.
# In other environments, only set the PID file if requested.
pidfile ENV['PIDFILE'] if ENV['PIDFILE']
</file>

<file path="db/migrate/00_create_active_storage_tables.active_storage.rb">
class CreateActiveStorageTables < ActiveRecord::Migration[6.0]
  def change
    create_table :active_storage_blobs do |t|
      t.string   :key,        null: false
      t.string   :filename,   null: false
      t.string   :content_type
      t.string   :service_name, null: false
      t.text     :metadata
      t.bigint   :byte_size,  null: false
      t.string   :checksum,   null: true
      t.datetime :created_at, null: false

      t.index [ :key ], unique: true
    end

    if configured_service = ActiveStorage::Blob.service.name
      ActiveStorage::Blob.unscoped.update_all(service_name: configured_service)
    end

    create_table :active_storage_attachments do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false
      t.references :blob,     null: false

      t.datetime :created_at, null: false

      t.index [ :record_type, :record_id, :name, :blob_id ], name: "index_active_storage_attachments_uniqueness", unique: true
    end

    create_table :active_storage_variant_records, id: primary_key_type, if_not_exists: true do |t|
      t.belongs_to :blob, null: false, index: false, type: blobs_primary_key_type
      t.string :variation_digest, null: false

      t.index %i[ blob_id variation_digest ], name: "index_active_storage_variant_records_uniqueness", unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private
    def primary_key_type
      config = Rails.configuration.generators
      config.options[config.orm][:primary_key_type] || :primary_key
    end

    def blobs_primary_key_type
      pkey_name = connection.primary_key(:active_storage_blobs)
      pkey_column = connection.columns(:active_storage_blobs).find { |c| c.name == pkey_name }
      pkey_column.bigint? ? :bigint : pkey_column.type
    end
end
</file>

<file path="db/migrate/01_create_cms.rb">
class CreateCms < ActiveRecord::Migration[5.2]

  LIMIT = 16777215

  def change

    # -- Sites -----------------------------------------------------------------
    create_table :comfy_cms_sites, force: true do |t|
      t.string :label,        null: false
      t.string :identifier,   null: false
      t.string :hostname,     null: false
      t.string :path
      t.string :locale,       null: false, default: "en"
      t.timestamps

      t.index :hostname
    end

    # -- Layouts ---------------------------------------------------------------
    create_table :comfy_cms_layouts, force: true do |t|
      t.integer :site_id,     null: false
      t.integer :parent_id
      t.string  :app_layout
      t.string  :label,       null: false
      t.string  :identifier,  null: false
      t.text    :content,     limit: LIMIT
      t.text    :css,         limit: LIMIT
      t.text    :js,          limit: LIMIT
      t.integer :position,    null: false, default: 0
      t.timestamps

      t.index [:parent_id, :position]
      t.index [:site_id, :identifier], unique: true
    end

    # -- Pages -----------------------------------------------------------------
    create_table :comfy_cms_pages, force: true do |t|
      t.integer :site_id,         null: false
      t.integer :layout_id
      t.integer :parent_id
      t.integer :target_page_id
      t.string  :label,           null: false
      t.string  :slug
      t.string  :full_path,       null: false
      t.text    :content_cache,   limit: LIMIT
      t.integer :position,        null: false, default: 0
      t.integer :children_count,  null: false, default: 0
      t.boolean :is_published,    null: false, default: true
      t.timestamps

      t.index [:site_id, :full_path]
      t.index [:parent_id, :position]
      t.index [:is_published]
    end

    # -- Translations ----------------------------------------------------------
    create_table :comfy_cms_translations, force: true do |t|
      t.string  :locale,    null: false
      t.integer :page_id,   null: false
      t.integer :layout_id
      t.string  :label,           null: false
      t.text    :content_cache,   limit: LIMIT
      t.boolean :is_published,    null: false, default: true
      t.timestamps

      t.index [:page_id]
      t.index [:locale]
      t.index [:is_published]
    end

    # -- Fragments -------------------------------------------------------------
    create_table :comfy_cms_fragments, force: true do |t|
      t.references  :record,      polymorphic: true
      t.string      :identifier,  null: false
      t.string      :tag,         null: false, default: "text"
      t.text        :content,     limit: LIMIT
      t.boolean     :boolean,     null: false, default: false
      t.datetime    :datetime
      t.timestamps

      t.index [:identifier]
      t.index [:datetime]
      t.index [:boolean]
    end

    # -- Snippets --------------------------------------------------------------
    create_table :comfy_cms_snippets, force: true do |t|
      t.integer :site_id,     null: false
      t.string  :label,       null: false
      t.string  :identifier,  null: false
      t.boolean :markdown
      t.text    :content,     limit: LIMIT
      t.integer :position,    null: false, default: 0
      t.timestamps

      t.index [:site_id, :identifier], unique: true
      t.index [:site_id, :position]
    end

    # -- Files -----------------------------------------------------------------
    create_table :comfy_cms_files, force: true do |t|
      t.integer :site_id,     null: false
      t.string  :label,       null: false, default: ""
      t.text    :description, limit: 2048
      t.integer :position,    null: false, default: 0
      t.timestamps

      t.index [:site_id, :position]
    end

    # -- Revisions -------------------------------------------------------------
    create_table :comfy_cms_revisions, force: true do |t|
      t.string    :record_type, null: false
      t.integer   :record_id,   null: false
      t.text      :data,        limit: LIMIT
      t.datetime  :created_at

      t.index [:record_type, :record_id, :created_at],
      name: "index_cms_revisions_on_rtype_and_rid_and_created_at"
    end

    # -- Categories ------------------------------------------------------------
    create_table :comfy_cms_categories, force: true do |t|
      t.integer :site_id,          null: false
      t.string  :label,            null: false
      t.string  :categorized_type, null: false

      t.index [:site_id, :categorized_type, :label],
      unique: true,
      name:   "index_cms_categories_on_site_id_and_cat_type_and_label"
    end

    create_table :comfy_cms_categorizations, force: true do |t|
      t.integer :category_id,       null: false
      t.string  :categorized_type,  null: false
      t.integer :categorized_id,    null: false

      t.index [:category_id, :categorized_type, :categorized_id],
      unique: true,
      name:   "index_cms_categorizations_on_cat_id_and_catd_type_and_catd_id"
    end
  end
end
</file>

<file path="gemfiles/8.0.gemfile">
# frozen_string_literal: true

source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

gemspec path: '../'

gem 'rails', '~> 8.0.1'

group :development, :test do
  gem 'autoprefixer-rails', '~> 10.4.16.0'
  gem 'byebug',             '~> 11.1.0', platforms: %i[mri mingw x64_mingw]
  gem 'image_processing',   '>= 1.12.0'
  gem 'propshaft',          '~> 1.1.0'
  gem 'sqlite3',            '>= 2.1'
end

group :test do
  gem 'brakeman',                 '~> 6.1.2'
  gem 'bundler-audit',            '~> 0.9.1'
  gem 'coveralls_reborn',         '~> 0.28.0', require: false
  gem 'cuprite',                  '>= 0.15'
  gem 'equivalent-xml',           '~> 0.6.0'
  gem 'minitest',                 '>= 5.23.0'
  gem 'minitest-reporters',       '>= 1.6.1'
  gem 'mocha',                    '>= 2.3.0', require: false
  gem 'rails-controller-testing', '~> 1.0.5'
  gem 'rubocop',                  '~> 1.63.0', require: false
  gem 'rubocop-minitest'
  gem 'rubocop-rails'
  gem 'simplecov', '~> 0.22.0', require: false
end
</file>

<file path="lib/comfortable_media_surfer/access_control/admin_authentication.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::AccessControl
  module AdminAuthentication
    # Set username and password in config/initializers/comfortable_media_surfer.rb
    # Like this:
    #   ComfortableMediaSurfer::AccessControl::AdminAuthentication.username = 'myname'
    #   ComfortableMediaSurfer::AccessControl::AdminAuthentication.password = 'mypassword'

    mattr_accessor  :username,
                    :password

    # Simple http_auth. When implementing some other form of authentication
    # this method should return +true+ if everything is great, or redirect user
    # to some other page, thus denying access to cms admin section.
    def authenticate
      authenticate_or_request_with_http_basic do |username, password|
        self.username == username && self.password == password
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/access_control/admin_authorization.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::AccessControl
  module AdminAuthorization
    # By default there's no authorization of any kind
    def authorize
      true
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/access_control/public_authentication.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::AccessControl
  module PublicAuthentication
    # By defaut all published pages are accessible
    def authenticate
      true
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/access_control/public_authorization.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::AccessControl
  module PublicAuthorization
    # By default there's no authorization of any kind
    def authorize
      true
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/tags/asset.rb">
# frozen_string_literal: true

# This tag allows for linking of js and css content defined on the layout.
# Looks something like this:
#   {{cms:asset layout_identifier, type: css, as: tag}}
#
# `type` - css | js - what we're outputting here
# `as`   - url (default) | tag - output url or wrap it in the appropriate tag
#
class ComfortableMediaSurfer::Content::Tags::Asset < ComfortableMediaSurfer::Content::Tag
  attr_reader :identifier, :type, :as

  def initialize(context:, params: [], source: nil)
    super

    options = params.extract_options!
    @identifier = params[0]
    @type       = options['type']
    @as         = options['as'] || 'url'

    return if @identifier.present?

    raise Error, 'Missing layout identifier for asset tag'
  end

  def layout
    @layout ||= context.site.layouts.find_by(identifier: @identifier)
  end

  def content
    return '' unless layout

    base = ComfortableMediaSurfer.config.public_cms_path || ''
    unless base.ends_with?('/')
      base += '/'
    end

    case @type
    when 'css'
      out = "#{base}cms-css/#{context.site.id}/#{@identifier}/#{layout.cache_buster}.css"
      if @as == 'tag'
        out = "<link href='#{out}' media='screen' rel='stylesheet' type='text/css' />"
      end
      out
    when 'js'
      out = "#{base}cms-js/#{context.site.id}/#{@identifier}/#{layout.cache_buster}.js"
      if @as == 'tag'
        out = "<script src='#{out}' type='text/javascript'></script>"
      end
      out
    end
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :asset, ComfortableMediaSurfer::Content::Tags::Asset
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/audio.rb">
# frozen_string_literal: true

# Tag for injecting HTML5 audio player. Example tag:
#   {{ cms:audio "path/to/audio", style: "height: 22px; width: 80%" }}
# This expands into:
#   <audio controls src="path/to/audio"></audio>
# To customize your player style, add a 'audioplayer' class to your CSS, e.g
# .audioplayer {
#   border-radius: 6px;
#   height: 22px;
#   width: 60%;
#   margin: 2px 0 2px 8px;
#   padding: 0;
# }
# and/or pass in style overrides with the 'style' parameter, as above

class ComfortableMediaSurfer::Content::Tags::Audio < ComfortableMediaSurfer::Content::Tag
  attr_reader :path, :style, :locals

  def initialize(context:, params: [], source: nil)
    super
    @locals = params.extract_options!
    @path   = params[0]
    @style = ''
    @style = "<style>.audioplayer {#{@locals['style']}}</style>" if @locals['style']

    return if @path.present?

    raise Error, 'Missing path for audio tag'
  end

  def content
    format("#{@style}<audio controls class=\"audioplayer\" src=#{@path}></audio>")
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :audio, ComfortableMediaSurfer::Content::Tags::Audio
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/breadcrumbs.rb">
# frozen_string_literal: true

# Nav Tag for rendering breadcrumb links to current page
#   {{ cms:breadcrumbs }}
#   {{ cms:breadcrumbs style: "font-weight: bold" }}
# To customize your breadcrumbs style, add a 'breadcrumbs' id to your CSS, e.g
# #breadcrumbs {
#   color: #006633;
#   font-family: Verdana, Arial, Helvetica, sans-serif;
#   font-size: 105%;
#   font-weight: bold;
#   margin-top: 12px;
#   margin-bottom: 4px;
#   font-style: italic;
# }
# and/or pass in style overrides with the 'style' parameter, as above

class ComfortableMediaSurfer::Content::Tags::Breadcrumbs < ComfortableMediaSurfer::Content::Tag
  attr_reader :links, :style, :locals

  def initialize(context:, params: [], source: nil)
    super
    @locals = params.extract_options!
    @style = ''
    @style = "<style>#breadcrumbs {#{@locals['style']}}</style>" if @locals['style']

    @links = '<div id="breadcrumbs">'
    context.ancestors.reverse.each do |a|
      next if Rails.env == 'production' && !a.is_published

      @links += "<a href=#{a.url(relative: true)}>#{a.label}</a> &raquo; "
    end
    @links += "#{context.label}</div>"
  end

  def content
    format("#{@style}#{@links}")
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :breadcrumbs, ComfortableMediaSurfer::Content::Tags::Breadcrumbs
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/checkbox.rb">
# frozen_string_literal: true

# Tag for boolean content that is going to be rendered using checkbox
#   {{ cms:checkbox identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Checkbox < ComfortableMediaSurfer::Content::Tags::Fragment
  def content
    fragment.boolean
  end

  def form_field(object_name, view, index)
    name = "#{object_name}[fragments_attributes][#{index}][boolean]"

    input = view.content_tag(:div, class: 'form-check mt-2') do
      view.concat view.hidden_field_tag(name, '0', id: nil)

      options = { id: form_field_id, class: 'form-check-input position-static' }
      view.concat view.check_box_tag(name, '1', content.present?, options)
    end

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :checkbox, ComfortableMediaSurfer::Content::Tags::Checkbox
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/children.rb">
# frozen_string_literal: true

# Nav Tag for unordered list of links to the children of the current page
#   {{ cms:children }}
#   {{ cms:children style: "font-weight: bold", exclude: "404-page, search-page" }}
# To customize your children style, add a 'children' id to your CSS, e.g
# #children {
#   color: #006633;
#   font-size: 90%;
#   margin-bottom: 4px;
#   font-style: italic;
# }
# and/or pass in style overrides with the 'style' parameter, as above
#
# To exclude children, list their slugs with the 'exclude' parameter
# as comma-delimited string, e.g. as above - exclude: "404-page, search-page"

class ComfortableMediaSurfer::Content::Tags::Children < ComfortableMediaSurfer::Content::Tag
  attr_reader :style, :page_children, :locals
  attr_accessor :list

  def initialize(context:, params: [], source: nil)
    super
    @locals = params.extract_options!
    @style  = ''
    @style  = "<style>#children {#{@locals['style']}}</style>\n" if @locals['style']
    @exclude = []
    @exclude = @locals['exclude'].split(',') if @locals['exclude']
    @list = ''
    # ActiveRecord_Associations_CollectionProxy
    @page_children = context.children.order(:position).to_ary
    unless Rails.env == 'development'
      @page_children.delete_if { |child| !child.is_published }
    end
    @page_children.delete_if { |child| @exclude.include? child.slug }
  end

  def content
    if @page_children.any?
      @list = "<ul id=\"children\">\n"
      @page_children.each do |c|
        @list += "  <li><a href=#{c.url(relative: true)}>#{c.label}</a></li>\n"
      end
      @list += '</ul>'
    end
    format("#{@style}#{@list}")
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :children, ComfortableMediaSurfer::Content::Tags::Children
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/date.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using text input with date widget
#   {{ cms:date identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Date < ComfortableMediaSurfer::Content::Tags::Datetime
  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][datetime]"
    options = { id: form_field_id, class: 'form-control', data: { 'cms-date' => true } }
    value   = content.present? ? content.to_s(:db) : ''
    input   = view.send(:text_field_tag, name, value, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :date, ComfortableMediaSurfer::Content::Tags::Date
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/datetime.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using text input with datetime widget
#   {{ cms:datetime identifier, strftime: "at %I:%M%p" }}
#
# `strftime` - Format datetime string during rendering
#
class ComfortableMediaSurfer::Content::Tags::Datetime < ComfortableMediaSurfer::Content::Tags::Fragment
  attr_reader :strftime

  def initialize(context:, params: [], source: nil)
    super
    @strftime = options['strftime']
  end

  def content
    fragment.datetime
  end

  def render
    return '' unless renderable

    if strftime.present?
      content.strftime(strftime)
    else
      content.to_s
    end
  end

  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][datetime]"
    options = { id: form_field_id, class: 'form-control', data: { 'cms-datetime' => true } }
    value   = content.present? ? content.to_s(:db) : ''
    input   = view.send(:text_field_tag, name, value, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :datetime, ComfortableMediaSurfer::Content::Tags::Datetime
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/file_link.rb">
# frozen_string_literal: true

require_relative 'mixins/file_content'

# This is how you link previously uploaded file to anywhere. Good example may be
# a header image you want to use on the layout level.
#   {{cms:file_link id, as: image}}
#
# `as`      - url (default) | link | image - how file gets rendered out
# `class`   - any html classes that you want on the result link or image tag. For example "class1 class2"
#
# - variant_attrs are not functional, perhaps due to some change in ImageMagick
# - Simply use a class in your CSS / SASS to style your image display
# `label`   - attach label attribute to link or image tag
# `resize`  - imagemagick option. For example: "100x50>"
# `gravity` - imagemagick option. For example: "center"
# `crop`    - imagemagick option. For example: "100x50+0+0"
#
class ComfortableMediaSurfer::Content::Tags::FileLink < ComfortableMediaSurfer::Content::Tag
  include ComfortableMediaSurfer::Content::Tags::Mixins::FileContent

  attr_reader :identifier, :as, :variant_attrs

  def initialize(context:, params: [], source: nil)
    super

    options = params.extract_options!
    @identifier     = params[0]
    @as             = options['as'] || 'url'
    @class          = options['class']
    @variant_attrs  = options.slice('resize', 'gravity', 'crop') # broken for ImageMagick

    return if @identifier.present?

    raise Error, 'Missing identifier for file link tag'
  end

  # @return [Comfy::Cms::File]
  def file_record
    @file_record ||= context.site.files.detect { |f| f.id == identifier.to_i }
  end

  # @return [ActiveStorage::Blob]
  def file
    file_record&.attachment
  end

  # @return [String]
  def label
    return '' if file_record.nil?

    file_record.label.presence || file.filename.to_s
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :file_link, ComfortableMediaSurfer::Content::Tags::FileLink
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/file.rb">
# frozen_string_literal: true

require_relative 'mixins/file_content'

# File tag allows attaching of file to the page. This controls how files are
# uploaded and then displayed on the page. Example tag:
#   {{ cms:file identifier, as: link, label: "My File" }}
#
# `as`      - url (default) | link | image - render out link or image tag
# `label`   - attach label attribute to link or image tag
# `resize`  - imagemagic option. For example: "100x50>"
# `gravity` - imagemagic option. For example: "center"
# `crop`    - imagemagic option. For example: "100x50+0+0"
# `class`   - any html classes that you want on the result link or image tag. For example "class1 class2"
#
class ComfortableMediaSurfer::Content::Tags::File < ComfortableMediaSurfer::Content::Tags::Fragment
  include ComfortableMediaSurfer::Content::Tags::Mixins::FileContent

  # @type ["url", "link", "image"]
  attr_reader :as

  # @type [{String => String}]
  attr_reader :variant_attrs

  # @param (see ComfortableMediaSurfer::Content::Tag#initialize)
  def initialize(context:, params: [], source: nil)
    super
    @as             = options['as'] || 'url'
    @label          = options['label']
    @class          = options['class']
    @variant_attrs  = options.slice('resize', 'gravity', 'crop')
  end

  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][files]"
    input   = view.send(:file_field_tag, name, id: form_field_id, class: 'form-control')

    attachments_partial =
      if fragment.attachments
        view.render(
          partial: 'comfy/admin/cms/fragments/form_fragment_attachments',
          locals: {
            object_name: object_name,
            index: index,
            attachments: fragment.attachments,
            fragment_id: identifier,
            multiple: false
          }
        )
      end

    yield view.safe_join([input, attachments_partial], '')
  end

protected

  # @return [ActiveStorage::Blob]
  def file
    fragment.attachments.first
  end

  # @return [String]
  def label
    @label || file&.filename
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :file, ComfortableMediaSurfer::Content::Tags::File
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/files.rb">
# frozen_string_literal: true

# Same tag as File, only it handles multiple attachments.
# Generally not a bad idea to handle rendering of this in a partial/helper.
# Example tag:
#   {{ cms:files identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Files < ComfortableMediaSurfer::Content::Tags::File
  def content
    return '' if fragment.attachments.blank?

    fragment.attachments.collect do |attachment|
      super(file: attachment, label: attachment.filename)
    end.join(' ')
  end

  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][files][]"
    input   = view.send(:file_field_tag, name, id: form_field_id, multiple: true, class: 'form-control')

    attachments_partial =
      if fragment.attachments
        view.render(
          partial: 'comfy/admin/cms/fragments/form_fragment_attachments',
          locals: {
            object_name: object_name,
            index: index,
            attachments: fragment.attachments,
            fragment_id: identifier,
            multiple: true
          }
        )
      end

    yield view.safe_join([input, attachments_partial], '')
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :files, ComfortableMediaSurfer::Content::Tags::Files
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/fragment.rb">
# frozen_string_literal: true

# Base Tag class that other fragment tags depend on.
# Tag handles following options:
#   `render`: true (default) | false
#     do we want to render this content on the page, or manually access it via
#     helpers. Good example would be content for meta tags.
#   `namespace`:
#     Just a string that allows grouping of form elements in the admin area
#
class ComfortableMediaSurfer::Content::Tags::Fragment < ComfortableMediaSurfer::Content::Tag
  attr_accessor :renderable
  attr_reader :identifier, :namespace

  # @type [{String => String}]
  attr_reader :options

  def initialize(context:, params: [], source: nil)
    super

    @options    = params.extract_options!
    @identifier = params[0]

    unless @identifier.present?
      raise Error, "Missing identifier for fragment tag: #{source}"
    end

    @namespace  = @options['namespace'] || 'default'
    @renderable = @options['render'].to_s.downcase != 'false'
  end

  # Grabs existing fragment record or spins up a new instance if there's none
  # @return [Comfy::Cms::Fragment]
  def fragment
    context.fragments.detect { |f| f.identifier == identifier } ||
      context.fragments.build(identifier: identifier)
  end

  def content
    fragment.content
  end

  # If `render: false` was passed in we won't render anything. Assuming that
  # that fragment content will be rendered manually
  def render
    renderable ? content : ''
  end

  # Tag renders its own form inputs via `form_field(template, index)`
  # For example:
  #   class MyTag < ComfortableMediaSurfer::Content::Tags::Fragment
  #     def form_field(view, index, &block)
  #       # omit yield if you don't want default wrapper
  #       yield view.text_area "input_name", "value"
  #     end
  #   end
  def form_field
    raise 'Form field rendering not implemented for this Tag'
  end

  def form_field_id
    "fragment-#{@identifier}"
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/tags/helper.rb">
# frozen_string_literal: true

# Tag for injecting view helpers. Example tag:
#   {{cms:helper method_name, param_a, param_b, foo: bar}}
# This expands into something like this:
#   <%= method_name("param_a", "param_b", "foo" => "bar") %>
# Whitelist is can be used to control what helpers are available.
# By default there's a blacklist of methods that should not be called.
#
class ComfortableMediaSurfer::Content::Tags::Helper < ComfortableMediaSurfer::Content::Tag
  BLACKLIST = %w[eval class_eval instance_eval render].freeze

  attr_reader :method_name

  def initialize(context:, params: [], source: nil)
    super
    @method_name = params.shift

    return if @method_name.present?

    raise Error, 'Missing method name for helper tag'
  end

  # we output erb into rest of the content
  def allow_erb?
    true
  end

  def content
    helper_params = params.map do |p|
      case p
      when Hash
        format('%<arg>s', arg: p)
      else
        format('%<arg>p', arg: p)
      end
    end.join(',')
    "<%= #{method_name}(#{helper_params}) %>"
  end

  def render
    whitelist = ComfortableMediaSurfer.config.allowed_helpers
    if whitelist.is_a?(Array)
      content if whitelist.map!(&:to_s).member?(method_name)
    else
      content unless BLACKLIST.member?(method_name)
    end
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :helper, ComfortableMediaSurfer::Content::Tags::Helper
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/image.rb">
# frozen_string_literal: true

require_relative 'mixins/file_content'

# This is like the the file_link tag, but specifically for images
# Identify the image by its label {{ cms:image label }}
#
# `class`   - any html classes that you want on the image tag. For example "class1 class2"
#
# - variant_attrs are not functional, perhaps due to some change in ImageMagick
# - Simply use a class in your CSS / SASS to style your image display
# `label`   - attach label attribute to link or image tag
# `resize`  - imagemagick option. For example: "100x50>"
# `gravity` - imagemagick option. For example: "center"
# `crop`    - imagemagick option. For example: "100x50+0+0"

class ComfortableMediaSurfer::Content::Tags::Image < ComfortableMediaSurfer::Content::Tag
  include ComfortableMediaSurfer::Content::Tags::Mixins::FileContent

  attr_reader :identifier, :as, :variant_attrs

  def initialize(context:, params: [], source: nil)
    super

    options = params.extract_options!
    @identifier     = params[0]
    @as             = 'image'
    @class          = options['class']
    @variant_attrs  = options.slice('resize', 'gravity', 'crop') # broken for ImageMagick

    return if @identifier.present?

    raise Error, 'Missing identifier label for image tag'
  end

  # @return [Comfy::Cms::File]
  def file_record
    @file_record ||= context.site.files.detect { |f| f.label == identifier }
  end

  # @return [ActiveStorage::Blob]
  def file
    file_record&.attachment
  end

  # @return [String]
  def label
    return '' if file_record.nil?

    file_record.label.presence || file.filename.to_s
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :image, ComfortableMediaSurfer::Content::Tags::Image
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/markdown.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using textarea with markdown
#   {{ cms:markdown identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Markdown < ComfortableMediaSurfer::Content::Tags::Fragment
  def render
    renderable ? Kramdown::Document.new(content.to_s).to_html : ''
  end

  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][content]"
    options = { id: form_field_id, data: { 'cms-cm-mode' => 'text/x-markdown' } }
    input   = view.send(:text_area_tag, name, content, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :markdown, ComfortableMediaSurfer::Content::Tags::Markdown
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/number.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using number input
#   {{ cms:number identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Number < ComfortableMediaSurfer::Content::Tags::Fragment
  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][content]"
    options = { id: form_field_id, class: 'form-control' }
    input   = view.send(:number_field_tag, name, content, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :number, ComfortableMediaSurfer::Content::Tags::Number
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/page_file_link.rb">
# frozen_string_literal: true

require_relative 'mixins/file_content'

# This tag allows you to link page-level files from within the page content.
#
# E.g. if your layout has:
#
#   {{ cms:file graphic, render: false }}
#   {{ cms:files attachments, redner: false }}
#
# You can link to the files from an individual page (or snippet rendered in
# the context of the page) like so:
#
#   {{ cms:page_file_link graphic }}
#   {{ cms:page_file_link attachments, filename: "cat.jpg" }}
#
# `as`      - url (default) | link | image - how file gets rendered out
# `class`   - any html classes that you want on the result link or image tag. For example "class1 class2"
#
# - the following params are deprecated / not functional, perhaps due to some change in ImageMagick
# - Simply use a class in your CSS / SASS to style your image display
# `label`   - attach label attribute to link or image tag
# `resize`  - imagemagick option. For example: "100x50>"
# `gravity` - imagemagick option. For example: "center"
# `crop`    - imagemagick option. For example: "100x50+0+0"
#
class ComfortableMediaSurfer::Content::Tags::PageFileLink < ComfortableMediaSurfer::Content::Tag
  include ComfortableMediaSurfer::Content::Tags::Mixins::FileContent

  # @return [String] A `cms:file(s)` identifier.
  attr_reader :identifier

  # @type ["url", "link", "image"]
  attr_reader :as

  # @type [{String => String}]
  attr_reader :variant_attrs

  # @return [String] Used to refer to a file in a {{ cms:files }} tag.
  attr_reader :filename

  # @param (see ComfortableMediaSurfer::Content::Tag#initialize)
  def initialize(context:, params: [], source: nil)
    super

    options = params.extract_options!
    @identifier     = params[0]
    @as             = options['as'] || 'url'
    @class          = options['class']
    @variant_attrs  = options.slice('resize', 'gravity', 'crop')
    @filename       = options['filename']

    return if @identifier.present?

    raise Error, 'Missing identifier for page file link tag'
  end

  # @return [Comfy::Cms::Fragment]
  def fragment
    @fragment ||= context.fragments.detect { |f| f.identifier == identifier }
  end

  # @return [ActiveStorage::Blob]
  def file
    @file ||=
      if fragment.nil?
        nil
      elsif filename.nil?
        fragment.attachments.first
      else
        fragment.attachments.detect { |a| a.filename.to_s == filename }
      end
  end

  # @return [String]
  def label
    return if file.nil?

    file.filename.to_s
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :page_file_link, ComfortableMediaSurfer::Content::Tags::PageFileLink
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/partial.rb">
# frozen_string_literal: true

# Tag for injecting partials. Example tag:
#   {{cms:partial path/to/partial, foo: bar, zip: zoop}}
# This expands into a familiar:
#   <%= render partial: "path/to/partial", locals: {foo: bar, zip: zoop} %>
# Whitelist is can be used to control what partials are renderable.
#
class ComfortableMediaSurfer::Content::Tags::Partial < ComfortableMediaSurfer::Content::Tag
  attr_reader :path, :locals

  def initialize(context:, params: [], source: nil)
    super
    @locals = params.extract_options!
    @path   = params[0]

    return if @path.present?

    raise Error, 'Missing path for partial tag'
  end

  # we output erb into rest of the content
  def allow_erb?
    true
  end

  def content
    format(
      '<%%= render partial: %<path>p, locals: %<locals>s %%>',
      path: @path,
      locals: @locals
    )
  end

  def render
    whitelist = ComfortableMediaSurfer.config.allowed_partials
    if whitelist.is_a?(Array)
      whitelist.member?(@path) ? content : ''
    else
      content
    end
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :partial, ComfortableMediaSurfer::Content::Tags::Partial
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/siblings.rb">
# frozen_string_literal: true

# Nav Tag for rendering previous and next sibling links relative to current page
#   {{ cms:siblings }}
#   {{ cms:siblings style: "font-style: italic", exclude: "404-page, search-page" }}
# To customize your siblings style, add a 'siblings' id to your CSS, e.g
# #siblings {
#   color: #006633;
#   font-size: 95%;
#   margin-top: 12px;
#   font-style: italic;
# }
# and/or pass in style overrides with the 'style' parameter (see above)
#
# To exclude siblings, list their slugs with the 'exclude' parameter
# as comma-delimited string, e.g. as above - exclude: "404-page, search-page"
#
# style and exclude parameters are optional

class ComfortableMediaSurfer::Content::Tags::Siblings < ComfortableMediaSurfer::Content::Tag
  attr_reader :locals, :style, :sibs
  attr_accessor :links

  def initialize(context:, params: [], source: nil)
    super
    @locals = params.extract_options!
    @style = ''
    @style = "<style>#siblings {#{@locals['style']}}</style>" if @locals['style']
    @exclude = []
    @exclude = @locals['exclude'].split(',') if @locals['exclude']
    @links = ''
    # ActiveRecord_Associations_CollectionProxy
    @sibs = context.self_and_siblings.order(:position).to_ary
    unless Rails.env == 'development'
      @sibs.delete_if { |sib| !sib.is_published }
    end
    @sibs.delete_if { |sib| @exclude.include? sib.slug }
  end

  def content
    if @sibs.count > 1
      @links = '<div id="siblings">'
      prevp = false
      @sibs.each do |sib|
        sib_idx = @sibs.index(sib)
        next if sib.slug == context.slug
        next if Rails.env == 'production' && !sib.is_published
        next unless @sibs.index(context) # current page is excluded

        if sib_idx == @sibs.index(context) - 1
          @links += "<a href=#{sib.url(relative: true)}>#{sib.label}</a> &laquo;&nbsp;<em>Previous</em> &bull; "
          prevp = true
        elsif sib_idx == @sibs.index(context) + 1
          @links += '&bull;' unless prevp
          @links += "<em>Next</em>&nbsp;&raquo; <a href=#{sib.url(relative: true)}>#{sib.label}</a>"
        end
      end
      @links += '</div>'
    end
    format("#{@style}#{@links}")
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :siblings, ComfortableMediaSurfer::Content::Tags::Siblings
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/snippet.rb">
# frozen_string_literal: true

# Tag for reusable snippets within context's site scope. Looks like this:
#   {{cms:snippet identifier}}
# Snippets may have more tags in them like fragments, so they may be expanded too.
#
class ComfortableMediaSurfer::Content::Tags::Snippet < ComfortableMediaSurfer::Content::Tag
  attr_reader :identifier

  def initialize(context:, params: [], source: nil)
    super
    @identifier = params[0]

    return if @identifier.present?

    raise Error, 'Missing identifier for snippet tag'
  end

  def content
    if snippet.markdown
      Kramdown::Document.new(snippet.content.to_s).to_html
    else
      snippet.content
    end
  end

  # Grabbing or initializing Comfy::Cms::Snippet object
  def snippet
    context.site.snippets.detect { |s| s.identifier == identifier } ||
      context.site.snippets.build(identifier: identifier)
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :snippet, ComfortableMediaSurfer::Content::Tags::Snippet
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/template.rb">
# frozen_string_literal: true

# Tag for injecting template rendering. Example tag:
#   {{cms:template template/path}}
# This expands into something like this:
#   <%= render template: "template/path" %>
# Whitelist is can be used to control what templates are available.
#
class ComfortableMediaSurfer::Content::Tags::Template < ComfortableMediaSurfer::Content::Tag
  attr_reader :path

  def initialize(context:, params: [], source: nil)
    super
    @path = params[0]

    return if @path.present?

    raise Error, 'Missing template path for template tag'
  end

  # we output erb into rest of the content
  def allow_erb?
    true
  end

  def content
    format('<%%= render template: %<path>p %%>', path: path)
  end

  def render
    whitelist = ComfortableMediaSurfer.config.allowed_templates
    if whitelist.is_a?(Array)
      whitelist.member?(@path) ? content : ''
    else
      content
    end
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :template, ComfortableMediaSurfer::Content::Tags::Template
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/text.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using text input
#   {{ cms:text identifier }}
#
class ComfortableMediaSurfer::Content::Tags::Text < ComfortableMediaSurfer::Content::Tags::Fragment
  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][content]"
    options = { id: form_field_id, class: 'form-control' }
    input   = view.send(:text_field_tag, name, content, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :text, ComfortableMediaSurfer::Content::Tags::Text
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/textarea.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using textarea
#   {{ cms:textarea identifier }}
#

class ComfortableMediaSurfer::Content::Tags::Textarea < ComfortableMediaSurfer::Content::Tags::Fragment
  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][content]"
    options = { id: form_field_id, data: { 'cms-cm-mode' => 'text/html' } }
    input   = view.send(:text_area_tag, name, content, options)

    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :textarea, ComfortableMediaSurfer::Content::Tags::Textarea
)
</file>

<file path="lib/comfortable_media_surfer/content/tags/wysiwyg.rb">
# frozen_string_literal: true

# Tag for text content that is going to be rendered using Redactor (default) in
# the admin area
#   {{ cms:wysiwyg identifier }}
#
#
class ComfortableMediaSurfer::Content::Tags::Wysiwyg < ComfortableMediaSurfer::Content::Tags::Fragment
  def form_field(object_name, view, index)
    name    = "#{object_name}[fragments_attributes][#{index}][content]"
    options = { id: form_field_id, data: { 'cms-rich-text' => true } }
    input   = view.send(:text_area_tag, name, content, options)
    yield input
  end
end

ComfortableMediaSurfer::Content::Renderer.register_tag(
  :wysiwyg, ComfortableMediaSurfer::Content::Tags::Wysiwyg
)
</file>

<file path="lib/comfortable_media_surfer/content/block.rb">
# frozen_string_literal: true

# wtf does this mean
# it means that all nodes between this must be moved into here
# {{cms:block}} some content {{cms:end_block}}
class ComfortableMediaSurfer::Content::Block < ComfortableMediaSurfer::Content::Tag
  attr_writer :nodes

  def nodes
    @nodes ||= []
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/params_parser.rb">
# frozen_string_literal: true

require 'strscan'

class ComfortableMediaSurfer::Content::ParamsParser
  class Error < StandardError; end

  STRING_LITERAL  = %r{'[^']*'|"[^"]*"}
  IDENTIFIER      = %r{[a-z0-9][\w\-/.]*}i
  HASH_KEY        = %r{#{IDENTIFIER}:}
  COMMA           = %r{,}
  HASH_OPEN       = %r{\{}
  HASH_CLOSE      = %r{\}}
  ARRAY_OPEN      = %r{\[}
  ARRAY_CLOSE     = %r{\]}
  INTEGER         = %r{\b[0-9]+\b}i

  # @param <String> string
  def initialize(string = '')
    @string = string
  end

  # Takes CMS content tag parameters and converts them into array of strings,
  # hashes and arrays.
  #
  # @return [Array<String, {String => String}>]
  # @raise [Error] if the given `text` is malformed.
  #
  # @example
  #   new("a, b, c").parse
  #   #=> ["a", "b", "c"]
  #
  #   new("a, b: c, d: e").parse
  #   #=> ["a", {"b" => "c", "d" => "e"}]
  #
  #   new("a, b: {c: [d, e]}").parse
  #   #=> ["a", {"b" => {"c" => ["d", "e"]}}]
  #
  def params
    @tokens = tokenize(@string)
    parse_params
  end

private

  # Contructs root-level list of arguments sent via content tag
  def parse_params
    params = []
    while (token = @tokens.shift)
      params << parse_value(token)
    end
    params
  end

  # Gets token value. Will trigger parsing of hash and array structures
  def parse_value(token)
    case token&.first
    when :string
      token[1]
    when :hash_key
      @tokens.unshift(token)
      parse_hash
    when :hash_open
      parse_hash
    when :array_open
      parse_array
    else
      raise Error, "Invalid params: #{@string}"
    end
  end

  # Hash constructor method. Will handle nested hashes as well
  def parse_hash
    opens = 1
    hash = {}

    while (token = @tokens.shift)
      case token&.first
      when :hash_key
        hash[token[1]] = parse_value(@tokens.shift)
      when :hash_close
        opens -= 1
      when :hash_open
        opens += 1
      else
        raise Error, "Invalid params: #{@string}"
      end

      return hash if opens.zero?
    end

    # We're can't really detect unclosed hashes as we can construct them without
    # opening brakets. For example, `a: b, c: d` is same as `{a: b, c: d}` and
    # `{a: b, c: d` is also ends up to be a valid hash. It will error out if
    # unclosed hash is followed by some other unexpected token. Like: `{a: b, c`
    hash
  end

  # Array construction method. Will handle nested arrays
  def parse_array
    opens = 1
    array = []
    while (token = @tokens.shift)
      case token&.first
      when :array_close
        opens -= 1
      else
        array << parse_value(token)
      end

      return array if opens.zero?
    end

    raise Error, "Unclosed array param: #{@string}"
  end

  # Tokenizing input string into a list of touples
  # Also args_string is stripped of "smart" quotes coming from wysiwyg
  #
  # @param [String] args_string
  # @return [Array<String>] tokens
  def tokenize(args_string)
    args_string = args_string.tr('“”‘’', %q(""''))
    ss = StringScanner.new(args_string)
    tokens = []
    loop do
      ss.skip(%r{\s*})
      break if ss.eos?

      # commas are just separators like spaces
      next if ss.scan(COMMA)

      tokens <<
        if    (t = ss.scan(STRING_LITERAL)) then [:string, t[1...-1]]
        elsif (t = ss.scan(HASH_KEY))       then [:hash_key, t[0...-1]]
        elsif (t = ss.scan(INTEGER))        then [:string, t.to_i]
        elsif (t = ss.scan(IDENTIFIER))     then [:string, t]
        elsif (t = ss.scan(HASH_OPEN))      then [:hash_open, t]
        elsif (t = ss.scan(HASH_CLOSE))     then [:hash_close, t]
        elsif (t = ss.scan(ARRAY_OPEN))     then [:array_open, t]
        elsif (t = ss.scan(ARRAY_CLOSE))    then [:array_close, t]
        else
          raise Error, "Unexpected char: #{ss.getch}"
        end
    end

    tokens
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/tag.rb">
# frozen_string_literal: true

class ComfortableMediaSurfer::Content::Tag
  class Error < StandardError; end

  # @type [Comfy::Cms::WithFragments]
  attr_reader :context

  # @type [Array<String, {String => String}>] params
  attr_reader :params

  # @type [String, nil] source
  attr_reader :source

  # @param [Comfy::Cms::WithFragments] context
  # @param [Array<String, {String => String}>] params
  # @param [String, nil] source
  def initialize(context:, params: [], source: nil)
    @context  = context
    @params   = params
    @source   = source
  end

  # Making sure we don't leak erb from tags by accident.
  # Tag classes can override this, like partials/helpers tags.
  def allow_erb?
    ComfortableMediaSurfer.config.allow_erb
  end

  # Normally it's a {(String)}. However, if tag content has tags,
  # we need to expand them and that produces potentially more stuff.
  # @return [Array<String, ComfortableMediaSurfer::Content::Tag>]
  def nodes
    template  = ComfortableMediaSurfer::Content::Renderer.new(@context)
    tokens    = template.tokenize(content)
    template.nodes(tokens)
  end

  # @return [String]
  def content
    raise Error, 'This is a base class. It holds no content'
  end

  # @return [String]
  def render
    content
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/tags.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Content::Tags
  # ...
end

require_relative 'tags/fragment'
require_relative 'tags/wysiwyg'
require_relative 'tags/text'
require_relative 'tags/textarea'
require_relative 'tags/markdown'
require_relative 'tags/datetime'
require_relative 'tags/date'
require_relative 'tags/number'
require_relative 'tags/checkbox'
require_relative 'tags/file'
require_relative 'tags/files'
require_relative 'tags/snippet'
require_relative 'tags/asset'
require_relative 'tags/file_link'
require_relative 'tags/image'
require_relative 'tags/page_file_link'
require_relative 'tags/helper'
require_relative 'tags/partial'
require_relative 'tags/template'
require_relative 'tags/audio'
require_relative 'tags/breadcrumbs'
require_relative 'tags/children'
require_relative 'tags/siblings'
</file>

<file path="lib/comfortable_media_surfer/seeds/file/exporter.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::File
  class Exporter < ComfortableMediaSurfer::Seeds::Exporter
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, to, 'files/')
    end

    def export!
      prepare_folder!(path)

      site.files.each do |file|
        file_path = File.join(path, file.attachment.filename.to_s)

        # writing attributes
        ::File.write(::File.join(path, "_#{file.attachment.filename}.yml"), {
          'label' => file.label,
          'description' => file.description,
          'categories' => file.categories.map(&:label)
        }.to_yaml)

        # writing content
        begin
          ::File.binwrite(::File.join(path, ::File.basename(file_path)), file.attachment.download)
        rescue Errno::ENOENT, OpenURI::HTTPError
          message = "[CMS SEEDS] No physical File \t #{file.attachment.filename}"
          ComfortableMediaSurfer.logger.warn(message)
          next
        end

        message = "[CMS SEEDS] Exported File \t #{file.attachment.filename}"
        ComfortableMediaSurfer.logger.info(message)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds/file/importer.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::File
  class Importer < ComfortableMediaSurfer::Seeds::Importer
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, from, 'files/')
    end

    def import!
      Dir["#{path}[^_]*"].each do |file_path|
        filename = ::File.basename(file_path)

        file = site.files.with_attached_attachment
          .where('active_storage_blobs.filename' => filename).references(:blob).first ||
               site.files.new

        # We need to track actual file and its attributes
        fresh_file = false

        if File.exist?(attrs_path = File.join(path, "_#{filename}.yml")) && fresh_seed?(file, attrs_path)
          fresh_file = true

          attrs = YAML.safe_load_file(attrs_path)
          category_ids = category_names_to_ids(file, attrs.delete('categories'))
          file.attributes = attrs.merge(
            category_ids: category_ids
          )
        end

        if fresh_seed?(file, file_path)
          fresh_file = true

          file_handler = File.open(file_path)
          file.file = {
            io: file_handler,
            filename: filename,
            content_type: MimeMagic.by_magic(file_handler)
          }
        end

        if fresh_file
          if file.save
            message = "[CMS SEEDS] Imported File \t #{file_path}"
            ComfortableMediaSurfer.logger.info(message)
          else
            message = "[CMS SEEDS] Failed to import File \n#{file.errors.inspect}"
            ComfortableMediaSurfer.logger.warn(message)
          end
        end

        seed_ids << file.id
      end

      # cleaning up
      site.files.where('id NOT IN (?)', seed_ids).destroy_all
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds/layout/exporter.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Layout
  class Exporter < ComfortableMediaSurfer::Seeds::Exporter
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, to, 'layouts/')
    end

    def export!
      prepare_folder!(path)

      site.layouts.each do |layout|
        layout_path = File.join(path, layout.ancestors.reverse.collect(&:identifier), layout.identifier)
        FileUtils.mkdir_p(layout_path)

        path = ::File.join(layout_path, 'content.html')
        data = []

        attrs = {
          'label' => layout.label,
          'app_layout' => layout.app_layout,
          'position' => layout.position
        }.to_yaml

        data << { header: 'attributes',  content: attrs }
        data << { header: 'content',     content: layout.content }
        data << { header: 'js',          content: layout.js }
        data << { header: 'css',         content: layout.css }

        write_file_content(path, data)

        message = "[CMS SEEDS] Exported Layout \t #{layout.identifier}"
        ComfortableMediaSurfer.logger.info(message)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds/page/exporter.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Page
  class Exporter < ComfortableMediaSurfer::Seeds::Exporter
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, to, 'pages/')
    end

    def export!
      prepare_folder!(path)

      site.pages.each do |page|
        page.slug = 'index' if page.slug.blank?
        page_path = File.join(path, page.ancestors.reverse.map { |p| p.slug.blank? ? 'index' : p.slug }, page.slug)
        FileUtils.mkdir_p(page_path)

        path = ::File.join(page_path, 'content.html')
        data = []

        attrs = {
          'label' => page.label,
          'layout' => page.layout.try(:identifier),
          'target_page' => page.target_page.try(:full_path),
          'categories' => page.categories.map(&:label),
          'is_published' => page.is_published,
          'position' => page.position
        }.to_yaml

        data << { header: 'attributes', content: attrs }
        data += fragments_data(page, page_path)

        write_file_content(path, data)

        message = "[CMS SEEDS] Exported Page \t #{page.full_path}"
        ComfortableMediaSurfer.logger.info(message)

        export_translations(page, page_path)
      end
    end

  private

    def export_translations(page, page_path)
      page.translations.each do |translation|
        path = ::File.join(page_path, "content.#{translation.locale}.html")
        data = []

        attrs = {
          'label' => translation.label,
          'layout' => translation.layout.try(:identifier),
          'is_published' => page.is_published
        }.to_yaml

        data << { header: 'attributes', content: attrs }
        data += fragments_data(translation, page_path)

        write_file_content(path, data)

        message = "[CMS SEEDS] Exported Translation \t #{translation.locale}"
        ComfortableMediaSurfer.logger.info(message)
      end
    end

    # Collecting fragment data and writing attachment files to disk
    def fragments_data(record, page_path)
      record.fragments.collect do |frag|
        header = "#{frag.tag} #{frag.identifier}"
        content =
          case frag.tag
          when 'datetime', 'date'
            frag.datetime
          when 'checkbox'
            frag.boolean
          when 'file', 'files'
            frag.attachments.map do |attachment|
              ::File.binwrite(::File.join(page_path, attachment.filename.to_s), attachment.download)
              attachment.filename
            end.join("\n")
          else
            frag.content
          end

        { header: header, content: content }
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds/snippet/exporter.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Snippet
  class Exporter < ComfortableMediaSurfer::Seeds::Exporter
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, to, 'snippets/')
    end

    def export!
      prepare_folder!(path)

      site.snippets.each do |snippet|
        attrs = {
          'label' => snippet.label,
          'categories' => snippet.categories.map(&:label),
          'position' => snippet.position
        }.to_yaml

        data = []
        data << { header: 'attributes', content: attrs }
        data << { header: 'content', content: snippet.content }

        snippet_path = File.join(path, "#{snippet.identifier}.html")
        write_file_content(snippet_path, data)

        message = "[CMS SEEDS] Exported Snippet \t #{snippet.identifier}"
        ComfortableMediaSurfer.logger.info(message)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/configuration.rb">
# frozen_string_literal: true

class ComfortableMediaSurfer::Configuration
  # Don't like ComfortableMediaSurfer? Set it to whatever you like. :(
  attr_accessor :cms_title

  # Controller that is inherited from CmsAdmin::BaseController
  # 'ApplicationController' is the default
  attr_accessor :admin_base_controller

  # Controller that Comfy::Cms::BaseController will inherit from
  # 'ApplicationController' is the default
  attr_accessor :public_base_controller

  # Module that will handle authentication to access cms-admin area
  attr_accessor :admin_auth

  # Module that will handle authorization against admin cms resources
  attr_accessor :admin_authorization

  # Module that will handle authentication for public pages
  attr_accessor :public_auth

  # Module that will handle authorization against public resources
  attr_accessor :public_authorization

  # When arriving at /cms-admin you may chose to redirect to arbirtary path,
  # for example '/cms-admin/users'
  attr_accessor :admin_route_redirect

  # With each page load, files will be synched with the database. Database entries are
  # destroyed if there's no corresponding file. Seeds are disabled by default.
  attr_accessor :enable_seeds

  # Path where seeds can be located.
  attr_accessor :seeds_path

  # Number of revisions kept. Default is 25. If you wish to disable: set this to 0.
  attr_accessor :revisions_limit

  # Locale definitions. If you want to define your own locale merge
  # {:locale => 'Locale Title'} with this.
  attr_accessor :locales

  # Admin interface will respect the locale of the site being managed. However you can
  # force it to English by setting this to `:en`
  attr_accessor :admin_locale

  # A class that is included as a sweeper to admin base controller if it's set
  attr_accessor :admin_cache_sweeper

  # Not allowing erb code to be run inside page content. False by default.
  # @return [Boolean]
  attr_accessor :allow_erb

  # Whitelist of all helper methods that can be used via {{cms:helper}} tag. By default
  # all helpers are allowed except `eval`, `send`, `call` and few others. Empty array
  # will prevent rendering of all helpers.
  attr_accessor :allowed_helpers

  # Whitelist of partials paths that can be used via {{cms:partial}} tag. All partials
  # are accessible by default. Empty array will prevent rendering of all partials.
  attr_accessor :allowed_partials

  # Whitelist of template paths that can be used via {{cms:template}} tag. All templates
  # are accessible by default. Empty array will prevent rendering of all templates.
  attr_accessor :allowed_templates

  # Site aliases, if you want to have aliases for your site. Good for harmonizing
  # production env with dev/testing envs.
  # e.g. config.site_aliases = {'host.com' => 'host.inv', 'host_a.com' => ['host.lvh.me', 'host.dev']}
  # Default is nil (not used)
  attr_accessor :hostname_aliases

  # Reveal partials that can be overwritten in the admin area.
  # Default is false.
  attr_accessor :reveal_cms_partials

  # Auto-setting parameter derived from the routes
  attr_accessor :public_cms_path

  # Customize returned content from `page.to_json`
  # Default is set to `methods: [:content], except: [:content_cache]`
  # For example: include fragments into json data with `config.page_to_json_options = { include: [:fragments] }`
  attr_accessor :page_to_json_options

  # Configuration defaults
  def initialize
    @cms_title              = 'ComfortableMediaSurfer CMS Engine'
    @admin_base_controller  = 'ApplicationController'
    @public_base_controller = 'ApplicationController'
    @admin_auth             = 'ComfortableMediaSurfer::AccessControl::AdminAuthentication'
    @admin_authorization    = 'ComfortableMediaSurfer::AccessControl::AdminAuthorization'
    @public_auth            = 'ComfortableMediaSurfer::AccessControl::PublicAuthentication'
    @public_authorization   = 'ComfortableMediaSurfer::AccessControl::PublicAuthorization'
    @seed_data_path         = nil
    @admin_route_redirect   = ''
    @enable_sitemap         = true
    @enable_seeds           = false
    @seeds_path             = File.expand_path('db/cms_seeds', Rails.root)
    @revisions_limit        = 25
    @locales                = {
      'ar' => 'عربي',
      'ca' => 'Català',
      'cs' => 'Česky',
      'da' => 'Dansk',
      'de' => 'Deutsch',
      'en' => 'English',
      'es' => 'Español',
      'fi' => 'Suomi',
      'fr' => 'Français',
      'gr' => 'Ελληνικά',
      'hr' => 'Hrvatski',
      'it' => 'Italiano',
      'ja' => '日本語',
      'nb' => 'Norsk',
      'nl' => 'Nederlands',
      'pl' => 'Polski',
      'pt-BR' => 'Português Brasileiro',
      'ru' => 'Русский',
      'sk' => 'Slovensky',
      'sv' => 'Svenska',
      'tr' => 'Türkçe',
      'uk' => 'Українська',
      'zh-CN' => '简体中文',
      'zh-TW' => '正體中文'
    }
    @admin_locale         = nil
    @admin_cache_sweeper  = nil
    @allow_erb            = false
    @allowed_helpers      = nil
    @allowed_partials     = nil
    @hostname_aliases     = nil
    @reveal_cms_partials  = false
    @public_cms_path      = nil
    @page_to_json_options = { methods: [:content], except: [:content_cache] }
  end
end
</file>

<file path="lib/comfortable_media_surfer/content.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Content
  # ...
end

require_relative 'content/renderer'
require_relative 'content/params_parser'
require_relative 'content/tag'
require_relative 'content/tags'
require_relative 'content/block'
</file>

<file path="lib/comfortable_media_surfer/error.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer
  class Error < StandardError
  end

  class MissingSite < ComfortableMediaSurfer::Error
    def initialize(identifier)
      super("Cannot find CMS Site with identifier: #{identifier}")
    end
  end

  class MissingLayout < ComfortableMediaSurfer::Error
    def initialize(identifier)
      super("Cannot find CMS Layout with identifier: #{identifier}")
    end
  end

  class MissingPage < ComfortableMediaSurfer::Error
    def initialize(path)
      super("Cannot find CMS Page at #{path}")
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/extensions.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Extensions
  # ...
end

require_relative 'extensions/acts_as_tree'
require_relative 'extensions/has_revisions'
</file>

<file path="lib/comfortable_media_surfer/form_builder.rb">
# frozen_string_literal: true

class ComfortableMediaSurfer::FormBuilder < ComfyBootstrapForm::FormBuilder
  # Renders form input for a fragment
  #
  # @param [Comfy::Cms::Page] record
  # @param [ComfortableMediaSurfer::Content::Tag] tag
  # @param [Integer] index
  def fragment_field(tag, index)
    tag.form_field(object_name, @template, index) do |tag_input|
      name = "#{object_name}[fragments_attributes][#{index}][identifier]"
      identifer_input = @template.hidden_field_tag(name, tag.identifier, id: nil)

      name  = "#{object_name}[fragments_attributes][#{index}][tag]"
      value = tag.class.to_s.demodulize.underscore
      tag_name_input = @template.hidden_field_tag(name, value, id: nil)

      label = I18n.t("comfy.cms.content.tag.#{tag.identifier}", default: tag.identifier.titleize)
      renderable = tag.respond_to?(:renderable) ? tag.renderable : true

      form_group bootstrap: { label: { text: label, for: tag.form_field_id, class: "renderable-#{renderable}" } } do
        concat identifer_input
        concat tag_name_input
        concat tag_input
      end
    end
  end

  # Wrapper for form action that is sticking to the bottom of the viewport.
  # Example:
  #   = form.form_actions do
  #     = form.submit
  #
  def form_actions(&block)
    content_tag(:div, class: 'form-actions row bg-light') do
      content_tag(:div, class: 'col-lg-8 offset-lg-2') do
        content_tag(:div, class: 'form-group row mb-0') do
          content_tag(:div, class: 'col-sm-10 offset-sm-2', &block)
        end
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/routing.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Routing
  class ActionDispatch::Routing::Mapper
    def comfy_route_cms_admin(path: 'admin')
      scope module: :comfy, as: :comfy do
        scope module: :admin do
          namespace :cms, as: :admin_cms, path: path, except: :show do
            get '/', to: 'base#jump'

            concern :with_revisions do |options|
              resources :revisions, options.merge(only: %i[index show]) do
                patch :revert, on: :member
              end
            end

            concern :with_reorder do
              put :reorder, on: :collection
            end

            concern :with_form_fragments do
              get :form_fragments, on: :member
            end

            resources :sites do
              resources :pages do
                concerns :with_reorder
                concerns :with_form_fragments
                concerns :with_revisions, controller: 'revisions/page'

                get :toggle_branch, on: :member

                resources :translations, except: [:index] do
                  concerns :with_form_fragments
                  concerns :with_revisions, controller: 'revisions/translation'
                end
              end

              resources :files, concerns: [:with_reorder]

              resources :layouts do
                concerns :with_reorder
                concerns :with_revisions, controller: 'revisions/layout'
              end

              resources :snippets do
                concerns :with_reorder
                concerns :with_revisions, controller: 'revisions/snippet'
              end

              resources :categories
            end
          end
        end
      end
    end
  end

  class ActionDispatch::Routing::Mapper
    def comfy_route_cms(options = {})
      ComfortableMediaSurfer.configuration.public_cms_path = options[:path]

      scope module: :comfy, as: :comfy do
        namespace :cms, path: options[:path] do
          get 'cms-css/:site_id/:identifier(/:cache_buster)' => 'assets#render_css', as: 'render_css'
          get 'cms-js/:site_id/:identifier(/:cache_buster)'  => 'assets#render_js',  as: 'render_js'

          get '(*cms_path)' => 'content#show', as: 'render_page', action: '/:format'
        end
      end
    end
  end

  class ActionDispatch::Routing::Mapper
    def comfy_route(identifier, options = {})
      send("comfy_route_#{identifier}", **options)
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds
  SEED_CLASSES = %w[Layout Page Snippet File].freeze

  class Error < StandardError; end

  require 'mimemagic'

  class Importer
    attr_accessor :site,
                  :path,
                  :from,
                  :to,
                  :seed_ids

    # `from` and `to` indicate site identifier and folder name
    def initialize(from, to = from)
      self.from         = from
      self.to           = to
      self.site         = Comfy::Cms::Site.where(identifier: to).first!
      self.seed_ids     = []

      return if ::File.exist?(path = ::File.join(ComfortableMediaSurfer.config.seeds_path, from))

      raise Error, "Folder for import: '#{path}' is not found"
    end

    # if passed nil will use default seed classes
    def import!(classes = nil)
      classes ||= SEED_CLASSES
      classes.each do |klass|
        klass = "ComfortableMediaSurfer::Seeds::#{klass}::Importer"
        klass.constantize.new(from, to).import!
      end
    end

  private

    # Splitting file content in sections delimited by headers that look like this:
    #   [header]
    #   some content
    #   [header 2]
    #   some more content
    def parse_file_content(file_path)
      text = ::File.read(file_path)
      tokens = text.split(%r{^\[(.*?)\]\r?\n})
      tokens.shift # first item should be blank
      tokens.in_groups_of(2).each_with_object({}) do |pair, h|
        h[pair[0]] = pair[1]
      end
    end

    def fresh_seed?(object, file_path)
      object.new_record? || ::File.mtime(file_path) > object.updated_at
    end

    def category_names_to_ids(record, names)
      [names].flatten.map do |name|
        category = site.categories.find_or_create_by(
          label: name,
          categorized_type: record.class.to_s
        )
        category.id
      end
    end
  end

  class Exporter
    attr_accessor :site,
                  :path,
                  :from,
                  :to

    def initialize(from, to = from)
      self.from = from
      self.to   = to
      self.site = Comfy::Cms::Site.where(identifier: from).first!
    end

    # if passed nil will use default seed classes
    def export!(classes = nil)
      classes ||= SEED_CLASSES
      classes.each do |klass|
        klass = "ComfortableMediaSurfer::Seeds::#{klass}::Exporter"
        klass.constantize.new(from, to).export!
      end
    end

  private

    # Writing to the seed file. Takes in file handler and array of hashes with
    # `header` and `content` keys
    def write_file_content(path, data)
      ::File.open(::File.join(path), 'wb') do |f|
        data.each do |item|
          f.write("[#{item[:header]}]\n#{item[:content]}")
          # adds a newline between items if not already there
          # makes sure last item does not have a newline
          if data.last != item && !item[:content].to_s.end_with?("\n")
            f.write("\n")
          end
        end
      end
    end

    def prepare_folder!(path)
      FileUtils.rm_rf(path)
      FileUtils.mkdir_p(path)
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/view_hooks.rb">
# frozen_string_literal: true

# This mechanism is used by 3rd party plugins.
# Normally you'd use partials from your own app
module ComfortableMediaSurfer::ViewHooks
  # Array of declared hooks
  def self.hooks
    @hooks ||= {}
  end

  # Renders hook content
  def self.render(name, template, options = {})
    out = ''
    (hooks[name.to_sym] || []).each do |path|
      out += template.render({ partial: path.first }.merge(options))
    end
    out.html_safe
  end

  # Will declare a partial that will be rendered for this hook
  # Example:
  # ComfortableMediaSurfer::ViewHooks.add(:navigation, 'shared/navigation')
  def self.add(name, partial_path, position = 0)
    hooks[name.to_sym] ||= []
    hooks[name.to_sym] << [partial_path, position]
    hooks[name.to_sym].sort_by!(&:last)
  end

  # Removing previously declared hook
  def self.remove(name)
    hooks.delete(name)
  end
end
</file>

<file path="lib/generators/comfy/cms/assets_generator.rb">
# frozen_string_literal: true

module Comfy
  module Generators
    module Cms
      class AssetsGenerator < Rails::Generators::Base
        source_root File.expand_path(File.join(File.dirname(__FILE__), '../../../../app/assets'))

        def generate_assets
          directory 'javascripts/comfy/admin/cms', 'app/assets/javascripts/comfy/admin/cms'
          directory 'stylesheets/comfy/admin/cms', 'app/assets/stylesheets/comfy/admin/cms'
        end
      end
    end
  end
end
</file>

<file path="lib/generators/comfy/cms/cms_generator.rb">
# frozen_string_literal: true

require 'rails/generators/active_record'

module Comfy
  module Generators
    class CmsGenerator < Rails::Generators::Base
      include Rails::Generators::Migration
      include Thor::Actions

      source_root File.expand_path('../../../..', __dir__)

      def generate_migration
        destination   = File.expand_path('db/migrate/01_create_cms.rb', destination_root)
        migration_dir = File.dirname(destination)
        destination   = self.class.migration_exists?(migration_dir, 'create_cms')

        if destination
          puts "\e[0m\e[31mFound existing cms_create.rb migration. Remove it if you want to regenerate.\e[0m"
        else
          migration_template 'db/migrate/01_create_cms.rb', 'db/migrate/create_cms.rb'
        end
      end

      def generate_initializer
        copy_file 'config/initializers/comfortable_media_surfer.rb',
                  'config/initializers/comfortable_media_surfer.rb'
      end

      def generate_railties_order
        application <<~RUBY
          # Ensuring that ActiveStorage routes are loaded before Comfy's globbing
          # route. Without this file serving routes are inaccessible.
          config.railties_order = [ActiveStorage::Engine, :main_app, :all]
        RUBY
      end

      def generate_routing
        route_string = <<~RUBY
          comfy_route :cms_admin, path: "/admin"
          # Ensure that this route is defined last
          comfy_route :cms, path: "/"
        RUBY
        route route_string
      end

      def generate_cms_seeds
        directory 'db/cms_seeds', 'db/cms_seeds'
      end

      def generate_assets
        copy_file 'app/assets/javascripts/comfy/admin/cms/custom.js',
                  'app/assets/javascripts/comfy/admin/cms/custom.js'
        copy_file 'app/assets/stylesheets/comfy/admin/cms/custom.sass',
                  'app/assets/stylesheets/comfy/admin/cms/custom.sass'
      end

      def show_readme
        readme 'lib/generators/comfy/cms/README'
      end

      def self.next_migration_number(dirname)
        ActiveRecord::Generators::Base.next_migration_number(dirname)
      end
    end
  end
end
</file>

<file path="lib/generators/comfy/cms/controllers_generator.rb">
# frozen_string_literal: true

module Comfy
  module Generators
    module Cms
      class ControllersGenerator < Rails::Generators::Base
        source_root File.expand_path(File.join(File.dirname(__FILE__), '../../../../app/controllers'))

        def generate_controllers
          directory 'comfy', 'app/controllers/comfy'
        end
      end
    end
  end
end
</file>

<file path="lib/generators/comfy/cms/models_generator.rb">
# frozen_string_literal: true

module Comfy
  module Generators
    module Cms
      class ModelsGenerator < Rails::Generators::Base
        source_root File.expand_path(File.join(File.dirname(__FILE__), '../../../../app/models'))

        def generate_models
          directory 'comfy', 'app/models/comfy'
        end
      end
    end
  end
end
</file>

<file path="lib/generators/comfy/cms/README">
____                 __            _        _     _      
   / ___|___  _ __ ___  / _| ___  _ __| |_ __ _| |__ | | ___ 
  | |   / _ \| '_ ` _ \| |_ / _ \| '__| __/ _` | '_ \| |/ _ \
  | |__| (_) | | | | | |  _| (_) | |  | || (_| | |_) | |  __/
   \____\___/|_| |_| |_|_|  \___/|_|   \__\__,_|_.__/|_|\___|
  __  __          _ _         ____              __
  |  \/  | ___  __| (_) __ _  / ___| _   _ _ __ / _| ___ _ __
  | |\/| |/ _ \/ _` | |/ _` | \___ \| | | | '__| |_ / _ \ '__|
  | |  | |  __/ (_| | | (_| |  ___) | |_| | |  |  _|  __/ |
  |_|  |_|\___|\__,_|_|\__,_| |____/ \__,_|_|  |_|  \___|_|

You are almost done.  Don't forget to:

  [Optional] - If you want to store files in your CMS with ActiveStorage: `rails active_storage:install`
  [Mandatory] - Create the tables in your database: `rails db:migrate`

Then go to http://your-rails-app/admin to start adding content.

Default username and password are: user / pass
Change these defaults in config/initializers/occams.rb

----------------------------
IF YOU ARE ON RAILS 6.x
----------------------------
and encounter errors referencing webpacker: 
ensure that you have nvm installed, and then run
- nvm install 13.7 && nvm use 13.7
- rails webpacker:install
</file>

<file path="lib/generators/comfy/cms/views_generator.rb">
# frozen_string_literal: true

module Comfy
  module Generators
    module Cms
      class ViewsGenerator < Rails::Generators::Base
        source_root File.expand_path(File.join(File.dirname(__FILE__), '../../../../app/views'))

        def generate_views
          directory 'comfy', 'app/views/comfy'
        end
      end
    end
  end
end
</file>

<file path="lib/generators/comfy/scaffold/templates/tests/controller.rb.tt">
require_relative '../../test_helper'

class Admin::<%= class_name.pluralize %>ControllerTest < ActionDispatch::IntegrationTest

  setup do
    @<%= file_name %> = <%= file_name.pluralize %>(:default)
  end

  # Vanilla CMS has BasicAuth, so we need to send that with each request.
  # Change this to fit your app's authentication strategy.
  # Move this to test_helper.rb
  def r(verb, path, options = {})
    headers = options[:headers] || {}
    headers['HTTP_AUTHORIZATION'] =
      ActionController::HttpAuthentication::Basic.encode_credentials(
        ComfortableMediaSurfer::AccessControl::AdminAuthentication.username,
        ComfortableMediaSurfer::AccessControl::AdminAuthentication.password
      )
    options.merge!(headers: headers)
    send(verb, path, options)
  end

  def test_get_index
    r :get, admin_<%= file_name.pluralize %>_path
    assert_response :success
    assert assigns(:<%= file_name.pluralize %>)
    assert_template :index
  end

  def test_get_show
    r :get, admin_<%= file_name %>_path(@<%= file_name %>)
    assert_response :success
    assert assigns(:<%= file_name %>)
    assert_template :show
  end

  def test_get_show_failure
    r :get, admin_<%= file_name %>_path('invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal '<%= class_name.titleize %> not found', flash[:danger]
  end

  def test_get_new
    r :get, new_admin_<%= file_name %>_path
    assert_response :success
    assert assigns(:<%= file_name %>)
    assert_template :new
    assert_select "form[action='/admin/<%= file_name.pluralize %>']"
  end

  def test_get_edit
    r :get, edit_admin_<%= file_name %>_path(@<%= file_name %>)
    assert_response :success
    assert assigns(:<%= file_name %>)
    assert_template :edit
    assert_select "form[action='/admin/<%= file_name.pluralize %>/#{@<%= file_name %>.id}']"
  end

  def test_creation
    assert_difference '<%= class_name %>.count' do
      r :post, admin_<%= file_name.pluralize %>_path, params: {<%= file_name %>: {
      <%- model_attrs.each do |attr| -%>
        <%= attr.name %>: 'test <%= attr.name %>',
      <%- end -%>
      }}
      <%= file_name %> = <%= class_name %>.last
      assert_response :redirect
      assert_redirected_to action: :show, id: <%= file_name %>
      assert_equal '<%= class_name.titleize %> created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference '<%= class_name %>.count' do
      r :post, admin_<%= file_name.pluralize %>_path, params: {<%= file_name %>: { }}
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create <%= class_name.titleize %>', flash[:danger]
    end
  end

  def test_update
    r :put, admin_<%= file_name %>_path(@<%= file_name %>), params: {<%= file_name %>: {
    <%- if attr = model_attrs.first -%>
      <%= attr.name %>: 'Updated'
    <%- end -%>
    }}
    assert_response :redirect
    assert_redirected_to action: :show, id: @<%= file_name %>
    assert_equal '<%= class_name.titleize %> updated', flash[:success]
    @<%= file_name %>.reload
    assert_equal 'Updated', @<%= file_name %>.<%= attr.try(:name) || 'attribute' %>
  end

  def test_update_failure
    r :put, admin_<%= file_name %>_path(@<%= file_name %>), params: {<%= file_name %>: {
      <%= attr.try(:name) || 'attribute' %>: ''
    }}
    assert_response :success
    assert_template :edit
    assert_equal 'Failed to update <%= class_name.titleize %>', flash[:danger]
    @<%= file_name %>.reload
    refute_equal '', @<%= file_name %>.<%= attr.try(:name) || 'attribute' %>
  end

  def test_destroy
    assert_difference '<%= class_name %>.count', -1 do
      r :delete, admin_<%= file_name %>_path(@<%= file_name %>)
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal '<%= class_name.titleize %> deleted', flash[:success]
    end
  end
end
</file>

<file path="lib/generators/comfy/scaffold/templates/controller.rb.tt">
class Admin::<%= class_name.pluralize %>Controller < Comfy::Admin::BaseController

  before_action :build_<%= file_name %>,  only: [:new, :create]
  before_action :load_<%= file_name %>,   only: [:show, :edit, :update, :destroy]

  def index
    @<%= file_name.pluralize %> = <%= class_name %>.page(params[:page])
  end

  def show
    render
  end

  def new
    render
  end

  def edit
    render
  end

  def create
    @<%= file_name %>.save!
    flash[:success] = '<%= class_name.titleize %> created'
    redirect_to action: :show, id: @<%= file_name %>
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = 'Failed to create <%= class_name.titleize %>'
    render action: :new
  end

  def update
    @<%= file_name %>.update!(<%= file_name %>_params)
    flash[:success] = '<%= class_name.titleize %> updated'
    redirect_to action: :show, id: @<%= file_name %>
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = 'Failed to update <%= class_name.titleize %>'
    render action: :edit
  end

  def destroy
    @<%= file_name %>.destroy
    flash[:success] = '<%= class_name.titleize %> deleted'
    redirect_to action: :index
  end

protected

  def build_<%= file_name %>
    @<%= file_name %> = <%= class_name %>.new(<%= file_name %>_params)
  end

  def load_<%= file_name %>
    @<%= file_name %> = <%= class_name %>.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = '<%= class_name.titleize %> not found'
    redirect_to action: :index
  end

  def <%= file_name %>_params
    params.fetch(:<%= file_name %>, {}).permit(<%= model_attrs.collect{|attr| ":#{attr.name}"}.join(', ') %>)
  end
end
</file>

<file path="lib/tasks/cms_assets.rake">
# frozen_string_literal: true

namespace :comfy do
  desc 'Compile SCSS and JS assets for propshaft.'
  task :compile_assets do
    puts 'Compiling assets...'
    dir = File.expand_path("#{__dir__}/..")
    Dir.chdir(dir) do
      unless system('npm install')
        puts 'Error: Failed to install npm packages.'
        exit(-1)
      end
      unless system('npm run build && npm run build:css')
        puts 'Error: Failed to compile assets'
        exit(-1)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer.rb">
# frozen_string_literal: true

# Loading engine only if this is not a standalone installation
unless defined? ComfortableMediaSurfer::Application
  require_relative 'comfortable_media_surfer/engine'
end

require_relative 'comfortable_media_surfer/version'
require_relative 'comfortable_media_surfer/error'
require_relative 'comfortable_media_surfer/configuration'
require_relative 'comfortable_media_surfer/routing'
require_relative 'comfortable_media_surfer/access_control/admin_authentication'
require_relative 'comfortable_media_surfer/access_control/admin_authorization'
require_relative 'comfortable_media_surfer/access_control/public_authentication'
require_relative 'comfortable_media_surfer/access_control/public_authorization'
require_relative 'comfortable_media_surfer/render_methods'
require_relative 'comfortable_media_surfer/view_hooks'
require_relative 'comfortable_media_surfer/form_builder'
require_relative 'comfortable_media_surfer/seeds'
require_relative 'comfortable_media_surfer/seeds/layout/importer'
require_relative 'comfortable_media_surfer/seeds/layout/exporter'
require_relative 'comfortable_media_surfer/seeds/page/importer'
require_relative 'comfortable_media_surfer/seeds/page/exporter'
require_relative 'comfortable_media_surfer/seeds/snippet/importer'
require_relative 'comfortable_media_surfer/seeds/snippet/exporter'
require_relative 'comfortable_media_surfer/seeds/file/importer'
require_relative 'comfortable_media_surfer/seeds/file/exporter'
require_relative 'comfortable_media_surfer/content'
require_relative 'comfortable_media_surfer/extensions'

module ComfortableMediaSurfer
  Version = ComfortableMediaSurfer::VERSION

  class << self
    attr_writer :logger

    # Modify CMS configuration
    # Example:
    #   ComfortableMediaSurfer.configure do |config|
    #     config.cms_title = 'ComfortableMediaSurfer'
    #   end
    def configure
      yield configuration
    end

    # Accessor for ComfortableMediaSurfer::Configuration
    def configuration
      @configuration ||= Configuration.new
    end
    alias config configuration

    def logger
      @logger ||= Rails.logger
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/revisions/layout_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../../test_helper'

class Comfy::Admin::Cms::Revisions::LayoutControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site     = comfy_cms_sites(:default)
    @layout   = comfy_cms_layouts(:default)
    @revision = comfy_cms_revisions(:layout)
  end

  def test_get_index
    r :get, comfy_admin_cms_site_layout_revisions_path(@site, @layout)
    assert_response :redirect
    assert_redirected_to action: :show, id: @revision
  end

  def test_get_index_with_no_revisions
    Comfy::Cms::Revision.delete_all
    r :get, comfy_admin_cms_site_layout_revisions_path(@site, @layout)
    assert_response :redirect
    assert_redirected_to edit_comfy_admin_cms_site_layout_path(@site, @layout)
  end

  def test_get_show
    r :get, comfy_admin_cms_site_layout_revision_path(@site, @layout, @revision)
    assert_response :success
    assert assigns(:record)
    assert assigns(:revision)
    assert assigns(:record).is_a?(Comfy::Cms::Layout)
    assert_template :show
  end

  def test_get_show_for_invalid_record
    r :get, comfy_admin_cms_site_layout_revision_path(@site, 'invalid', @revision)
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_layouts_path(@site)
    assert_equal 'Record Not Found', flash[:danger]
  end

  def test_get_show_failure
    r :get, comfy_admin_cms_site_layout_revision_path(@site, @layout, 'invalid')
    assert_response :redirect
    assert assigns(:record)
    assert_redirected_to edit_comfy_admin_cms_site_layout_path(@site, assigns(:record))
    assert_equal 'Revision Not Found', flash[:danger]
  end

  def test_revert
    assert_difference -> { @layout.revisions.count } do
      r :patch, revert_comfy_admin_cms_site_layout_revision_path(@site, @layout, @revision)
      assert_response :redirect
      assert_redirected_to edit_comfy_admin_cms_site_layout_path(@site, @layout)
      assert_equal 'Content Reverted', flash[:success]

      @layout.reload
      assert_equal 'revision {{cms:fragment content}}', @layout.content
      assert_equal 'revision css', @layout.css
      assert_equal 'revision js', @layout.js
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/revisions/page_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../../test_helper'

class Comfy::Admin::Cms::Revisions::PageControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site     = comfy_cms_sites(:default)
    @page     = comfy_cms_pages(:default)
    @revision = comfy_cms_revisions(:page)
  end

  def test_get_index
    r :get, comfy_admin_cms_site_page_revisions_path(@site, @page)
    assert_response :redirect
    assert_redirected_to action: :show, id: @revision
  end

  def test_get_index_with_no_revisions
    Comfy::Cms::Revision.delete_all
    r :get, comfy_admin_cms_site_page_revisions_path(@site, @page)
    assert_response :redirect
    assert_redirected_to edit_comfy_admin_cms_site_page_path(@site, @page)
  end

  def test_get_show
    r :get, comfy_admin_cms_site_page_revision_path(@site, @page, @revision)
    assert_response :success
    assert assigns(:record)
    assert assigns(:revision)
    assert assigns(:record).is_a?(Comfy::Cms::Page)
    assert_template :show
  end

  def test_get_show_for_invalid_record
    r :get, comfy_admin_cms_site_page_revision_path(@site, 'invalid', @revision)
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_pages_path(@site)
    assert_equal 'Record Not Found', flash[:danger]
  end

  def test_get_show_failure
    r :get, comfy_admin_cms_site_page_revision_path(@site, @page, 'invalid')
    assert_response :redirect
    assert assigns(:record)
    assert_redirected_to edit_comfy_admin_cms_site_page_path(@site, assigns(:record))
    assert_equal 'Revision Not Found', flash[:danger]
  end

  def test_revert
    assert_difference -> { @page.revisions.count } do
      r :patch, revert_comfy_admin_cms_site_page_revision_path(@site, @page, @revision)
      assert_response :redirect
      assert_redirected_to edit_comfy_admin_cms_site_page_path(@site, @page)
      assert_equal 'Content Reverted', flash[:success]

      @page.reload

      assert_equal [
        { identifier: 'boolean',
          tag: 'checkbox',
          content: nil,
          datetime: nil,
          boolean: true },
        { identifier: 'file',
          tag: 'file',
          content: nil,
          datetime: nil,
          boolean: false },
        { identifier: 'datetime',
          tag: 'datetime',
          content: nil,
          datetime: comfy_cms_fragments(:datetime).datetime,
          boolean: false },
        { identifier: 'content',
          tag: 'text',
          content: 'old content',
          datetime: nil,
          boolean: false },
        { identifier: 'title',
          tag: 'text',
          content: 'old title',
          datetime: nil,
          boolean: false }
      ], @page.fragments_attributes
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/revisions/snippet_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../../test_helper'

class Comfy::Admin::Cms::Revisions::SnippetControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site     = comfy_cms_sites(:default)
    @snippet  = comfy_cms_snippets(:default)
    @revision = comfy_cms_revisions(:snippet)
  end

  def test_get_index
    r :get, comfy_admin_cms_site_snippet_revisions_path(@site, @snippet)
    assert_response :redirect
    assert_redirected_to action: :show, id: @revision
  end

  def test_get_index_with_no_revisions
    Comfy::Cms::Revision.delete_all
    r :get, comfy_admin_cms_site_snippet_revisions_path(@site, @snippet)
    assert_response :redirect
    assert_redirected_to edit_comfy_admin_cms_site_snippet_path(@site, @snippet)
  end

  def test_get_show
    r :get, comfy_admin_cms_site_snippet_revision_path(@site, @snippet, @revision)
    assert_response :success
    assert assigns(:record)
    assert assigns(:revision)
    assert assigns(:record).is_a?(Comfy::Cms::Snippet)
    assert_template :show
  end

  def test_get_show_for_invalid_record
    r :get, comfy_admin_cms_site_snippet_revision_path(@site, 'invalid', @revision)
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_snippets_path(@site)
    assert_equal 'Record Not Found', flash[:danger]
  end

  def test_get_show_failure
    r :get, comfy_admin_cms_site_snippet_revision_path(@site, @snippet, 'invalid')
    assert_response :redirect
    assert assigns(:record)
    assert_redirected_to edit_comfy_admin_cms_site_snippet_path(@site, assigns(:record))
    assert_equal 'Revision Not Found', flash[:danger]
  end

  def test_revert
    assert_difference -> { @snippet.revisions.count } do
      r :patch, revert_comfy_admin_cms_site_snippet_revision_path(@site, @snippet, @revision)
      assert_response :redirect
      assert_redirected_to edit_comfy_admin_cms_site_snippet_path(@site, @snippet)
      assert_equal 'Content Reverted', flash[:success]

      @snippet.reload
      assert_equal 'revision content', @snippet.content
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/base_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::BaseControllerTest < ActionDispatch::IntegrationTest
  def test_get_jump
    r :get, comfy_admin_cms_path
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_pages_path(comfy_cms_sites(:default))
  end

  def test_get_jump_with_redirect_setting
    ComfortableMediaSurfer.config.admin_route_redirect = '/cms-admin/sites'
    r :get, comfy_admin_cms_path
    assert_response :redirect
    assert_redirected_to '/cms-admin/sites'
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/categories_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::CategoriesControllerTest < ActionDispatch::IntegrationTest
  def setup
    @site = comfy_cms_sites(:default)
  end

  def test_get_edit
    r :get, edit_comfy_admin_cms_site_category_path(site_id: @site, id: comfy_cms_categories(:default)), xhr: true
    assert_response :success
    assert_template :edit
    assert assigns(:category)
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_category_path(site_id: @site, id: 'invalid'), xhr: true
    assert_response :success
    assert response.body.blank?
  end

  def test_creation
    assert_difference 'Comfy::Cms::Category.count' do
      r :post, comfy_admin_cms_site_categories_path(site_id: @site), xhr: true, params: { category: {
        label: 'Test Label',
        categorized_type: 'Comfy::Cms::Snippet'
      } }
      assert_response :success
      assert_template :create
      assert assigns(:category)
    end
  end

  def test_creation_failure
    assert_no_difference 'Comfy::Cms::Category.count' do
      r :post, comfy_admin_cms_site_categories_path(site_id: @site), xhr: true, params: { category: {} }
      assert_response :success
      assert response.body.blank?
    end
  end

  def test_update
    category = comfy_cms_categories(:default)
    r :put, comfy_admin_cms_site_category_path(site_id: @site, id: category), xhr: true, params: { category: {
      label: 'Updated Label'
    } }
    assert_response :success
    assert_template :update
    assert assigns(:category)
    category.reload
    assert_equal 'Updated Label', category.label
  end

  def test_update_failure
    category = comfy_cms_categories(:default)
    r :put, comfy_admin_cms_site_category_path(site_id: @site, id: category), xhr: true, params: { category: {
      label: ''
    } }
    assert_response :success
    assert response.body.blank?
    category.reload
    assert_not_equal '', category.label
  end

  def test_destroy
    assert_difference 'Comfy::Cms::Category.count', -1 do
      r :delete, comfy_admin_cms_site_category_path(site_id: @site, id: comfy_cms_categories(:default)), xhr: true
      assert assigns(:category)
      assert_response :success
      assert_template :destroy
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/layouts_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::LayoutsControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_get_index
    @site.layouts.create!(identifier: 'other')

    r :get, comfy_admin_cms_site_layouts_path(site_id: @site)
    assert_response :success
    assert assigns(:layouts)
    assert_template :index
  end

  def test_get_index_with_no_layouts
    Comfy::Cms::Layout.delete_all
    r :get, comfy_admin_cms_site_layouts_path(site_id: @site)
    assert_response :redirect
    assert_redirected_to action: :new
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_layout_path(site_id: @site)
    assert_response :success
    assert assigns(:layout)
    assert_equal '{{ cms:wysiwyg content }}', assigns(:layout).content
    assert_template :new
    assert_select "form[action='/admin/sites/#{@site.id}/layouts']"
  end

  def test_get_new_with_parent
    layout = comfy_cms_layouts(:default)
    layout.update_column(:app_layout, 'application')
    r :get, new_comfy_admin_cms_site_layout_path(site_id: @site), params: { parent_id: layout.id }
    assert_response :success
    assert_equal layout.app_layout, assigns(:layout).app_layout
  end

  def test_get_edit
    layout = comfy_cms_layouts(:default)
    r :get, edit_comfy_admin_cms_site_layout_path(site_id: @site, id: layout)
    assert_response :success
    assert assigns(:layout)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{layout.site.id}/layouts/#{layout.id}']"
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_layout_path(site_id: @site, id: 'invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'Layout not found', flash[:danger]
  end

  def test_creation
    assert_difference 'Comfy::Cms::Layout.count' do
      r :post, comfy_admin_cms_site_layouts_path(site_id: @site), params: { layout: {
        label: 'Test Layout',
        identifier: 'test',
        content: 'Test {{cms:page:content}}'
      } }
      assert_response :redirect
      layout = Comfy::Cms::Layout.last
      assert_equal @site, layout.site
      assert_redirected_to action: :edit, site_id: layout.site, id: layout
      assert_equal 'Layout created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference 'Comfy::Cms::Layout.count' do
      r :post, comfy_admin_cms_site_layouts_path(site_id: @site), params: { layout: {} }
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create layout', flash[:danger]
    end
  end

  def test_update
    layout = comfy_cms_layouts(:default)
    r :put, comfy_admin_cms_site_layout_path(site_id: @site, id: layout), params: { layout: {
      label: 'New Label',
      content: 'New {{cms:page:content}}'
    } }
    assert_response :redirect
    assert_redirected_to action: :edit, site_id: layout.site, id: layout
    assert_equal 'Layout updated', flash[:success]
    layout.reload
    assert_equal 'New Label', layout.label
    assert_equal 'New {{cms:page:content}}', layout.content
  end

  def test_update_failure
    layout = comfy_cms_layouts(:default)
    r :put, comfy_admin_cms_site_layout_path(site_id: @site, id: layout), params: { layout: {
      identifier: ''
    } }
    assert_response :success
    assert_template :edit
    layout.reload
    assert_not_equal '', layout.identifier
    assert_equal 'Failed to update layout', flash[:danger]
  end

  def test_destroy
    assert_difference 'Comfy::Cms::Layout.count', -1 do
      r :delete, comfy_admin_cms_site_layout_path(site_id: @site, id: comfy_cms_layouts(:default))
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal 'Layout deleted', flash[:success]
    end
  end

  def test_reorder
    layout_one = comfy_cms_layouts(:default)
    layout_two = @site.layouts.create!(
      label: 'test',
      identifier: 'test'
    )
    assert_equal 0, layout_one.position
    assert_equal 1, layout_two.position

    r :put, reorder_comfy_admin_cms_site_layouts_path(site_id: @site), params: {
      order: [layout_two.id, layout_one.id]
    }
    assert_response :success
    layout_one.reload
    layout_two.reload

    assert_equal 1, layout_one.position
    assert_equal 0, layout_two.position
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/sites_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::SitesControllerTest < ActionDispatch::IntegrationTest
  def test_get_index
    Comfy::Cms::Site.create!(hostname: 'other.test')

    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert assigns(:sites)
    assert_template :index
  end

  def test_get_index_with_no_sites
    Comfy::Cms::Site.delete_all
    r :get, comfy_admin_cms_sites_path
    assert_response :redirect
    assert_redirected_to new_comfy_admin_cms_site_path
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_path
    assert_response :success
    assert assigns(:site)
    assert_equal 'www.example.com', assigns(:site).hostname
    assert_template :new
    assert_select "form[action='/admin/sites']"
  end

  def test_get_edit
    site = comfy_cms_sites(:default)
    r :get, edit_comfy_admin_cms_site_path(id: site)
    assert_response :success
    assert assigns(:site)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{site.id}']"
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_path(id: 'invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'Site not found', flash[:danger]
  end

  def test_create
    assert_difference 'Comfy::Cms::Site.count' do
      r :post, comfy_admin_cms_sites_path, params: { site: {
        label: 'Test Site',
        identifier: 'test-site',
        hostname: 'test.site.local'
      } }
      assert_response :redirect
      site = Comfy::Cms::Site.last
      assert_redirected_to comfy_admin_cms_site_layouts_path(site_id: site)
      assert_equal 'Site created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference 'Comfy::Cms::Site.count' do
      r :post, comfy_admin_cms_sites_path, params: { site: {} }
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create site', flash[:danger]
    end
  end

  def test_update
    site = comfy_cms_sites(:default)
    r :put, comfy_admin_cms_site_path(id: site), params: { site: {
      label: 'New Site',
      hostname: 'new.site.local',
      locale: 'es'
    } }
    assert_response :redirect
    assert_redirected_to action: :edit, id: site
    assert_equal 'Site updated', flash[:success]
    site.reload
    assert_equal 'New Site', site.label
    assert_equal 'new.site.local', site.hostname
    assert_equal 'es', site.locale
  end

  def test_update_failure
    site = comfy_cms_sites(:default)
    r :put, comfy_admin_cms_site_path(id: site), params: { site: {
      hostname: ''
    } }
    assert_response :success
    assert_template :edit
    site.reload
    assert_not_equal '', site.hostname
    assert_equal 'Failed to update site', flash[:danger]
  end

  def test_destroy
    assert_difference 'Comfy::Cms::Site.count', -1 do
      r :delete, comfy_admin_cms_site_path(id: comfy_cms_sites(:default))
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal 'Site deleted', flash[:success]
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/snippets_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::SnippetsControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site     = comfy_cms_sites(:default)
    @snippet  = comfy_cms_snippets(:default)
  end

  def test_get_index
    @site.snippets.create!(identifier: 'other')

    r :get, comfy_admin_cms_site_snippets_path(site_id: @site)
    assert_response :success
    assert assigns(:snippets)
    assert_template :index
  end

  def test_get_index_with_no_snippets
    Comfy::Cms::Snippet.delete_all
    r :get, comfy_admin_cms_site_snippets_path(site_id: @site)
    assert_response :redirect
    assert_redirected_to action: :new
  end

  def test_get_index_with_category
    category = @site.categories.create!(
      label: 'Test Category',
      categorized_type: 'Comfy::Cms::Snippet'
    )
    category.categorizations.create!(categorized: @snippet)

    r :get, comfy_admin_cms_site_snippets_path(site_id: @site), params: { categories: category.label }
    assert_response :success
    assert assigns(:snippets)
    assert_equal 1, assigns(:snippets).count
    assert assigns(:snippets).first.categories.member? category
  end

  def test_get_index_with_category_invalid
    r :get, comfy_admin_cms_site_snippets_path(site_id: @site), params: { categories: 'invalid' }
    assert_response :success
    assert assigns(:snippets)
    assert_equal 0, assigns(:snippets).count
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_snippet_path(site_id: @site)
    assert_response :success
    assert assigns(:snippet)
    assert_template :new
    assert_select "form[action='/admin/sites/#{@site.id}/snippets']"
  end

  def test_get_edit
    r :get, edit_comfy_admin_cms_site_snippet_path(site_id: @site, id: @snippet)
    assert_response :success
    assert assigns(:snippet)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{@site.id}/snippets/#{@snippet.id}']"
  end

  def test_get_edit_with_params
    r :get, edit_comfy_admin_cms_site_snippet_path(site_id: @site, id: @snippet), params: { snippet: {
      label: 'New Label'
    } }
    assert_response :success
    assert assigns(:snippet)
    assert_equal 'New Label', assigns(:snippet).label
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_snippet_path(site_id: @site, id: 'invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'Snippet not found', flash[:danger]
  end

  def test_create
    assert_difference 'Comfy::Cms::Snippet.count' do
      r :post, comfy_admin_cms_site_snippets_path(site_id: @site), params: { snippet: {
        label: 'Test Snippet',
        identifier: 'test-snippet',
        content: 'Test Content'
      } }
      assert_response :redirect
      snippet = Comfy::Cms::Snippet.last
      assert_equal @site, snippet.site
      assert_redirected_to action: :edit, id: snippet
      assert_equal 'Snippet created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference 'Comfy::Cms::Snippet.count' do
      r :post, comfy_admin_cms_site_snippets_path(site_id: @site), params: { snippet: {} }
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create snippet', flash[:danger]
    end
  end

  def test_update
    r :put, comfy_admin_cms_site_snippet_path(site_id: @site, id: @snippet), params: { snippet: {
      label: 'New-Snippet',
      content: 'New Content'
    } }
    assert_response :redirect
    assert_redirected_to action: :edit, site_id: @site, id: @snippet
    assert_equal 'Snippet updated', flash[:success]
    @snippet.reload
    assert_equal 'New-Snippet', @snippet.label
    assert_equal 'New Content', @snippet.content
  end

  def test_update_failure
    r :put, comfy_admin_cms_site_snippet_path(site_id: @site, id: @snippet), params: { snippet: {
      identifier: ''
    } }
    assert_response :success
    assert_template :edit
    @snippet.reload
    assert_not_equal '', @snippet.identifier
    assert_equal 'Failed to update snippet', flash[:danger]
  end

  def test_destroy
    assert_difference 'Comfy::Cms::Snippet.count', -1 do
      r :delete, comfy_admin_cms_site_snippet_path(site_id: @site, id: @snippet)
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal 'Snippet deleted', flash[:success]
    end
  end

  def test_reorder
    snippet_one = @snippet
    snippet_two = @site.snippets.create!(
      label: 'test',
      identifier: 'test'
    )
    assert_equal 0, snippet_one.position
    assert_equal 2, snippet_two.position

    r :put, reorder_comfy_admin_cms_site_snippets_path(site_id: @site), params: {
      order: [snippet_two.id, snippet_one.id]
    }
    assert_response :success
    snippet_one.reload
    snippet_two.reload

    assert_equal 1, snippet_one.position
    assert_equal 0, snippet_two.position
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/translations_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::TranslationsControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site         = comfy_cms_sites(:default)
    @layout       = comfy_cms_layouts(:default)
    @page         = comfy_cms_pages(:default)
    @translation  = comfy_cms_translations(:default)
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_page_translation_path(@site, @page)
    assert_response :success
    assert assigns(:translation)
    assert_template :new
    assert_select "form[action='/admin/sites/#{@site.id}/pages/#{@page.id}/translations']"
  end

  def test_get_new_with_field_wysiwyg
    @layout.update_column(:content, '{{cms:wysiwyg test}}')
    r :get, new_comfy_admin_cms_site_page_translation_path(@site, @page)
    assert_response :success
    assert_select "textarea[name='translation[fragments_attributes][0][content]'][data-cms-rich-text]"
    assert_select "input[type='hidden'][name='translation[fragments_attributes][0][identifier]'][value='test']"
    assert_select "input[type='hidden'][name='translation[fragments_attributes][0][tag]'][value='wysiwyg']"
  end

  def test_get_edit
    r :get, edit_comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
    assert_response :success
    assert assigns(:translation)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{@site.id}/pages/#{@page.id}/translations/#{@translation.id}']"
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_page_translation_path(@site, @page, 'invalid')
    assert_response :redirect
    assert_redirected_to edit_comfy_admin_cms_site_page_path(@site, @page)
    assert_equal 'Translation not found', flash[:danger]
  end

  def test_create
    assert_difference -> { Comfy::Cms::Translation.count } do
      path = comfy_admin_cms_site_page_translations_path(@site, @page)
      r :post, path, params: { translation: {
        locale: 'es',
        label: 'Test Translation'
      } }
      assert_response :redirect
      translation = Comfy::Cms::Translation.last
      assert_equal @page, translation.page
      assert_redirected_to action: :edit, id: translation
      assert_equal 'Translation created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference -> { Comfy::Cms::Translation.count } do
      path = comfy_admin_cms_site_page_translations_path(@site, @page)
      r :post, path, params: { translation: {} }
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create translation', flash[:danger]
    end
  end

  def test_update
    path = comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
    r :put, path, params: { translation: {
      label: 'Updated Translation'
    } }
    assert_response :redirect
    assert_redirected_to action: :edit, site_id: @site, page_id: @page, id: @translation
    assert_equal 'Translation updated', flash[:success]
    @translation.reload
    assert_equal 'Updated Translation', @translation.label
  end

  def test_update_failure
    path = comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
    r :put, path, params: { translation: {
      locale: ''
    } }
    assert_response :success
    assert_template :edit
    @translation.reload
    assert_not_equal '', @translation.locale
    assert_equal 'Failed to update translation', flash[:danger]
  end

  def test_destroy
    assert_difference(-> { Comfy::Cms::Translation.count }, -1) do
      r :delete, comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
      assert_response :redirect
      assert_redirected_to edit_comfy_admin_cms_site_page_path(@site, @page)
      assert_equal 'Translation deleted', flash[:success]
    end
  end

  def test_get_form_fragments
    path = form_fragments_comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
    r :get, path, xhr: true, params: {
      layout_id: comfy_cms_layouts(:nested).id
    }
    assert_response :success
    assert assigns(:translation)
    assert_equal 2, assigns(:translation).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'

    r :get, path, xhr: true, params: {
      layout_id: @layout.id
    }
    assert_response :success
    assert assigns(:translation)
    assert_equal 1, assigns(:translation).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'
  end

  def test_get_form_fragments_for_new_translation
    path = form_fragments_comfy_admin_cms_site_page_translation_path(@site, @page, 0)
    r :get, path, xhr: true, params: {
      layout_id: @layout.id
    }
    assert_response :success
    assert assigns(:translation)
    assert_equal 1, assigns(:translation).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'
  end

  def test_creation_preview
    assert_no_difference -> { Comfy::Cms::Translation.count } do
      r :post, comfy_admin_cms_site_page_translations_path(@site, @page), params: {
        preview: 'Preview',
        translation: {
          label: 'Test Page',
          layout_id: @layout.id,
          locale: 'fr',
          fragments_attributes: [
            { identifier: 'content',
              content: 'preview content' }
          ]
        }
      }
      assert_response :success
      assert_match %r{preview content}, response.body
      assert_equal 'text/html; charset=utf-8', response.content_type
      assert_equal @site, assigns(:cms_site)
      assert_equal @layout, assigns(:cms_layout)
      assert assigns(:cms_page)
      assert assigns(:translation).new_record?

      assert_equal :fr, I18n.locale
    end
  end

  def test_update_preview
    assert_no_difference -> { Comfy::Cms::Page.count } do
      r :put, comfy_admin_cms_site_page_translation_path(@site, @page, @translation), params: {
        preview: 'Preview',
        translation: {
          label: 'Updated Label',
          fragments_attributes: [
            { identifier: 'content',
              content: 'preview content' }
          ]
        }
      }
      assert_response :success
      assert_match %r{preview content}, response.body
      @translation.reload
      assert_not_equal 'Updated Label', @page.label

      assert_equal @page.site,    assigns(:cms_site)
      assert_equal @page.layout,  assigns(:cms_layout)
      assert_equal @page,         assigns(:cms_page)
    end
  end
end
</file>

<file path="test/controllers/comfy/cms/assets_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class Comfy::Cms::AssetsControllerTest < ActionDispatch::IntegrationTest
  def setup
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
  end

  def test_render_css_with_site_with_path
    @site.update_column(:path, 'some/path')

    get comfy_cms_render_css_path(site_id: @site, identifier: @layout.identifier)
    assert_response :success
    assert_match 'text/css', response.content_type
    assert_equal @layout.css, response.body
  end

  def test_render_css_without_cache_buster
    get comfy_cms_render_css_path(site_id: @site, identifier: @layout.identifier)
    assert_response :success
    assert_match 'text/css', response.content_type
    assert_equal 'max-age=0, private, must-revalidate', response.headers['Cache-Control']
    assert_equal @layout.css, response.body
  end

  def test_render_css_with_cache_buster
    get comfy_cms_render_css_path(site_id: @site, identifier: @layout.identifier, cache_buster: @layout.cache_buster)
    assert_response :success
    assert_match 'text/css', response.content_type
    assert_equal 'max-age=31556952, public', response.headers['Cache-Control']
    assert_equal @layout.css, response.body
  end

  def test_render_css_not_found
    get comfy_cms_render_css_path(site_id: @site, identifier: 'invalid')
    assert_response 404
  end

  def test_render_js_without_cache_buster
    get comfy_cms_render_js_path(site_id: @site, identifier: @layout.identifier)
    assert_response :success
    assert_equal 'application/javascript; charset=utf-8', response.content_type
    assert_equal 'max-age=0, private, must-revalidate', response.headers['Cache-Control']
    assert_equal @layout.js, response.body
  end

  def test_render_js_with_cache_buster
    get comfy_cms_render_js_path(site_id: @site, identifier: @layout.identifier, cache_buster: @layout.cache_buster)
    assert_response :success
    assert_equal 'application/javascript; charset=utf-8', response.content_type
    assert_equal 'max-age=31556952, public', response.headers['Cache-Control']
    assert_equal @layout.js, response.body
  end

  def test_render_js_not_found
    get comfy_cms_render_js_path(site_id: @site, identifier: 'bogus')
    assert_response 404
  end
end
</file>

<file path="test/fixtures/active_storage/blobs.yml">
default:
  key: 123abc
  filename: default.jpg
  content_type: image/jpeg
  service_name: local
  byte_size: 12345
  checksum: 123abc

fragment:
  key: 456def
  filename: fragment.jpeg
  content_type: image/jpeg
  service_name: local
  byte_size: 12345
  checksum: 456def
</file>

<file path="test/fixtures/comfy/cms/fragments.yml">
default:
  record: default (Comfy::Cms::Page)
  identifier: content
  tag: text
  content: content

file:
  record: default (Comfy::Cms::Page)
  identifier: file
  tag: file
  content:

datetime:
  record: default (Comfy::Cms::Page)
  identifier: datetime
  tag: datetime
  content:
  datetime: <%= DateTime.parse("1981-10-04 12:34:56") %>

boolean:
  record: default (Comfy::Cms::Page)
  identifier: boolean
  tag: checkbox
  content:
  boolean: true

translation:
  record: default (Comfy::Cms::Translation)
  identifier: content
  tag: text
  content: translated content
</file>

<file path="test/fixtures/comfy/cms/snippets.yml">
default:
  site: default
  label: Default Snippet
  identifier: default
  content: "## snippet content"
  markdown: false
  position: 0

markdown:
  site: default
  label: Default Markdown Snippet
  identifier: markdown
  content: "## snippet content"
  markdown: true
  position: 1
</file>

<file path="test/fixtures/generators/scaffold/tests/controller.rb">
require_relative '../../test_helper'

class Admin::FoosControllerTest < ActionDispatch::IntegrationTest

  setup do
    @foo = foos(:default)
  end

  # Vanilla CMS has BasicAuth, so we need to send that with each request.
  # Change this to fit your app's authentication strategy.
  # Move this to test_helper.rb
  def r(verb, path, options = {})
    headers = options[:headers] || {}
    headers['HTTP_AUTHORIZATION'] =
      ActionController::HttpAuthentication::Basic.encode_credentials(
        ComfortableMediaSurfer::AccessControl::AdminAuthentication.username,
        ComfortableMediaSurfer::AccessControl::AdminAuthentication.password
      )
    options.merge!(headers: headers)
    send(verb, path, options)
  end

  def test_get_index
    r :get, admin_foos_path
    assert_response :success
    assert assigns(:foos)
    assert_template :index
  end

  def test_get_show
    r :get, admin_foo_path(@foo)
    assert_response :success
    assert assigns(:foo)
    assert_template :show
  end

  def test_get_show_failure
    r :get, admin_foo_path('invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'Foo not found', flash[:danger]
  end

  def test_get_new
    r :get, new_admin_foo_path
    assert_response :success
    assert assigns(:foo)
    assert_template :new
    assert_select "form[action='/admin/foos']"
  end

  def test_get_edit
    r :get, edit_admin_foo_path(@foo)
    assert_response :success
    assert assigns(:foo)
    assert_template :edit
    assert_select "form[action='/admin/foos/#{@foo.id}']"
  end

  def test_creation
    assert_difference 'Foo.count' do
      r :post, admin_foos_path, params: {foo: {
        bar: 'test bar',
      }}
      foo = Foo.last
      assert_response :redirect
      assert_redirected_to action: :show, id: foo
      assert_equal 'Foo created', flash[:success]
    end
  end

  def test_creation_failure
    assert_no_difference 'Foo.count' do
      r :post, admin_foos_path, params: {foo: { }}
      assert_response :success
      assert_template :new
      assert_equal 'Failed to create Foo', flash[:danger]
    end
  end

  def test_update
    r :put, admin_foo_path(@foo), params: {foo: {
      bar: 'Updated'
    }}
    assert_response :redirect
    assert_redirected_to action: :show, id: @foo
    assert_equal 'Foo updated', flash[:success]
    @foo.reload
    assert_equal 'Updated', @foo.bar
  end

  def test_update_failure
    r :put, admin_foo_path(@foo), params: {foo: {
      bar: ''
    }}
    assert_response :success
    assert_template :edit
    assert_equal 'Failed to update Foo', flash[:danger]
    @foo.reload
    refute_equal '', @foo.bar
  end

  def test_destroy
    assert_difference 'Foo.count', -1 do
      r :delete, admin_foo_path(@foo)
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal 'Foo deleted', flash[:success]
    end
  end
end
</file>

<file path="test/fixtures/generators/scaffold/controller.rb">
class Admin::FoosController < Comfy::Admin::BaseController

  before_action :build_foo,  only: [:new, :create]
  before_action :load_foo,   only: [:show, :edit, :update, :destroy]

  def index
    @foos = Foo.page(params[:page])
  end

  def show
    render
  end

  def new
    render
  end

  def edit
    render
  end

  def create
    @foo.save!
    flash[:success] = 'Foo created'
    redirect_to action: :show, id: @foo
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = 'Failed to create Foo'
    render action: :new
  end

  def update
    @foo.update!(foo_params)
    flash[:success] = 'Foo updated'
    redirect_to action: :show, id: @foo
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = 'Failed to update Foo'
    render action: :edit
  end

  def destroy
    @foo.destroy
    flash[:success] = 'Foo deleted'
    redirect_to action: :index
  end

protected

  def build_foo
    @foo = Foo.new(foo_params)
  end

  def load_foo
    @foo = Foo.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = 'Foo not found'
    redirect_to action: :index
  end

  def foo_params
    params.fetch(:foo, {}).permit(:bar)
  end
end
</file>

<file path="test/generators/cms_assets_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/cms/assets_generator'

class CmsAssetsGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::Cms::AssetsGenerator

  def test_generator
    run_generator
    assert_directory 'app/assets/javascripts/comfy/admin/cms'
    assert_directory 'app/assets/stylesheets/comfy/admin/cms'
  end
end
</file>

<file path="test/generators/cms_controllers_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/cms/controllers_generator'

class CmsControllersGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::Cms::ControllersGenerator

  def test_generator
    run_generator
    assert_directory 'app/controllers/comfy'
    assert_file 'app/controllers/comfy/admin/cms/base_controller.rb'
  end
end
</file>

<file path="test/generators/cms_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/cms/cms_generator'

class CmsGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::CmsGenerator

  def test_generator
    run_generator

    assert_migration 'db/migrate/create_cms.rb'

    assert_file 'config/initializers/comfortable_media_surfer.rb'

    assert_file 'config/routes.rb', read_file('cms/routes.rb')

    assert_file 'config/application.rb', read_file('cms/application.rb')

    assert_directory 'db/cms_seeds'

    assert_file 'app/assets/javascripts/comfy/admin/cms/custom.js'

    assert_file 'app/assets/stylesheets/comfy/admin/cms/custom.sass'
  end
end
</file>

<file path="test/generators/cms_models_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/cms/models_generator'

class CmsModelsGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::Cms::ModelsGenerator

  def test_generator
    run_generator
    assert_directory 'app/models/comfy'
    assert_file 'app/models/comfy/cms/page.rb'
  end
end
</file>

<file path="test/generators/cms_views_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/cms/views_generator'

class CmsViewsGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::Cms::ViewsGenerator

  def test_generator
    run_generator
    assert_directory 'app/views/comfy'
    assert_file 'app/views/comfy/admin/cms/pages/index.html.haml'
  end
end
</file>

<file path="test/generators/scaffold_generator_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require_relative '../../lib/generators/comfy/scaffold/scaffold_generator'

class ScaffoldGeneratorTest < Rails::Generators::TestCase
  tests Comfy::Generators::ScaffoldGenerator

  def test_generator
    run_generator %w[Foo bar:string]

    assert_migration 'db/migrate/create_foos.rb', read_file('scaffold/migration.rb')
    assert_file 'app/models/foo.rb',              read_file('scaffold/model.rb')
    assert_file 'test/models/foo_test.rb',        read_file('scaffold/tests/model.rb')
    assert_file 'test/fixtures/foos.yml',         read_file('scaffold/tests/fixture')

    assert_file 'app/controllers/admin/foos_controller.rb',       read_file('scaffold/controller.rb')
    assert_file 'test/controllers/admin/foos_controller_test.rb', read_file('scaffold/tests/controller.rb')

    assert_file 'app/views/admin/foos/index.html.haml', read_file('scaffold/views/index.haml')
    assert_file 'app/views/admin/foos/show.html.haml',  read_file('scaffold/views/show.haml')
    assert_file 'app/views/admin/foos/new.html.haml',   read_file('scaffold/views/new.haml')
    assert_file 'app/views/admin/foos/edit.html.haml',  read_file('scaffold/views/edit.haml')
    assert_file 'app/views/admin/foos/_form.html.haml', read_file('scaffold/views/_form.haml')

    assert_file 'config/routes.rb', read_file('scaffold/routes.rb')

    assert_file 'app/views/comfy/admin/cms/partials/_navigation_inner.html.haml' do |file|
      assert_match "%li.nav-item\n  = active_link_to 'Foos', admin_foos_path, class: 'nav-link'", file
    end
  end
end
</file>

<file path="test/helpers/admin_cms_helper_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class AdminCmsHelpersTest < ActionView::TestCase
  include Comfy::Admin::CmsHelper
  include ComfyBootstrapForm::ViewHelper

  setup do
    @file = comfy_cms_files(:default)
  end

  def test_comfy_form_with
    actual = comfy_form_with(url: '/test') do |form|
      form.text_field :foo
    end
    expected = <<-HTML.gsub(%r{^\s+|\n}, '')
      <form action="/test" accept-charset="UTF-8" method="post">
        <div class="form-group row">
          <label class="col-form-label col-sm-2 text-sm-right" for="foo">Foo</label>
          <div class="col-sm-10">
            <input class="form-control" type="text" name="foo" id="foo" />
          </div>
        </div>
      </form>
    HTML
    assert_equal expected, actual
  end

  def test_comfy_admin_partial
    actual = comfy_admin_partial('path/to/partial', foo: 'bar')
    assert_nil actual

    ComfortableMediaSurfer.config.reveal_cms_partials = true
    actual = comfy_admin_partial('path/to/partial', foo: 'bar')
    expected = '<div class="comfy-admin-partial">path/to/partial</div>'
    assert_equal expected, actual
  end

  def test_cms_page_file_link_tag
    actual = cms_page_file_link_tag(
      fragment_id: 'test',
      attachment: @file.attachment,
      multiple: false
    )
    assert_equal '{{ cms:page_file_link test, as: image }}', actual
  end

  def test_cms_page_file_link_tag_non_image
    @file.attachment.blob.update_column(:content_type, 'application/pdf')
    actual = cms_page_file_link_tag(
      fragment_id: 'test',
      attachment: @file.attachment,
      multiple: false
    )
    assert_equal '{{ cms:page_file_link test }}', actual
  end

  def test_cms_page_file_link_multiple
    actual = cms_page_file_link_tag(
      fragment_id: 'test',
      attachment: @file.attachment,
      multiple: true
    )
    assert_equal '{{ cms:page_file_link test, filename: "default.jpg", as: image }}', actual
  end

  def test_cms_file_link_tag
    actual = cms_file_link_tag(@file)
    assert_equal '{{ cms:image default file }}', actual
  end

  def test_cms_file_link_tag_non_image
    @file.attachment.blob.update_column(:content_type, 'application/pdf')
    actual = cms_file_link_tag(@file)
    assert_equal '{{ cms:file_link 593363170 }}', actual
  end
end
</file>

<file path="test/helpers/cms_helper_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsHelperTest < ActionView::TestCase
  include Comfy::CmsHelper

  module TestViewHelpers
    def hello
      'hello'
    end
  end
  ActionView::Base.include TestViewHelpers

  setup do
    # we're simulating instance variables that are present on the view/controller
    @cms_site = comfy_cms_sites(:default)
    @cms_page = comfy_cms_pages(:default)
  end

  def test_cms_fragment_content
    assert_equal 'content', cms_fragment_content(:content)
    assert_equal 'content', cms_fragment_content(:content, @cms_page)
    assert_equal '', cms_fragment_content(:invalid)
  end

  def test_cms_fragment_content_with_datetime
    frag = comfy_cms_fragments(:datetime)
    assert_equal 'datetime', frag.tag
    assert_equal '1981-10-04 12:34:56 UTC', cms_fragment_content(frag.identifier).to_s
  end

  def test_cms_fragment_content_with_date
    frag = comfy_cms_fragments(:datetime)
    frag.update_columns(tag: 'date', datetime: '2017-01-01')
    assert_equal '2017-01-01 00:00:00 UTC', cms_fragment_content(frag.identifier).to_s
  end

  def test_cms_fragment_content_with_boolean
    frag = comfy_cms_fragments(:boolean)
    assert_equal true, cms_fragment_content(frag.identifier)
  end

  def test_cms_fragment_content_with_files
    frag = comfy_cms_fragments(:file)
    assert_equal frag.attachments.to_a, cms_fragment_content(frag.identifier).to_a
  end

  def test_cms_fragment_render
    assert_equal 'content', cms_fragment_render(:content)
    assert_equal '', cms_fragment_render(:invalid)
  end

  def test_cms_fragment_render_unrenderable
    comfy_cms_layouts(:default).update_column(:content, '{{cms:textarea content, render: false}}')
    assert_equal 'content', cms_fragment_render(:content)
  end

  def test_cms_fragment_render_with_tags
    comfy_cms_fragments(:default).update_column(:content, 'a {{cms:helper hello }} b')
    assert_equal 'a hello b', cms_fragment_render(:content)
  end

  def test_cms_fragment_render_with_erb
    comfy_cms_fragments(:default).update_column(:content, '<%= 1 + 1 %>')
    assert_equal '&lt;%= 1 + 1 %&gt;', cms_fragment_render(:content)
  end

  def test_cms_fragment_render_with_datetime
    comfy_cms_layouts(:default).update_column(:content, '{{cms:datetime datetime}}')
    assert_equal '1981-10-04 12:34:56 UTC', cms_fragment_render(:datetime)
  end

  def test_cms_fragment_render_with_boolean
    comfy_cms_layouts(:default).update_column(:content, '{{cms:checkbox boolean}}')
    assert_equal 'true', cms_fragment_render(:boolean)
  end

  def test_cms_fragment_render_with_files
    frag = comfy_cms_fragments(:file)
    comfy_cms_layouts(:default).update_column(:content, '{{cms:file file}}')
    assert_equal url_for(frag.attachments.first), cms_fragment_render(:file)
  end

  def test_cms_snippet_content
    assert_equal '## snippet content', cms_snippet_content(:default)
    assert_equal '## snippet content', cms_snippet_content(:default, @cms_site)
    assert_equal '', cms_snippet_content(:invalid)
  end

  def test_cms_snippet_content_with_site_detection
    @cms_site = nil
    assert_equal '## snippet content', cms_snippet_content(:default)
  end

  def test_cms_snippet_render
    assert_equal '## snippet content', cms_snippet_render(:default)
  end

  def test_cms_snippet_render_with_tags_and_context
    file = comfy_cms_files(:default)
    comfy_cms_snippets(:default).update_column(:content, "{{cms:file_link #{file.id}}}")
    assert_equal rails_blob_path(file.attachment, only_path: true), cms_snippet_render(:default)
  end

  def test_cms_snippet_with_erb
    comfy_cms_snippets(:default).update_column(:content, '<%= 1 + 1 %>')
    assert_equal '&lt;%= 1 + 1 %&gt;', cms_snippet_render(:default)
  end

  def test_cms_snippet_render_with_tags
    comfy_cms_snippets(:default).update_column(:content, 'a {{cms:helper hello}} b')
    assert_equal 'a hello b', cms_snippet_render(:default)
  end

  def test_cms_site_detect
    site = comfy_cms_sites(:default)
    site.update_column(:path, '/en')
    assert_equal site, cms_site_detect

    site_b = Comfy::Cms::Site.create!(
      label: 'with path',
      identifier: 'with-path',
      hostname: site.hostname,
      path: 'fr'
    )
    request.fullpath = '/fr'
    assert_equal site_b, cms_site_detect

    site_b.update_columns(hostname: 'site_b.com', path: 'en')
    request.host_with_port  = 'site_b.com'
    request.fullpath        = '/en'
    assert_equal site_b, cms_site_detect
  end
end
</file>

<file path="test/integration/access_control_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class AccessControlTest < ActionDispatch::IntegrationTest
  module TestAuthentication
    module Authenticate
      def authenticate
        render plain: 'Test Login Denied', status: :unauthorized
      end
    end

    # faking ComfortableMediaSurfer.config.admin_auth = 'AccessControlTest::TestAuthentication'
    # faking ComfortableMediaSurfer.config.public_auth = 'AccessControlTest::TestAuthentication'
    class SitesController   < Comfy::Admin::Cms::SitesController; include Authenticate; end
    class ContentController < Comfy::Cms::ContentController;      include Authenticate; end
  end

  module TestAuthorization
    module Authorize
      def authorize
        @authorization_vars = instance_variables
        render plain: 'Test Access Denied', status: :forbidden
      end
    end

    # faking ComfortableMediaSurfer.config.admin_authorization = 'AccessControlTest::TestAuthorization'
    # faking ComfortableMediaSurfer.config.public_authorization = 'AccessControlTest::TestAuthorization'
    class SitesController         < Comfy::Admin::Cms::SitesController;             include Authorize; end
    class LayoutsController       < Comfy::Admin::Cms::LayoutsController;           include Authorize; end
    class PagesController         < Comfy::Admin::Cms::PagesController;             include Authorize; end
    class SnippetsController      < Comfy::Admin::Cms::SnippetsController;          include Authorize; end
    class FilesController         < Comfy::Admin::Cms::FilesController;             include Authorize; end
    class CategoriesController    < Comfy::Admin::Cms::CategoriesController;        include Authorize; end
    class RevisionsController     < Comfy::Admin::Cms::Revisions::LayoutController; include Authorize; end
    class TranslationsController  < Comfy::Admin::Cms::TranslationsController;      include Authorize; end
    class ContentController       < Comfy::Cms::ContentController;                  include Authorize; end
  end

  # -- Tests -------------------------------------------------------------------
  def test_admin_authentication_default
    assert_equal 'ComfortableMediaSurfer::AccessControl::AdminAuthentication',
                 ComfortableMediaSurfer.config.admin_auth

    get comfy_admin_cms_sites_path
    assert_response :unauthorized

    r :get, comfy_admin_cms_sites_path
    assert_response :success
  end

  def test_admin_authentication_custom
    with_routing do |routes|
      routes.draw do
        get '/admin/sites' => 'access_control_test/test_authentication/sites#index'
      end

      get '/admin/sites'
      assert_response :unauthorized
      assert_equal 'Test Login Denied', response.body
    end
  end

  def test_admin_authorization_default
    assert_equal 'ComfortableMediaSurfer::AccessControl::AdminAuthorization',
                 ComfortableMediaSurfer.config.admin_authorization

    Comfy::Admin::Cms::BaseController.include ComfortableMediaSurfer::AccessControl::AdminAuthorization
    r :get, "/admin/sites/#{comfy_cms_sites(:default).to_param}/edit"
    assert_response :success, response.body
  end

  def test_admin_authorization_custom
    site = comfy_cms_sites(:default)
    with_routing do |routes|
      routes.draw do
        s   = '/admin/sites'
        ns  = 'access_control_test/test_authorization'
        get "#{s}/:id/edit"                                       => "#{ns}/sites#edit"
        get "#{s}/:site_id/layouts/:id/edit"                      => "#{ns}/layouts#edit"
        get "#{s}/:site_id/layouts/:layout_id/revisions/:id"      => "#{ns}/revisions#show"
        get "#{s}/:site_id/pages/:id/edit"                        => "#{ns}/pages#edit"
        get "#{s}/:site_id/pages/:page_id/translations/:id/edit"  => "#{ns}/pages#edit"
        get "#{s}/:site_id/snippets/:id/edit"                     => "#{ns}/snippets#edit"
        get "#{s}/:site_id/files/:id/edit"                        => "#{ns}/files#edit"
        get "#{s}/:site_id/categories/:id/edit"                   => "#{ns}/categories#edit"
      end

      r :get, "/admin/sites/#{site.id}/edit"
      assert_response :forbidden
      assert_equal 'Test Access Denied', response.body
      assert assigns(:authorization_vars)
      assert assigns(:authorization_vars).member?(:@site)

      layout = comfy_cms_layouts(:default)
      r :get, "/admin/sites/#{site.id}/layouts/#{layout.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@layout)

      revision = comfy_cms_revisions(:layout)
      r :get, "/admin/sites/#{site.id}/layouts/#{layout.id}/revisions/#{revision.id}"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@record)

      page = comfy_cms_pages(:default)
      r :get, "/admin/sites/#{site.id}/pages/#{page.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@page)

      translation = comfy_cms_translations(:default)
      r :get, "/admin/sites/#{site.id}/pages/#{page.id}/translations/#{translation.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@page)

      snippet = comfy_cms_snippets(:default)
      r :get, "/admin/sites/#{site.id}/snippets/#{snippet.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@snippet)

      file = comfy_cms_files(:default)
      r :get, "/admin/sites/#{site.id}/files/#{file.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@file)

      category = comfy_cms_categories(:default)
      r :get, "/admin/sites/#{site.id}/categories/#{category.id}/edit"
      assert assigns(:authorization_vars).member?(:@site)
      assert assigns(:authorization_vars).member?(:@category)
    end
  end

  def test_public_authentication_default
    assert_equal 'ComfortableMediaSurfer::AccessControl::PublicAuthentication',
                 ComfortableMediaSurfer.config.public_auth

    get '/'
    assert_response :success, response.body
  end

  def test_public_authorization_default
    assert_equal 'ComfortableMediaSurfer::AccessControl::PublicAuthorization',
                 ComfortableMediaSurfer.config.public_authorization

    get '/'
    assert_response :success, response.body
  end

  def test_public_authentication_custom
    with_routing do |routes|
      routes.draw do
        get '(*cms_path)' => 'access_control_test/test_authentication/content#show'
      end

      get '/'
      assert_response :unauthorized
      assert_equal 'Test Login Denied', response.body
    end
  end

  def test_public_authorization_custom
    with_routing do |routes|
      routes.draw do
        get '(*cms_path)' => 'access_control_test/test_authorization/content#show'
      end

      get '/'
      assert_response :forbidden
      assert_equal 'Test Access Denied', response.body
    end
  end
end
</file>

<file path="test/integration/i18n_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class I18nIntegrationTest < ActionDispatch::IntegrationTest
  def collect_combined_keys(hash, ns = nil)
    hash.collect do |k, v|
      keys = []
      keys << collect_combined_keys(v, "#{ns}.#{k}") if v.is_a?(Hash)
      keys << "#{ns}.#{k}"
    end.flatten
  end

  def test_translations
    locales_path = File.expand_path('../../config/locales', __dir__)
    locales = Dir.glob("#{locales_path}/*.yml").collect do |file_path|
      File.basename(file_path, '.yml')
    end

    # collecting all locales
    locale_keys = {}
    locales.each do |locale|
      translations = YAML.load_file("#{locales_path}/#{locale}.yml")
      locale_keys[locale] = collect_combined_keys(translations[locale])
    end

    # Using en as reference
    reference = locale_keys[locales.delete('en')]
    assert reference.present?

    locale_keys.each do |locale, keys|
      missing = reference - keys
      assert missing.blank?, "#{locale} locale is missing: #{missing.join(', ')}"
      extra = keys - reference
      assert extra.blank?, "#{locale} locale has extra: #{extra.join(', ')}"
    end
  end
end
</file>

<file path="test/integration/meta_variables_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class MetaVariablesIntegrationTest < ActionDispatch::IntegrationTest
  def test_redactor_js_variables
    site = comfy_cms_sites(:default)
    r :get, comfy_admin_cms_site_pages_path(site)
    assert_response :success

    assert_select "meta[name='cms-file-upload-path'][content='#{comfy_admin_cms_site_files_path(site)}']"
    assert_select "meta[name='cms-pages-path'][content='#{comfy_admin_cms_site_pages_path(site)}']"
    assert_select "meta[name='cms-locale'][content='en']"
  end

  def test_plupload_js_variables
    site = comfy_cms_sites(:default)
    r :get, comfy_admin_cms_site_files_path(site)
    assert_response :success

    assert_select '[data-cms-uploader-url]'
    assert_select '[data-cms-uploader-token-name]'
    assert_select '[data-cms-uploader-token-value]'
    assert_select '[data-cms-uploader-session-name]'
    assert_select '[data-cms-uploader-session-value]'
  end
end
</file>

<file path="test/integration/routing_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class RoutingIntergrationTest < ActionDispatch::IntegrationTest
  def teardown
    Rails.application.reload_routes!
  end

  def test_cms_public_prefix
    assert_nil ComfortableMediaSurfer.config.public_cms_path

    Rails.application.routes.draw do
      comfy_route :cms, path: '/custom'
    end

    assert_equal '/custom', ComfortableMediaSurfer.config.public_cms_path
  end
end
</file>

<file path="test/integration/seeds_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class SeedsIntergrationTest < ActionDispatch::IntegrationTest
  setup do
    @site = comfy_cms_sites(:default)
    @site.update_columns(identifier: 'sample-site')
  end

  def test_seeds_disabled
    assert_no_difference ['Comfy::Cms::Layout.count', 'Comfy::Cms::Page.count', 'Comfy::Cms::Snippet.count'] do
      get '/'
      assert_response :success

      assert_equal 'Default Page', Comfy::Cms::Page.root.label
      assert_equal 'Default Layout', Comfy::Cms::Layout.find_by_identifier('default').label
      assert_equal 'Default Snippet', Comfy::Cms::Snippet.find_by_identifier('default').label
    end
  end

  def test_seeds_enabled
    ComfortableMediaSurfer.config.enable_seeds = true
    Comfy::Cms::Layout.destroy_all
    Comfy::Cms::Page.destroy_all
    Comfy::Cms::Snippet.destroy_all

    assert_difference 'Comfy::Cms::Page.count', 3 do
      assert_difference 'Comfy::Cms::Layout.count', 2 do
        assert_difference 'Comfy::Cms::Snippet.count', 1 do
          get '/'
          assert_response :success

          assert_equal 'Home Seed Page', Comfy::Cms::Page.root.label
          assert_equal 'Default Seed Layout', Comfy::Cms::Layout.find_by_identifier('default').label
          assert_equal 'Default Seed Snippet', Comfy::Cms::Snippet.find_by_identifier('default').label

          file_path = url_for(ActiveStorage::Blob.find_by(filename: 'header.png'))
          file_path = file_path.sub('http://www.example.com', '')
          out = <<~HTML
            <html>
              <body>
                <img src='#{file_path}' alt='header.png' title='header.png'/>
                <p>Home Page Seed Contént
            Default Seed Snippet Content
            </p>


              </body>
            </html>

          HTML
          assert_equal out, response.body
        end
      end
    end
  end

  def test_fixtures_enabled_in_admin
    ComfortableMediaSurfer.config.enable_seeds = true
    Comfy::Cms::Layout.destroy_all
    Comfy::Cms::Page.destroy_all
    Comfy::Cms::Snippet.destroy_all

    assert_difference 'Comfy::Cms::Page.count', 3 do
      assert_difference 'Comfy::Cms::Layout.count', 2 do
        assert_difference 'Comfy::Cms::Snippet.count', 1 do
          r :get, "/admin/sites/#{@site.id}/pages"
          assert_response :success
          assert_equal 'CMS Seeds are enabled. All changes done here will be discarded.', flash[:warning]
        end
      end
    end
  end
end
</file>

<file path="test/integration/sites_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class SitesIntegrationTest < ActionDispatch::IntegrationTest
  def test_get_admin_with_single_site
    r :get, comfy_admin_cms_path
    assert assigns(:site)
    assert_equal comfy_cms_sites(:default), assigns(:site)
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_pages_path(assigns(:site))
  end

  def test_get_admin_with_no_site
    Comfy::Cms::Site.delete_all
    r :get, comfy_admin_cms_path
    assert_response :redirect
    assert_redirected_to new_comfy_admin_cms_site_path
    assert_equal 'Site not found', flash[:danger]
  end

  def test_get_public_page_with_single_site
    host! 'bogus.host'
    get '/'
    assert_response :success
    assert assigns(:cms_site)
    assert_equal 'www.example.com', assigns(:cms_site).hostname
  end

  def test_get_public_page_with_sites_with_different_paths
    Comfy::Cms::Site.delete_all
    site_a = Comfy::Cms::Site.create!(identifier: 'site-a', hostname: 'www.example.com', path: '')
    site_b = Comfy::Cms::Site.create!(identifier: 'site-b', hostname: 'www.example.com', path: 'path-b')
    site_c = Comfy::Cms::Site.create!(identifier: 'site-c', hostname: 'www.example.com', path: 'path-c/child')

    [site_a, site_b, site_c].each do |site|
      layout = site.layouts.create!(identifier: 'test')
      site.pages.create!(label: 'index', layout: layout)
      site.pages.create!(label: '404', slug: '404', layout: layout)
    end

    %w[/ /path-a /path-a/child /path-c].each do |path|
      get path
      assert assigns(:cms_site), path
      assert_equal site_a, assigns(:cms_site)
      assert_equal path.gsub(%r{^/}, ''), @controller.params[:cms_path].to_s
    end

    %w[/path-b /path-b/child].each do |path|
      get path
      assert assigns(:cms_site), path
      assert_equal site_b, assigns(:cms_site)
      assert_equal path.gsub(%r{^/path-b}, '').gsub(%r{^/}, ''), @controller.params[:cms_path].to_s
    end

    %w[/path-c/child /path-c/child/child].each do |path|
      get path
      assert assigns(:cms_site), path
      assert_equal site_c, assigns(:cms_site)
      assert_equal path.gsub(%r{^/path-c/child}, '').gsub(%r{^/}, ''), @controller.params[:cms_path].to_s
    end
  end

  def test_get_public_page_with_host_with_port
    Comfy::Cms::Site.delete_all
    site_a = Comfy::Cms::Site.create!(identifier: 'site-a', hostname: 'www.example.com:3000')
    site_b = Comfy::Cms::Site.create!(identifier: 'site-b', hostname: 'www.example.com')

    [site_a, site_b].each do |site|
      layout = site.layouts.create!(identifier: 'test')
      site.pages.create!(label: 'index', layout: layout)
      site.pages.create!(label: '404', slug: '404', layout: layout)
    end

    get '/'
    assert assigns(:cms_site)
    assert_equal site_b, assigns(:cms_site)
  end

  def test_get_admin_with_locale
    r :get, comfy_admin_cms_site_pages_path(comfy_cms_sites(:default))
    assert_response :success
    assert_equal :en, I18n.locale

    comfy_cms_sites(:default).update_columns(locale: 'fr')
    r :get, comfy_admin_cms_site_pages_path(comfy_cms_sites(:default))
    assert_response :success
    assert_equal :fr, I18n.locale
  end

  def test_get_admin_with_forced_locale
    ComfortableMediaSurfer.config.admin_locale = :en

    comfy_cms_sites(:default).update_columns(locale: 'fr')
    r :get, comfy_admin_cms_site_pages_path(comfy_cms_sites(:default))
    assert_response :success
    assert_equal :en, I18n.locale

    I18n.default_locale = :fr
    I18n.locale = :fr
    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert_equal :en, I18n.locale

    I18n.default_locale = :en
  end
end
</file>

<file path="test/integration/view_hooks_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class ViewHooksIntegrationTest < ActionDispatch::IntegrationTest
  def teardown
    ComfortableMediaSurfer::ViewHooks.remove(:navigation)
  end

  def test_hooks_rendering
    Comfy::Admin::Cms::SitesController.append_view_path(File.expand_path('../fixtures/views', File.dirname(__FILE__)))
    ComfortableMediaSurfer::ViewHooks.add(:navigation, '/nav_hook')

    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert_match %r{hook_content}, response.body
  end

  def test_hooks_rendering_with_multiples
    Comfy::Admin::Cms::SitesController.append_view_path(File.expand_path('../fixtures/views', File.dirname(__FILE__)))
    ComfortableMediaSurfer::ViewHooks.add(:navigation, '/nav_hook')
    ComfortableMediaSurfer::ViewHooks.add(:navigation, '/nav_hook_2')

    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert_match %r{hook_content}, response.body
    assert_match %r{<hook_content_2>}, response.body
  end

  def test_hooks_rendering_with_proper_order
    Comfy::Admin::Cms::SitesController.append_view_path(File.expand_path('../fixtures/views', File.dirname(__FILE__)))
    ComfortableMediaSurfer::ViewHooks.add(:navigation, '/nav_hook_2', 0)
    ComfortableMediaSurfer::ViewHooks.add(:navigation, '/nav_hook', 1)

    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert_match %r{<hook_content_2>hook_content}, response.body
  end

  def test_hooks_rendering_with_no_hook
    ComfortableMediaSurfer::ViewHooks.remove(:navigation)

    r :get, comfy_admin_cms_sites_path
    assert_response :success
    assert_no_match %r{hook_content}, response.body
  end
end
</file>

<file path="test/lib/content/tags/asset_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsAssetTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default']
    )
    assert_equal 'default', tag.identifier
    assert_nil tag.type
    assert_equal 'url', tag.as
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'css', 'as' => 'tag' }]
    )
    assert_equal 'default', tag.identifier
    assert_equal 'css', tag.type
    assert_equal 'tag', tag.as
  end

  def test_init_without_identifier
    message = 'Missing layout identifier for asset tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Asset.new(context: @page)
    end
  end

  def test_layout
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(context: @page, params: ['default'])
    assert tag.layout.is_a?(Comfy::Cms::Layout)
  end

  def test_content_for_invalid
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(context: @page, params: ['default'])
    assert_nil tag.content
  end

  def test_content_for_css
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'css' }]
    )
    out = "/cms-css/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.css"
    assert_equal out, tag.content
  end

  def test_content_for_css_as_tag
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'css', 'as' => 'tag' }]
    )
    out = "/cms-css/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.css"
    out = "<link href='#{out}' media='screen' rel='stylesheet' type='text/css' />"
    assert_equal out, tag.content
  end

  def test_content_for_css_with_public_cms_path
    ComfortableMediaSurfer.config.public_cms_path = '/custom'
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'css' }]
    )
    out = "/custom/cms-css/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.css"
    assert_equal out, tag.content
  end

  def test_content_for_js
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'js' }]
    )
    out = "/cms-js/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.js"
    assert_equal out, tag.content
  end

  def test_content_for_js_as_tag
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'js', 'as' => 'tag' }]
    )
    out = "/cms-js/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.js"
    out = "<script src='#{out}' type='text/javascript'></script>"
    assert_equal out, tag.content
  end

  def test_content_for_js_with_public_cms_path
    ComfortableMediaSurfer.config.public_cms_path = '/custom'
    tag = ComfortableMediaSurfer::Content::Tags::Asset.new(
      context: @page,
      params: ['default', { 'type' => 'js' }]
    )
    out = "/custom/cms-js/#{@page.site_id}/#{@page.layout.identifier}/#{@page.layout.cache_buster}.js"
    assert_equal out, tag.content
  end
end
</file>

<file path="test/lib/content/tags/audio_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsAudioTest < ActiveSupport::TestCase
  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Audio.new(
      context: @page,
      params: ['path/to/audio']
    )
    assert_equal 'path/to/audio', tag.path
    assert_equal ({}), tag.locals
  end

  def test_init_with_locals
    tag = ComfortableMediaSurfer::Content::Tags::Audio.new(
      context: @page,
      params: ['path/to/audio', { 'key' => 'val' }]
    )
    assert_equal 'path/to/audio', tag.path
    assert_equal ({ 'key' => 'val' }), tag.locals
  end

  def test_init_without_path
    message = 'Missing path for audio tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Audio.new(
        context: @page,
        params: [{ 'key' => 'val' }]
      )
    end
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Audio.new(
      context: @page,
      params: ['path/to/audio', { 'style' => 'font-weight: bold' }]
    )
    html = '<style>.audioplayer {font-weight: bold}</style><audio controls class="audioplayer" src=path/to/audio></audio>'
    assert_equal html, tag.render
  end
end
</file>

<file path="test/lib/content/tags/breadcrumbs_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsBreadcrumbsTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
    @child = @site.pages.create!(layout: @layout, parent: @page, label: 'Child', slug: 'child')
    @gr_child = @site.pages.create!(layout: @layout, parent: @child, label: 'Gr-child', slug: 'gr-child')
    @gr_gr_child = @site.pages.create!(layout: @layout, parent: @gr_child, label: 'Gr-Gr-child', slug: 'gr-gr-child')
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Breadcrumbs.new(
      context: @gr_gr_child,
      params: []
    )
    assert_equal ({}), tag.locals
  end

  def test_init_with_style
    tag = ComfortableMediaSurfer::Content::Tags::Breadcrumbs.new(
      context: @gr_gr_child,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    assert_equal '<style>#breadcrumbs {font-weight: bold}</style>', tag.style
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Breadcrumbs.new(
      context: @gr_gr_child,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    html = "<style>#breadcrumbs {font-weight: bold}</style>\
<div id=\"breadcrumbs\"><a href=/>Default Page</a> &raquo; <a href=/child>Child</a> &raquo; \
<a href=/child/gr-child>Gr-child</a> &raquo; Gr-Gr-child</div>"
    assert_equal html, tag.render
  end
end
</file>

<file path="test/lib/content/tags/checkbox_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsCheckboxTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Checkbox.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end

  def test_content
    frag = comfy_cms_fragments(:boolean)
    tag = ComfortableMediaSurfer::Content::Tags::Checkbox.new(context: @page, params: [frag.identifier])
    assert_equal frag,          tag.fragment
    assert_equal frag.boolean,  tag.content
  end
end
</file>

<file path="test/lib/content/tags/children_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsChildrenTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
    @parent = @site.pages.create!(layout: @layout, parent: @page, label: 'Parent', slug: 'parent')
    @child1 = @site.pages.create!(layout: @layout, parent: @parent, label: 'Child1', slug: 'child1')
    @child2 = @site.pages.create!(layout: @layout, parent: @parent, label: 'Child2', slug: 'child2')
    @child3 = @site.pages.create!(layout: @layout, parent: @parent, label: 'Child3', slug: 'child3')
    @child4 = @site.pages.create!(layout: @layout, parent: @parent, label: 'Child4', slug: 'child4')
    @child5 = @site.pages.create!(layout: @layout, parent: @parent, label: 'Child5', slug: 'child5', is_published: false)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Children.new(
      context: @parent,
      params: []
    )
    assert_equal ({}), tag.locals
  end

  def test_init_with_style
    tag = ComfortableMediaSurfer::Content::Tags::Children.new(
      context: @parent,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    assert_equal "<style>#children {font-weight: bold}</style>\n", tag.style
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Children.new(
      context: @parent,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    html = "<style>#children {font-weight: bold}</style>\n\
<ul id=\"children\">\n\
  <li><a href=/parent/child1>Child1</a></li>\n\
  <li><a href=/parent/child2>Child2</a></li>\n\
  <li><a href=/parent/child3>Child3</a></li>\n\
  <li><a href=/parent/child4>Child4</a></li>\n\
</ul>"

    assert_equal html, tag.render
  end

  def test_render_with_exclusions
    tag = ComfortableMediaSurfer::Content::Tags::Children.new(
      context: @parent,
      params: [{ 'exclude' => 'child2,child3' }]
    )
    html = "<ul id=\"children\">\n\
  <li><a href=/parent/child1>Child1</a></li>\n\
  <li><a href=/parent/child4>Child4</a></li>\n\
</ul>"
    assert_equal html, tag.render
  end

  def test_render_with_no_kids
    tag = ComfortableMediaSurfer::Content::Tags::Children.new(
      context: @child4,
      params: []
    )
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/date_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsDateTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Date.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end

  def test_content
    frag = comfy_cms_fragments(:datetime)
    tag = ComfortableMediaSurfer::Content::Tags::Date.new(context: @page, params: [frag.identifier])
    assert_equal frag,          tag.fragment
    assert_equal frag.datetime, tag.content
  end
end
</file>

<file path="test/lib/content/tags/datetime_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsDatetimeTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
    @frag = comfy_cms_fragments(:datetime)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(context: @page, params: [@frag.identifier])
    assert_equal @frag,          tag.fragment
    assert_equal @frag.datetime, tag.content
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(context: @page, params: [@frag.identifier])
    assert_equal '1981-10-04 12:34:56 UTC', tag.render
  end

  def test_render_with_strftime
    params = [@frag.identifier, { 'strftime' => 'at %I:%M%p' }]
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(context: @page, params: params)
    assert_equal 'at 12:34PM', tag.render
  end

  def test_render_not_renderable
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(
      context: @page,
      params: [@frag.identifier, { 'render' => 'false' }]
    )
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/files_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsFilesTest < ActiveSupport::TestCase
  delegate :rails_blob_path, to: 'Rails.application.routes.url_helpers'

  setup do
    @page = comfy_cms_pages(:default)
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(context: @page, params: ['test'])
    assert_equal 'test',  tag.identifier
    assert_equal 'url',   tag.as
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(
      context: @page,
      params: ['test', {
        'as' => 'image',
        'resize' => '100x100',
        'gravity' => 'center',
        'crop' => '100x100+0+0'
      }]
    )
    assert_equal 'test',  tag.identifier
    assert_equal 'image', tag.as
    assert_equal ({
      'resize' => '100x100',
      'gravity' => 'center',
      'crop' => '100x100+0+0'
    }), tag.variant_attrs
  end

  def test_content
    frag = @page.fragments.create!(
      identifier: 'test'
    )
    frag.update_attribute(:tag, 'files')
    frag.update_attribute(:files, fixture_file_upload('image.jpg', 'image/jpeg'))
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(context: @page, params: [frag.identifier])
    out = frag.attachments.map { |a| rails_blob_path(a, only_path: true) }.join(' ')
    assert_equal out, tag.content
  end

  def test_content_no_attachments
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(context: @page, params: ['test'])
    assert_equal '', tag.content
  end
end
</file>

<file path="test/lib/content/tags/fragment_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsFragmentTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['content'])
    assert_equal @page,     tag.context
    assert_equal 'content', tag.identifier
    assert_equal true,      tag.renderable
    assert_equal 'default', tag.namespace
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(
      context: @page,
      params: ['content', { 'render' => 'false', 'namespace' => 'test' }]
    )
    assert_equal false,  tag.renderable
    assert_equal 'test', tag.namespace
  end

  def test_init_without_identifier
    message = 'Missing identifier for fragment tag: {{cms:markdown}}'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, source: '{{cms:markdown}}')
    end
  end

  def test_fragment
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['content'])
    assert_equal comfy_cms_fragments(:default), tag.fragment
  end

  def test_fragment_new_record
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['new'])
    fragment = tag.fragment
    assert fragment.is_a?(Comfy::Cms::Fragment)
    assert fragment.new_record?
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['content'])
    assert_equal 'content', tag.content
    assert_raises RuntimeError, 'Form field rendering not implemented for this Tag' do
      tag.form_field
    end
  end

  def test_content_new_record
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['new'])
    assert_nil tag.content
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(context: @page, params: ['content'])
    assert_equal 'content', tag.render
  end

  def test_render_when_not_renderable
    tag = ComfortableMediaSurfer::Content::Tags::Fragment.new(
      context: @page,
      params: ['content', { 'render' => 'false' }]
    )
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/image_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsImageTest < ActiveSupport::TestCase
  delegate :rails_blob_path, to: 'Rails.application.routes.url_helpers'

  setup do
    @page = comfy_cms_pages(:default)
    @file = comfy_cms_files(:default)
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Image.new(context: @page, params: ['my_image'])
    assert_equal 'my_image', tag.identifier
    assert_equal 'image', tag.as
  end

  def test_init_without_identifier
    message = 'Missing identifier label for image tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Image.new(context: @page)
    end
  end

  def test_file
    tag = ComfortableMediaSurfer::Content::Tags::Image.new(context: @page, params: [@file.label])
    assert_instance_of Comfy::Cms::File, tag.file_record

    tag = ComfortableMediaSurfer::Content::Tags::Image.new(context: @page, params: ['invalid'])
    assert_nil tag.file_record
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Image.new(
      context: @page,
      params: [@file.label, { 'as' => 'image', 'class' => 'html-class' }]
    )
    url = rails_blob_path(tag.file, only_path: true)
    out = "<img src='#{url}' class='html-class' alt='default file' title='default file'/>"
    assert_equal out, tag.content
    assert_equal out, tag.render
  end

  def test_content_when_not_found
    tag = ComfortableMediaSurfer::Content::Tags::Image.new(context: @page, params: ['invalid'])
    assert_equal '', tag.content
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/markdown_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsMarkdownTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Markdown.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end

  def test_content
    frag = comfy_cms_fragments(:default)
    tag = ComfortableMediaSurfer::Content::Tags::Markdown.new(context: @page, params: [frag.identifier])
    assert_equal frag,          tag.fragment
    assert_equal frag.content,  tag.content
  end

  def test_render
    frag = comfy_cms_fragments(:default)
    frag.update_column(:content, '**test**')
    tag = ComfortableMediaSurfer::Content::Tags::Markdown.new(context: @page, params: [frag.identifier])
    assert_equal "<p><strong>test</strong></p>\n", tag.render
  end

  def test_render_unrenderable
    frag = comfy_cms_fragments(:default)
    tag = ComfortableMediaSurfer::Content::Tags::Markdown.new(
      context: @page,
      params: [frag.identifier, { 'render' => 'false' }]
    )
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/number_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsNumberTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Number.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end
end
</file>

<file path="test/lib/content/tags/page_file_link_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsPageFileLinkTest < ActiveSupport::TestCase
  delegate :rails_blob_path, to: 'Rails.application.routes.url_helpers'

  setup do
    @page = comfy_cms_pages(:default)
    @file = comfy_cms_files(:default)
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::PageFileLink.new(context: @page, params: ['123'])
    assert_equal '123', tag.identifier
    assert_equal 'url', tag.as
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::PageFileLink.new(
      context: @page,
      params: [
        '123', {
          'as' => 'image',
          'resize' => '100x100',
          'gravity' => 'center',
          'crop' => '100x100+0+0'
        }
      ]
    )
    assert_equal '123', tag.identifier
    assert_equal 'image', tag.as
    assert_equal ({
      'resize' => '100x100',
      'gravity' => 'center',
      'crop' => '100x100+0+0'
    }), tag.variant_attrs
  end

  def test_init_without_identifier
    message = 'Missing identifier for page file link tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::PageFileLink.new(context: @page)
    end
  end

  def test_content
    fragment = comfy_cms_fragments(:file)
    tag = ComfortableMediaSurfer::Content::Tags::PageFileLink.new(context: @page, params: [fragment.identifier])
    out = rails_blob_path(tag.file, only_path: true)
    assert_equal out, tag.content
    assert_equal out, tag.render
  end

  def test_content_when_not_found
    tag = ComfortableMediaSurfer::Content::Tags::PageFileLink.new(context: @page, params: ['invalid'])
    assert_equal '', tag.content
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/siblings_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsSiblingsTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
    @first = @site.pages.create!(layout: @layout, parent: @page, label: 'First', slug: 'first')
    @second = @site.pages.create!(layout: @layout, parent: @page, label: 'Second', slug: 'second')
    @third = @site.pages.create!(layout: @layout, parent: @page, label: 'Third', slug: 'third')
    @fourth = @site.pages.create!(layout: @layout, parent: @page, label: 'Fourth', slug: 'fourth')
    @fifth = @site.pages.create!(layout: @layout, parent: @page, label: 'Fifth', slug: 'fifth')
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @third,
      params: []
    )
    assert_equal ({}), tag.locals
  end

  def test_init_with_style
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @third,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    assert_equal '<style>#siblings {font-weight: bold}</style>', tag.style
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @third,
      params: [{ 'style' => 'font-weight: bold' }]
    )
    html = "<style>#siblings {font-weight: bold}</style><div id=\"siblings\">\
<a href=/second>Second</a> &laquo;&nbsp;<em>Previous</em> \
&bull; <em>Next</em>&nbsp;&raquo; <a href=/fourth>Fourth</a></div>"
    assert_equal html, tag.render
  end

  def test_render_with_no_siblings
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @page,
      params: []
    )
    assert_equal '', tag.render
  end

  def test_render_with_exclusions
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @third,
      params: [{ 'exclude' => 'second,fourth' }]
    )
    html = "<div id=\"siblings\"><a href=/first>First</a> &laquo;&nbsp;<em>Previous</em> \
&bull; <em>Next</em>&nbsp;&raquo; <a href=/fifth>Fifth</a></div>"
    assert_equal html, tag.render
  end

  def test_render_with_current_page_excluded
    tag = ComfortableMediaSurfer::Content::Tags::Siblings.new(
      context: @second,
      params: [{ 'exclude' => 'second,fourth' }]
    )
    html = '<div id="siblings"></div>'
    assert_equal html, tag.render
  end
end
</file>

<file path="test/lib/content/tags/snippet_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsSnippetTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page, params: ['default'])
    assert_equal 'default', tag.identifier
    assert_equal comfy_cms_snippets(:default), tag.snippet
  end

  def test_init_without_identifier
    message = 'Missing identifier for snippet tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page)
    end
  end

  def test_snippet_new_record
    tag = ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page, params: ['new'])
    assert tag.snippet.new_record?
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page, params: ['default'])
    assert_equal '## snippet content', tag.content
  end

  def test_markdown_content
    tag = ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page, params: ['markdown'])
    assert_equal "<h2 id=\"snippet-content\">snippet content</h2>\n", tag.content
  end

  def test_content_new_record
    tag = ComfortableMediaSurfer::Content::Tags::Snippet.new(context: @page, params: ['new'])
    assert_nil tag.content
  end
end
</file>

<file path="test/lib/content/tags/template_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsTemplateTest < ActiveSupport::TestCase
  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ['path/to/template']
    )
    assert_equal 'path/to/template', tag.path
  end

  def test_init_without_path
    message = 'Missing template path for template tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Template.new(context: @page)
    end
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ['path/to/template']
    )
    assert_equal '<%= render template: "path/to/template" %>', tag.content
    assert_equal true, tag.allow_erb?
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ['path/to/template']
    )
    assert_equal '<%= render template: "path/to/template" %>', tag.render
  end

  def test_render_with_whitelist
    ComfortableMediaSurfer.config.allowed_templates = ['allowed/path']
    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ['allowed/path']
    )
    assert_equal '<%= render template: "allowed/path" %>', tag.render

    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ['not_allowed/path']
    )
    assert_equal '', tag.render
  end

  def test_render_with_erb_injection
    tag = ComfortableMediaSurfer::Content::Tags::Template.new(
      context: @page,
      params: ["va\#{:l}ue"]
    )
    assert_equal "<%= render template: \"va\\\#{:l}ue\" %>", tag.render
  end
end
</file>

<file path="test/lib/content/tags/text_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsTextTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Text.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end
end
</file>

<file path="test/lib/content/tags/textarea_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsTextAreaTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Textarea.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end
end
</file>

<file path="test/lib/content/tags/wysiwyg_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsWysiwygTest < ActiveSupport::TestCase
  setup do
    @page = comfy_cms_pages(:default)
  end

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Wysiwyg.new(context: @page, params: ['test'])
    assert_equal 'test', tag.identifier
  end
end
</file>

<file path="test/lib/content/block_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class ContentBlockTest < ActiveSupport::TestCase
  class TestBlockTag < ComfortableMediaSurfer::Content::Block
    # ...
  end

  setup do
    ComfortableMediaSurfer::Content::Renderer.register_tag(:test_block, TestBlockTag)
  end

  teardown do
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test_block')
  end

  # -- Tests -------------------------------------------------------------------

  def test_block_tag_nodes
    block = TestBlockTag.new(context: nil)
    assert_equal [], block.nodes
    block.nodes << 'text'
    assert_equal ['text'], block.nodes
  end
end
</file>

<file path="test/lib/content/params_parser_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class ContentParamsParserTest < ActiveSupport::TestCase
  PARSER = ComfortableMediaSurfer::Content::ParamsParser

  def test_tokenizer
    tokens = PARSER.new.send(:tokenize, 'param')
    assert_equal [[:string, 'param']], tokens
  end

  def test_tokenizer_with_integer
    tokens = PARSER.new.send(:tokenize, '123')
    assert_equal [[:string, 123]], tokens
  end

  def test_tokenizer_with_commas
    tokens = PARSER.new.send(:tokenize, 'param_a, param_b, param_c')
    assert_equal [
      [:string, 'param_a'],
      [:string, 'param_b'],
      [:string, 'param_c']
    ], tokens
  end

  def test_tokenizer_with_hash_keys
    tokens = PARSER.new.send(:tokenize, 'key: value')
    assert_equal [
      [:hash_key, 'key'],
      [:string,   'value']
    ], tokens
  end

  def test_tokenizer_with_hashes
    tokens = PARSER.new.send(:tokenize, 'k: {x: {y: z}}')
    assert_equal [
      [:hash_key,   'k'],
      [:hash_open,  '{'],
      [:hash_key,   'x'],
      [:hash_open,  '{'],
      [:hash_key,   'y'],
      [:string,     'z'],
      [:hash_close, '}'],
      [:hash_close, '}']
    ], tokens
  end

  def test_tokenizer_with_arrays
    tokens = PARSER.new.send(:tokenize, 'k: [a, b, c]')
    assert_equal [
      [:hash_key,     'k'],
      [:array_open,   '['],
      [:string,       'a'],
      [:string,       'b'],
      [:string,       'c'],
      [:array_close,  ']']
    ], tokens
  end

  def test_tokenizer_with_arrays_containing_numbers
    tokens = PARSER.new.send(:tokenize, 'arr: [1, 2, 3]')
    assert_equal [
      [:hash_key,     'arr'],
      [:array_open,   '['],
      [:string,       '1'.to_i],
      [:string,       '2'.to_i],
      [:string,       '3'.to_i],
      [:array_close,  ']']
    ], tokens
  end

  def test_tokenizer_with_quoted_value
    tokens = PARSER.new.send(:tokenize, "key: ''")
    assert_equal [[:hash_key, 'key'], [:string, '']], tokens

    tokens = PARSER.new.send(:tokenize, "key: 'test'")
    assert_equal [[:hash_key, 'key'], [:string, 'test']], tokens

    tokens = PARSER.new.send(:tokenize, "key: 'v1, v2: v3'")
    assert_equal [[:hash_key, 'key'], [:string, 'v1, v2: v3']], tokens

    tokens = PARSER.new.send(:tokenize, 'key: "v1, v2: v3"')
    assert_equal [[:hash_key, 'key'], [:string, 'v1, v2: v3']], tokens
  end

  def test_tokenizer_with_smart_quotes
    expected = [[:string, 'param'], [:hash_key, 'key'], [:string, 'value']]

    tokens = PARSER.new.send(:tokenize, "'param', key: 'value'")
    assert_equal expected, tokens

    tokens = PARSER.new.send(:tokenize, '"param", key: "value"')
    assert_equal expected, tokens

    tokens = PARSER.new.send(:tokenize, '“param”, key: “value”')
    assert_equal expected, tokens

    tokens = PARSER.new.send(:tokenize, '‘param’, key: ‘value’')
    assert_equal expected, tokens
  end

  def test_tokenizer_with_bad_input
    message = 'Unexpected char: %'
    assert_raises PARSER::Error, message do
      PARSER.new.send(:tokenize, '%')
    end
  end

  def test_params_simple_list
    assert_equal ['a', 'b', 'foo bar', 'c'], PARSER.new("a, b, 'foo bar', c").params
  end

  def test_params_simple_hash
    assert_equal [{ 'a' => 'b' }],              PARSER.new('a: b').params
    assert_equal [{ 'a' => 'b' }],              PARSER.new('{a: b}').params
    assert_equal [{ 'a' => 'b', 'c' => 'd' }],  PARSER.new('a: b, c: d').params
    assert_equal [{ 'a' => 'b', 'c' => 'd' }],  PARSER.new('{a: b, c: d}').params
  end

  def test_params_nested_hash
    assert_equal [
      { 'a' => { 'b' => { 'c' => 'd', 'e' => 'f' } }, 'g' => { 'h' => 'i' } }
    ], PARSER.new('a: {b: {c: d, e: f}}, g: {h: i}').params
  end

  def test_params_invalid_hash
    message = 'Invalid params: a: b: c:'
    assert_raises PARSER::Error, message do
      PARSER.new('a: b: c:').params
    end
  end

  def test_params_invalid_hash_element
    message = 'Invalid params: {a: b, c}'
    assert_raises PARSER::Error, message do
      PARSER.new('{a: b, c}').params
    end
  end

  def test_params_array
    assert_equal [['a', 'b', 'foo bar', 'c']], PARSER.new("[a, b, 'foo bar', c]").params
  end

  def test_params_nested_array
    assert_equal ['a', ['b', %w[c d]]], PARSER.new('a, [b, [c, d]]').params
  end

  def test_params_array_unclosed
    message = 'Unclosed array param: [a, b'
    assert_raises PARSER::Error, message do
      PARSER.new('[a, b').params
    end
  end

  def test_params_mixed
    assert_equal ['a', 'b', { 'c' => 'd', 'e' => 'f' }], PARSER.new('a, b, c: d, e: f').params
  end

  def test_params_mixed_separate_hashes
    assert_equal ['a', { 'b' => 'c' }, { 'd' => 'e' }], PARSER.new('a, {b: c}, {d: e}').params
  end

  def test_params_mixed_invalid
    message = 'Invalid params: a, b: c, d'
    assert_raises PARSER::Error, message do
      PARSER.new('a, b: c, d').params
    end

    assert_equal ['a', { 'b' => 'c' }, 'd'], PARSER.new('a, {b: c}, d').params
  end

  def test_params_mixed_complex
    string = 'a, b: [{c: {d: {e: f, g: h}}, i: j}, k], l: m'
    assert_equal [
      'a',
      {
        'b' => [
          { 'c' => { 'd' => { 'e' => 'f', 'g' => 'h' } }, 'i' => 'j' },
          'k'
        ],
        'l' => 'm'
      }
    ], PARSER.new(string).params
  end

  def test_params_with_erb_injection
    string = %q("a#{:a}", key: "va#{:l}ue") # rubocop:disable Lint/InterpolationCheck
    assert_equal ["a\#{:a}", { 'key' => "va\#{:l}ue" }], PARSER.new(string).params
  end
end
</file>

<file path="test/lib/content/renderer_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class ContentRendererTest < ActiveSupport::TestCase
  class TestTag < ComfortableMediaSurfer::Content::Tag
    def content
      'test tag content'
    end
  end

  class TestNestedTag < ComfortableMediaSurfer::Content::Tag
    def content
      'test {{cms:test}} content'
    end
  end

  class TestBlockTag < ComfortableMediaSurfer::Content::Block
    # ...
  end

  DEFAULT_REGISTERED_TAGS = {
    'wysiwyg' => ComfortableMediaSurfer::Content::Tags::Wysiwyg,
    'text' => ComfortableMediaSurfer::Content::Tags::Text,
    'textarea' => ComfortableMediaSurfer::Content::Tags::Textarea,
    'markdown' => ComfortableMediaSurfer::Content::Tags::Markdown,
    'datetime' => ComfortableMediaSurfer::Content::Tags::Datetime,
    'date' => ComfortableMediaSurfer::Content::Tags::Date,
    'number' => ComfortableMediaSurfer::Content::Tags::Number,
    'checkbox' => ComfortableMediaSurfer::Content::Tags::Checkbox,
    'file' => ComfortableMediaSurfer::Content::Tags::File,
    'files' => ComfortableMediaSurfer::Content::Tags::Files,
    'snippet' => ComfortableMediaSurfer::Content::Tags::Snippet,
    'asset' => ComfortableMediaSurfer::Content::Tags::Asset,
    'file_link' => ComfortableMediaSurfer::Content::Tags::FileLink,
    'image' => ComfortableMediaSurfer::Content::Tags::Image,
    'page_file_link' => ComfortableMediaSurfer::Content::Tags::PageFileLink,
    'helper' => ComfortableMediaSurfer::Content::Tags::Helper,
    'partial' => ComfortableMediaSurfer::Content::Tags::Partial,
    'template' => ComfortableMediaSurfer::Content::Tags::Template,
    'audio' => ComfortableMediaSurfer::Content::Tags::Audio,
    'breadcrumbs' => ComfortableMediaSurfer::Content::Tags::Breadcrumbs,
    'children' => ComfortableMediaSurfer::Content::Tags::Children,
    'siblings' => ComfortableMediaSurfer::Content::Tags::Siblings
  }.freeze

  setup do
    @page     = comfy_cms_pages(:default)
    @template = ComfortableMediaSurfer::Content::Renderer.new(@page)

    ComfortableMediaSurfer::Content::Renderer.register_tag(:test, TestTag)
    ComfortableMediaSurfer::Content::Renderer.register_tag(:test_nested, TestNestedTag)
    ComfortableMediaSurfer::Content::Renderer.register_tag(:test_block, TestBlockTag)
  end

  teardown do
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test')
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test_nested')
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test_block')
  end

  # Test helper so we don't have to do this each time
  def render_string(string, template = @template)
    tokens = template.tokenize(string)
    nodes  = template.nodes(tokens)
    template.render(nodes)
  end

  # -- Tests -------------------------------------------------------------------

  def test_tags
    assert_equal DEFAULT_REGISTERED_TAGS.merge(
      'test' => ContentRendererTest::TestTag,
      'test_nested' => ContentRendererTest::TestNestedTag,
      'test_block' => ContentRendererTest::TestBlockTag
    ), ComfortableMediaSurfer::Content::Renderer.tags
  end

  def test_register_tags
    ComfortableMediaSurfer::Content::Renderer.register_tag(:other, TestTag)
    assert_equal DEFAULT_REGISTERED_TAGS.merge(
      'test' => ContentRendererTest::TestTag,
      'test_nested' => ContentRendererTest::TestNestedTag,
      'test_block' => ContentRendererTest::TestBlockTag,
      'other' => ContentRendererTest::TestTag
    ), ComfortableMediaSurfer::Content::Renderer.tags
  ensure
    ComfortableMediaSurfer::Content::Renderer.tags.delete('other')
  end

  def test_tokenize
    assert_equal ['test text'], @template.tokenize('test text')
  end

  def test_tokenize_with_tag
    assert_equal ['test ', { tag_class: 'tag', tag_params: '', source: '{{cms:tag}}' }, ' text'],
                 @template.tokenize('test {{cms:tag}} text')
  end

  def test_tokenize_with_tag_and_params
    expected = [
      'test ',
      { tag_class: 'tag', tag_params: 'name, key:val', source: '{{cms:tag name, key:val}}' },
      ' text'
    ]
    assert_equal expected, @template.tokenize('test {{cms:tag name, key:val}} text')
  end

  def test_tokenize_with_invalid_tag
    assert_equal ['test {{abc:tag}} text'],
                 @template.tokenize('test {{abc:tag}} text')
  end

  def test_tokenize_with_newlines
    expected = [
      { tag_class: 'test', tag_params: '', source: '{{cms:test}}' },
      "\n",
      { tag_class: 'test', tag_params: '', source: '{{cms:test}}' }
    ]
    assert_equal expected, @template.tokenize("{{cms:test}}\n{{cms:test}}")
  end

  def test_nodes
    tokens = @template.tokenize('test')
    nodes = @template.nodes(tokens)
    assert_equal ['test'], nodes
  end

  def test_nodes_with_tags
    tokens = @template.tokenize('test {{cms:test}} content {{cms:test}}')
    nodes = @template.nodes(tokens)
    assert_equal 4, nodes.count
    assert_equal 'test ', nodes[0]
    assert nodes[1].is_a?(ContentRendererTest::TestTag)
    assert_equal ' content ', nodes[2]
    assert nodes[3].is_a?(ContentRendererTest::TestTag)
  end

  def test_nodes_with_tag_with_params
    tokens = @template.tokenize('{{cms:test param, key: value}}')
    nodes = @template.nodes(tokens)
    assert_equal 1, nodes.count
    assert nodes[0].is_a?(ContentRendererTest::TestTag)
    tag = nodes[0]
    assert_equal @page, tag.context
    assert_equal ['param', { 'key' => 'value' }], tag.params
    assert_equal '{{cms:test param, key: value}}', tag.source
  end

  def test_nodes_with_block_tag
    string = 'a {{cms:test_block}} b {{cms:end}} c'
    tokens = @template.tokenize(string)
    nodes = @template.nodes(tokens)
    assert_equal 3, nodes.count

    assert_equal 'a ', nodes[0]
    assert_equal ' c', nodes[2]

    block = nodes[1]
    assert block.is_a?(ContentRendererTest::TestBlockTag)
    assert_equal [' b '], block.nodes
  end

  def test_nodes_with_block_tag_and_tag
    string = 'a {{cms:test_block}} b {{cms:test}} c {{cms:end}} d'
    tokens = @template.tokenize(string)
    nodes = @template.nodes(tokens)
    assert_equal 3, nodes.count
    assert_equal 'a ', nodes[0]
    assert_equal ' d', nodes[2]

    block = nodes[1]
    assert block.is_a?(ContentRendererTest::TestBlockTag)
    assert_equal 3, block.nodes.count
    assert_equal ' b ', block.nodes[0]
    assert_equal ' c ', block.nodes[2]

    tag = block.nodes[1]
    assert tag.is_a?(ContentRendererTest::TestTag)
    assert_equal ['test tag content'], tag.nodes
  end

  def test_nodes_with_nested_block_tag
    string = 'a {{cms:test_block}} b {{cms:test_block}} c {{cms:end}} d {{cms:end}} e'
    tokens = @template.tokenize(string)
    nodes = @template.nodes(tokens)
    assert_equal 3, nodes.count
    assert_equal 'a ', nodes[0]
    assert_equal ' e', nodes[2]

    block = nodes[1]
    assert block.is_a?(ContentRendererTest::TestBlockTag)
    assert_equal 3, block.nodes.count
    assert_equal ' b ', block.nodes[0]
    assert_equal ' d ', block.nodes[2]

    block = block.nodes[1]
    assert_equal [' c '], block.nodes
  end

  def test_nodes_with_unclosed_block_tag
    string = 'a {{cms:test_block}} b'
    tokens = @template.tokenize(string)
    message = 'unclosed block detected'
    assert_raises ComfortableMediaSurfer::Content::Renderer::SyntaxError, message do
      @template.nodes(tokens)
    end
  end

  def test_nodes_with_closed_tag
    string = 'a {{cms:end}} b'
    tokens = @template.tokenize(string)
    message = 'closing unopened block'
    assert_raises ComfortableMediaSurfer::Content::Renderer::SyntaxError, message do
      @template.nodes(tokens)
    end
  end

  def test_nodes_with_invalid_tag
    string = 'a {{cms:invalid}} b'
    tokens = @template.tokenize(string)
    message = 'Unrecognized tag: {{cms:invalid}}'
    assert_raises ComfortableMediaSurfer::Content::Renderer::SyntaxError, message do
      @template.nodes(tokens)
    end
  end

  def test_sanitize_erb
    out = @template.sanitize_erb('<% test %>', false)
    assert_equal '&lt;% test %&gt;', out

    out = @template.sanitize_erb('<% test %>', true)
    assert_equal '<% test %>', out
  end

  def test_render
    out = render_string('test')
    assert_equal 'test', out
  end

  def test_render_with_tag
    out = render_string('a {{cms:text content}} z')
    assert_equal 'a content z', out
  end

  def test_render_with_erb
    out = render_string('<%= 1 + 1 %>')
    assert_equal '&lt;%= 1 + 1 %&gt;', out
  end

  def test_render_with_erb_allowed
    ComfortableMediaSurfer.config.allow_erb = true
    out = render_string('<%= 1 + 1 %>')
    assert_equal '<%= 1 + 1 %>', out
  end

  def test_render_with_erb_allowed_via_tag
    out = render_string('{{cms:partial path}}')
    assert_equal '<%= render partial: "path", locals: {} %>', out
  end

  def test_render_with_nested_tag
    string = 'a {{cms:text content}} b'
    comfy_cms_fragments(:default).update_column(:content, 'c {{cms:snippet default}} d')
    comfy_cms_snippets(:default).update_column(:content, 'e {{cms:helper test}} f')
    out = render_string(string)
    assert_equal 'a c e <%= test() %> f d b', out
  end

  def test_render_stack_overflow
    # making self-referencing content loop here
    comfy_cms_snippets(:default).update_column(:content, 'a {{cms:snippet default}} b')
    message = 'Deep tag nesting or recursive nesting detected'
    assert_raises ComfortableMediaSurfer::Content::Renderer::Error, message do
      render_string('{{cms:snippet default}}')
    end
  end
end
</file>

<file path="test/lib/content/tag_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class ContentTagTest < ActiveSupport::TestCase
  class TestTag < ComfortableMediaSurfer::Content::Tag
    def content
      'test tag content'
    end
  end

  class TestNestedTag < ComfortableMediaSurfer::Content::Tag
    def content
      'test {{cms:test}} content'
    end
  end

  setup do
    ComfortableMediaSurfer::Content::Renderer.register_tag(:test, TestTag)
    ComfortableMediaSurfer::Content::Renderer.register_tag(:test_nested, TestNestedTag)
  end

  teardown do
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test')
    ComfortableMediaSurfer::Content::Renderer.tags.delete('test_nested')
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = TestTag.new(
      context: comfy_cms_pages(:default),
      params: ['param_a', { 'key' => 'value' }],
      source: 'source'
    )
    assert_equal comfy_cms_pages(:default), tag.context
    assert_equal ['param_a', { 'key' => 'value' }], tag.params
    assert_equal 'source', tag.source
  end

  def test_nodes
    tag = TestTag.new(context: nil, params: [], source: '')
    assert_equal ['test tag content'], tag.nodes
  end

  def test_tag_nodes_with_nested_tag
    tag = TestNestedTag.new(context: nil, params: [], source: '')
    nodes = tag.nodes
    assert_equal 3, nodes.count
    assert_equal 'test ', nodes[0]
    assert nodes[1].is_a?(ContentTagTest::TestTag)
    assert_equal ' content', nodes[2]
  end

  def test_content_on_base_class
    tag = ComfortableMediaSurfer::Content::Tag.new(context: nil)
    assert_raise ComfortableMediaSurfer::Content::Tag::Error do
      tag.content
    end
  end
end
</file>

<file path="test/lib/routes/admin_routes_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class AdminRoutesTest < ActionDispatch::IntegrationTest
  def setup
    @site = comfy_cms_sites(:default)
  end

  def teardown
    Rails.application.reload_routes!
  end

  def test_cms_admin_routes
    assert_routing '/admin', controller: 'comfy/admin/cms/base', action: 'jump'
    assert_routing '/auth/identity/callback',
                   controller: 'comfy/cms/content',
                   action: 'show',
                   cms_path: 'auth/identity/callback'
  end
end
</file>

<file path="test/lib/seeds/files_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class SeedsFilesTest < ActiveSupport::TestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_creation
    Comfy::Cms::File.delete_all

    assert_difference -> { Comfy::Cms::File.count } do
      ComfortableMediaSurfer::Seeds::File::Importer.new('sample-site', 'default-site').import!
    end

    assert file = Comfy::Cms::File.last

    assert_equal 'Seed File',   file.label
    assert_equal 'default.jpg', file.attachment.filename.to_s
    assert_equal 'image/jpeg',  file.attachment.content_type
    assert_equal 'Seed File Description', file.description

    assert_equal 2, file.categories.count
    assert_equal %w[category_a category_b], file.categories.map(&:label)
  end

  def test_update
    file = comfy_cms_files(:default)
    file.update_column(:updated_at, 10.years.ago)
    assert_equal 'default.jpg',         file.attachment.filename.to_s
    assert_equal 'default file',        file.label
    assert_equal 'default description', file.description

    assert_no_difference -> { Comfy::Cms::File.count } do
      ComfortableMediaSurfer::Seeds::File::Importer.new('sample-site', 'default-site').import!
      file.reload
      assert_equal 'default.jpg',           file.attachment.filename.to_s
      assert_equal 'Seed File',             file.label
      assert_equal 'Seed File Description', file.description
    end
  end

  def test_update_ignore
    file = comfy_cms_files(:default)
    file_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'sample-site', 'files', 'default.jpg')
    attr_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'sample-site', 'files', '_default.jpg.yml')

    assert file.updated_at >= File.mtime(file_path)
    assert file.updated_at >= File.mtime(attr_path)

    ComfortableMediaSurfer::Seeds::File::Importer.new('sample-site', 'default-site').import!
    file.reload
    assert_equal 'default.jpg',         file.attachment.filename.to_s
    assert_equal 'default file',        file.label
    assert_equal 'default description', file.description
  end

  def test_delete
    old_file = comfy_cms_files(:default)
    active_storage_blobs(:default).update_column(:filename, 'old')

    assert_no_difference -> { Comfy::Cms::File.count } do
      ComfortableMediaSurfer::Seeds::File::Importer.new('sample-site', 'default-site').import!
      assert file = Comfy::Cms::File.last
      assert_equal 'default.jpg',           file.attachment.filename.to_s
      assert_equal 'Seed File',             file.label
      assert_equal 'Seed File Description', file.description

      assert Comfy::Cms::File.where(id: old_file.id).blank?
    end
  end

  def test_export
    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    attr_path = File.join(host_path, 'files/_default.jpg.yml')
    file_path = File.join(host_path, 'files/default.jpg')

    # We don't have saved file, so lets fake that
    ActiveStorage::Blob.any_instance.stubs(:download).returns(
      File.read(File.join(Rails.root, 'db/cms_seeds/sample-site/files/default.jpg'))
    )

    ComfortableMediaSurfer::Seeds::File::Exporter.new('default-site', 'test-site').export!

    assert File.exist?(attr_path)
    assert File.exist?(file_path)
    assert_equal ({
      'label' => 'default file',
      'description' => 'default description',
      'categories' => ['Default']
    }), YAML.load_file(attr_path)
  ensure
    FileUtils.rm_rf(host_path)
  end
end
</file>

<file path="test/lib/version_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class VersionTest < ActiveSupport::TestCase
  def test_version
    assert_equal 'constant', defined?(ComfortableMediaSurfer::VERSION)
    refute_empty ComfortableMediaSurfer::VERSION
  end
end
</file>

<file path="test/models/category_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsCategoryTest < ActiveSupport::TestCase
  def test_fixtures_validity
    Comfy::Cms::Category.all.each do |category|
      assert category.valid?, category.errors.full_messages.to_s
    end
  end

  def test_validation
    category = Comfy::Cms::Category.new
    assert category.invalid?
    assert_has_errors_on category, :site, :label, :categorized_type
  end

  def test_creation
    assert_difference 'Comfy::Cms::Category.count' do
      comfy_cms_sites(:default).categories.create(
        label: 'Test Category',
        categorized_type: 'Comfy::Cms::Snippet'
      )
    end
  end

  def test_destruction
    category = comfy_cms_categories(:default)
    assert_equal 1, category.categorizations.count

    category_count = -> { Comfy::Cms::Category.count }
    categorization_count = -> { Comfy::Cms::Categorization.count }
    assert_difference([category_count, categorization_count], -1) do
      category.destroy
    end
  end

  def test_scope_of_type
    assert_equal 1, Comfy::Cms::Category.of_type('Comfy::Cms::File').count
    assert_equal 0, Comfy::Cms::Category.of_type('Invalid').count
  end
end
</file>

<file path="test/models/site_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsSiteTest < ActiveSupport::TestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_fixtures_validity
    Comfy::Cms::Site.all.each do |site|
      assert site.valid?, site.errors.inspect
    end
  end

  def test_validation
    site = Comfy::Cms::Site.new
    assert site.invalid?
    assert_has_errors_on site, :identifier, :label, :hostname

    site = Comfy::Cms::Site.new(identifier: 'test', hostname: 'http://site.host')
    assert site.invalid?
    assert_has_errors_on site, :hostname

    site = Comfy::Cms::Site.new(identifier: @site.identifier, hostname: 'site.host')
    assert site.invalid?
    assert_has_errors_on site, :identifier

    site = Comfy::Cms::Site.new(identifier: 'test', hostname: 'site.host')
    assert site.valid?, site.errors.inspect

    site = Comfy::Cms::Site.new(identifier: 'test', hostname: 'localhost:3000')
    assert site.valid?, site.errors.inspect
  end

  def test_validation_path_uniqueness
    s1 = @site
    s2 = Comfy::Cms::Site.new(
      identifier: 'test',
      hostname: s1.hostname,
      path: s1.path
    )
    assert s2.invalid?
    assert_has_errors_on s2, :hostname

    s2 = Comfy::Cms::Site.new(
      identifier: 'test',
      hostname: s1.hostname,
      path: '/en'
    )
    assert s2.valid?
  end

  def test_identifier_assignment
    site = Comfy::Cms::Site.new(hostname: 'my-site.host')
    assert site.valid?
    assert_equal 'my-site-host', site.identifier
  end

  def test_hostname_assignment
    site = Comfy::Cms::Site.new(identifier: 'test-site')
    assert site.valid?
    assert_equal 'test-site', site.hostname
  end

  def test_label_assignment
    site = Comfy::Cms::Site.new(identifier: 'test', hostname: 'my-site.host')
    assert site.valid?
    assert_equal 'Test', site.label
  end

  def test_clean_path
    site = Comfy::Cms::Site.create!(
      identifier: 'test_a',
      hostname: 'test.host',
      path: '/en///test//'
    )
    assert_equal '/en/test', site.path

    site = Comfy::Cms::Site.create!(
      identifier: 'test_b',
      hostname: 'my-site.host',
      path: '/'
    )
    assert_nil site.path
  end

  def test_creation
    assert_difference 'Comfy::Cms::Site.count' do
      Comfy::Cms::Site.create!(
        identifier: 'test',
        label: 'Test Site',
        hostname: 'test.test'
      )
    end
  end

  def test_cascading_destroy
    assert_difference 'Comfy::Cms::Site.count', -1 do
      assert_difference 'Comfy::Cms::Layout.count', -3 do
        assert_difference 'Comfy::Cms::Page.count', -2 do
          assert_difference 'Comfy::Cms::Snippet.count', -2 do
            assert_difference 'Comfy::Cms::Category.count', -1 do
              @site.destroy
            end
          end
        end
      end
    end
  end

  def test_find_site
    site_a = @site
    assert_equal 'www.example.com', site_a.hostname
    assert_nil site_a.path

    assert_equal site_a, Comfy::Cms::Site.find_site('www.example.com')
    assert_equal site_a, Comfy::Cms::Site.find_site('www.example.com', '/some/path')
    assert_equal site_a, Comfy::Cms::Site.find_site('test99.host', '/some/path')

    site_b = Comfy::Cms::Site.create!(identifier: 'test_a', hostname: 'test2.host', path: 'en')
    site_c = Comfy::Cms::Site.create!(identifier: 'test_b', hostname: 'test2.host', path: 'fr')

    assert_equal site_a,  Comfy::Cms::Site.find_site('www.example.com')
    assert_equal site_a,  Comfy::Cms::Site.find_site('www.example.com', '/some/path')
    assert_equal site_a,  Comfy::Cms::Site.find_site('www.example.com', '/some/path')
    assert_nil            Comfy::Cms::Site.find_site('test99.host', '/some/path')

    assert_nil            Comfy::Cms::Site.find_site('test2.host')
    assert_nil            Comfy::Cms::Site.find_site('test2.host', '/some/path')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/en')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/en?a=b')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/en/some/path?a=b')

    assert_nil            Comfy::Cms::Site.find_site('test2.host', '/english/some/path')

    assert_equal site_c,  Comfy::Cms::Site.find_site('test2.host', '/fr')
    assert_equal site_c,  Comfy::Cms::Site.find_site('test2.host', '/fr?a=b')
    assert_equal site_c,  Comfy::Cms::Site.find_site('test2.host', '/fr/some/path')
    assert_equal site_c,  Comfy::Cms::Site.find_site('test2.host', '/fr/some/path?a=b')
  end

  def test_find_site_with_public_cms_path
    ComfortableMediaSurfer.config.public_cms_path = '/custom'
    assert_equal '//www.example.com/custom', @site.url

    site_a = Comfy::Cms::Site.create!(identifier: 'test_a', hostname: 'test2.host', path: 'en')
    site_b = Comfy::Cms::Site.create!(identifier: 'test_b', hostname: 'test2.host', path: 'fr')

    assert_nil            Comfy::Cms::Site.find_site('test2.host')
    assert_nil            Comfy::Cms::Site.find_site('test2.host', '/custom/some/path')
    assert_equal site_a,  Comfy::Cms::Site.find_site('test2.host', '/custom/en')
    assert_equal site_a,  Comfy::Cms::Site.find_site('test2.host', '/custom/en?a=b')
    assert_equal site_a,  Comfy::Cms::Site.find_site('test2.host', '/custom/en/some/path?a=b')

    assert_nil            Comfy::Cms::Site.find_site('test2.host', '/custom/english/some/path')

    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/custom/fr')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/custom/fr?a=b')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/custom/fr/some/path')
    assert_equal site_b,  Comfy::Cms::Site.find_site('test2.host', '/custom/fr/some/path?a=b')
  end

  def test_find_site_with_site_alias
    site_a = @site
    site_b = Comfy::Cms::Site.create!(identifier: 'site_b', hostname: 'test2.host')

    ComfortableMediaSurfer.config.hostname_aliases = {
      'www.example.com' => 'alias_a.host',
      'test2.host' => %w[alias_b.host alias_c.host]
    }

    assert_equal site_a, Comfy::Cms::Site.find_site('alias_a.host')
    assert_equal site_b, Comfy::Cms::Site.find_site('alias_b.host')
    assert_equal site_b, Comfy::Cms::Site.find_site('alias_c.host')
  end

  def test_url
    assert_equal '//www.example.com', @site.url
    assert_nil @site.url(relative: true)

    @site.update_column(:path, '/site-path')
    assert_equal '//www.example.com/site-path', @site.url

    ComfortableMediaSurfer.config.public_cms_path = 'cms'
    assert_equal '//www.example.com/cms/site-path', @site.url

    assert_equal '/cms/site-path', @site.url(relative: true)
  end
end
</file>

<file path="test/models/translation_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsPageTest < ActiveSupport::TestCase
  setup do
    @site         = comfy_cms_sites(:default)
    @page         = comfy_cms_pages(:default)
    @translation  = comfy_cms_translations(:default)
  end

  def test_fixtures_validity
    Comfy::Cms::Translation.all.each do |translation|
      assert translation.valid?, translation.errors.full_messages.to_s
    end
  end

  def test_validations
    translation = Comfy::Cms::Translation.new
    translation.save
    assert translation.invalid?
    assert_has_errors_on translation, :page, :layout, :locale, :label
  end

  def test_validation_on_locale_uniqueness
    translation = @page.translations.new(
      label: 'Test',
      locale: @translation.locale
    )
    assert translation.invalid?
    assert_has_errors_on translation, :locale
  end

  def test_validation_on_locale_uniqueness_against_site
    translation = @page.translations.new(
      label: 'Test',
      locale: @site.locale
    )
    assert translation.invalid?
    assert_has_errors_on translation, :locale
  end

  def test_creation
    translation_count = -> { Comfy::Cms::Translation.count }
    fragment_count    = -> { Comfy::Cms::Fragment.count }

    assert_difference [translation_count, fragment_count] do
      translation = @page.translations.create(
        locale: 'test',
        label: 'Test Translation',
        fragments_attributes: [
          { identifier: 'content',
            tag: 'text',
            content: 'test' }
        ]
      )
      assert_equal @page.layout, translation.layout
    end
  end

  def test_scope_published
    assert_equal 1, Comfy::Cms::Translation.published.count
    @translation.update_columns(is_published: false)
    assert_equal 0, Comfy::Cms::Translation.published.count
  end

  def test_site_delegation
    assert_equal @site, @translation.site
  end
end
</file>

<file path="test/system/categories_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CategoriesFrontendTest < ApplicationSystemTestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_category_management
    visit_p comfy_admin_cms_site_snippets_path(@site)

    find('button.toggle-cat-edit').click
    selector = "form#new-category input[name='category[label]']"
    assert_selector(selector)

    # creating a new category
    find(selector).set('Test Category')
    click_button('Create Category')
    assert_selector('a.btn', text: 'Test Category')

    # editing existing category
    click_link('Test Category')
    selector = "form.edit-category input[name='category[label]']"
    assert_selector(selector)
    find(selector).set('Updated Category')
    click_button('Update Category')
    assert_selector('a.btn', text: 'Updated Category')

    # Deleting category
    accept_alert do
      click_link('Delete Category')
    end

    refute_selector('a.btn', text: 'Updated Category')
  end
end
</file>

<file path="test/system/layouts_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class LayoutsFrontendTest < ApplicationSystemTestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_new_identifier
    visit_p new_comfy_admin_cms_site_layout_path(@site)
    fill_in 'Layout Name', with: 'Test Layout'
    assert_equal 'test-layout', find_field('Identifier').value
  end
end
</file>

<file path="test/system/pages_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class PagesFrontendTest < ApplicationSystemTestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_new_identifier
    visit_p new_comfy_admin_cms_site_page_path(@site)
    fill_in 'Label', with: 'Test Page'
    assert_equal 'test-page', find_field('Slug').value
  end

  def test_change_to_invalid_fragment_and_back
    valid_layout = comfy_cms_layouts(:default)
    valid_layout.update_column(:content, '{{ cms:text content }}')

    invalid_layout = comfy_cms_layouts(:child)
    invalid_layout.update_column(:content, '{{ cms:wysiwyg }}')

    cms_page = comfy_cms_pages(:default)
    visit_p edit_comfy_admin_cms_site_page_path(@site, cms_page)
    assert_field 'page[fragments_attributes][0][content]', type: 'text'

    select invalid_layout.label, from: 'Layout'
    assert_equal 'Missing identifier for fragment tag: {{ cms:wysiwyg }}', find('.alert-danger').text.strip

    select valid_layout.label, from: 'Layout'
    assert_field 'page[fragments_attributes][0][content]', type: 'text'
  end
end
</file>

<file path="test/system/sites_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class SitesFrontendTest < ApplicationSystemTestCase
  def test_new_identifier
    visit_p new_comfy_admin_cms_site_path
    fill_in 'Label', with: 'Test Site'
    assert_equal 'test-site', find_field('Identifier').value
  end
end
</file>

<file path="test/system/snippets_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class SnippetsFrontendTest < ApplicationSystemTestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_new_identifier
    visit_p new_comfy_admin_cms_site_snippet_path(@site)
    fill_in 'Label', with: 'Test Snippet'
    assert_equal 'test-snippet', find_field('Identifier').value
  end
end
</file>

<file path=".gitattributes">
app/assets/javascripts/comfy/vendor/* linguist-vendored
app/assets/stylesheets/comfy/vendor/* linguist-vendored
app/assets/builds/* linguist-generated
</file>

<file path="config.ru">
# frozen_string_literal: true

# This file is used by Rack-based servers to start the application.

require File.expand_path('config/environment', __dir__)
run ComfortableMediaSurfer::Application
</file>

<file path="Rakefile">
# frozen_string_literal: true

require_relative 'config/application'

Rails.application.load_tasks
</file>

<file path="app/assets/javascripts/comfy/admin/cms/application.js">
import ujs from "@rails/ujs";
ujs.start();

import "bootstrap/js/src/tab";
import "bootstrap/js/src/collapse";

import "../../vendor/diff/diff_match_patch.min";
import "../../vendor/diff/pretty_text_diff";
import "../../vendor/fontawesome";

import "./base";
import "./categories";
import "./codemirror";
import "./diff";
import "./file_link";
import "./file_upload";
import "./files_modal";
import "./page_fragments";
import "./sortable_list";
import "./slugify";
import "./timepicker";
import "./wysiwyg";

import "./custom";
</file>

<file path="app/assets/javascripts/comfy/admin/cms/sortable_list.js">
import Sortable from "sortablejs";
import Rails from "@rails/ujs";

(() => {
  const DATA_ID_ATTRIBUTE = "data-id";

  const sortableStore = {
    get(sortable) {
      return Array.from(sortable.el.children, (el) =>
        el.getAttribute(DATA_ID_ATTRIBUTE)
      );
    },
    set(sortable) {
      fetch(`${CMS.current_path}/reorder`, {
        body: JSON.stringify({ order: sortable.toArray() }),
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": Rails.csrfToken(),
        },
        credentials: "same-origin",
        method: "PUT",
      });
    },
  };

  const sortableInstances = [];
  window.CMS.sortableList = {
    init(root = document) {
      for (const sortableRoot of root.querySelectorAll(".sortable")) {
        sortableInstances.push(
          Sortable.create(sortableRoot, {
            handle: ".dragger",
            draggable: "li",
            dataIdAttr: DATA_ID_ATTRIBUTE,
            store: sortableStore,
            onStart: (evt) => evt.from.classList.add("sortable-active"),
            onEnd: (evt) => evt.from.classList.remove("sortable-active"),
          })
        );
      }
    },
    dispose() {
      for (const sortable of sortableInstances) {
        sortable.destroy();
      }
      sortableInstances.length = 0;
    },
  };
})();
</file>

<file path="app/assets/javascripts/comfy/admin/cms/wysiwyg.js">
import jQuery from "jquery";
import Rails from "@rails/ujs";

import "../../vendor/redactor";
import "../../vendor/redactor/filemanager";
import "../../vendor/redactor/imagemanager";
import "../../vendor/redactor/definedlinks";
import "../../vendor/redactor/table";
import "../../vendor/redactor/video";

(() => {
  const buildRedactorOptions = () => {
    const fileUploadPath = document.querySelector(
      'meta[name="cms-file-upload-path"]'
    ).content;
    const pagesPath = document.querySelector(
      'meta[name="cms-pages-path"]'
    ).content;
    const csrfParam = Rails.csrfParam();
    const csrfToken = Rails.csrfToken();

    const imageUpload = new URL(fileUploadPath, document.location.href);
    imageUpload.searchParams.set("source", "redactor");
    imageUpload.searchParams.set("type", "image");
    imageUpload.searchParams.set(csrfParam, csrfToken);

    const imageManagerJson = new URL(fileUploadPath, document.location.href);
    imageManagerJson.searchParams.set("source", "redactor");
    imageManagerJson.searchParams.set("type", "image");

    const fileUpload = new URL(fileUploadPath, document.location.href);
    fileUpload.searchParams.set("source", "redactor");
    fileUpload.searchParams.set("type", "file");
    fileUpload.searchParams.set(csrfParam, csrfToken);

    const fileManagerJson = new URL(fileUploadPath, document.location.href);
    fileManagerJson.searchParams.set("source", "redactor");
    fileManagerJson.searchParams.set("type", "file");

    const definedLinks = new URL(pagesPath, document.location.href);
    definedLinks.searchParams.set("source", "redactor");

    return {
      minHeight: 160,
      autoresize: true,
      buttonSource: true,
      formatting: ["p", "h1", "h2", "h3", "h4", "h5", "h6"],
      plugins: [
        "imagemanager",
        "filemanager",
        "table",
        "video",
        "definedlinks",
      ],
      lang: CMS.getLocale(),
      convertDivs: false,
      imageUpload,
      imageManagerJson,
      fileUpload,
      fileManagerJson,
      definedLinks,
      // allow unsafe tags and the like (prevent redactor stripping divs and other elements)
      cleanOnEnter: false,
      replaceTags: false,
      removeComments: false,
      removeNewLines: false,
      deniedTags: [],
      replaceDivs: false,
    };
  };

  const redactorInstances = [];
  window.CMS.wysiwyg = {
    init(root = document) {
      const textareas = root.querySelectorAll(
        "textarea.rich-text-editor, textarea[data-cms-rich-text]"
      );
      if (textareas.length === 0) return;
      const redactorOptions = buildRedactorOptions();
      for (const textarea of textareas) {
        redactorInstances.push(new jQuery.Redactor(textarea, redactorOptions));
      }
    },
    dispose() {
      for (const redactor of redactorInstances) {
        redactor.core.destroy();
      }
      redactorInstances.length = 0;
    },
  };
})();
</file>

<file path="app/assets/stylesheets/comfy/admin/cms/application.sass">
@import "comfy/vendor/bootstrap/bootstrap"

@import "codemirror/lib/codemirror"
@import "comfy/vendor/fontawesome"
@import "comfy/vendor/redactor"
@import "flatpickr/dist/flatpickr.min"

@import "comfy/admin/cms/codemirror_overrides"
@import "comfy/admin/cms/redactor_overrides"
@import "comfy/admin/cms/base"
@import "comfy/admin/cms/custom"
</file>

<file path="app/controllers/comfy/admin/cms/categories_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::CategoriesController < Comfy::Admin::Cms::BaseController
  before_action :load_category, only: %i[edit update destroy]
  before_action :authorize

  def edit
    render
  end

  def create
    @category = @site.categories.create!(category_params)
  rescue ActiveRecord::RecordInvalid
    head :ok
  end

  def update
    @category.update!(category_params)
  rescue ActiveRecord::RecordInvalid
    head :ok
  end

  def destroy
    @category.destroy
  end

protected

  def load_category
    @category = @site.categories.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    head :ok
  end

  def category_params
    params.fetch(:category, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/files_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::FilesController < Comfy::Admin::Cms::BaseController
  include ::Comfy::ReorderAction
  self.reorder_action_resource = ::Comfy::Cms::File

  include ActionView::Helpers::NumberHelper

  before_action :build_file,  only: %i[new create]
  before_action :load_file,   only: %i[edit update destroy]
  before_action :authorize

  def index
    files_scope = @site.files.with_attached_attachment

    case params[:source]

    # Integration with Redactor 1.0 Wysiwyg
    when 'redactor'
      file_scope  = files_scope.limit(100).order(:position)
      file_hashes =
        case params[:type]
        when 'image'
          file_scope.with_images.collect do |file|
            { thumb: url_for(file.attachment.variant(Comfy::Cms::File::VARIANT_SIZE[:redactor])),
              image: url_for(file.attachment),
              title: file.label }
          end
        else
          file_scope.collect do |file|
            { title: file.label,
              name: file.attachment.filename,
              link: url_for(file.attachment),
              size: number_to_human_size(file.attachment.byte_size) }
          end
        end

      render json: file_hashes

    else
      files_scope = files_scope
        .includes(:categories)
        .for_category(params[:categories])
        .order('comfy_cms_files.position')
      @files = comfy_paginate(files_scope, per_page: 50)
    end
  end

  def new
    render
  end

  def create
    categories_scope = @site.categories.of_type('Comfy::Cms::File')

    if params[:categories]
      ids = categories_scope.where(label: params[:categories]).pluck(:id)
      @file.category_ids = ids
    end

    # Automatically tagging upload if it's done through redactor
    if params[:source] == 'redactor'
      category = categories_scope.find_or_create_by(label: 'wysiwyg')
      @file.category_ids = [category.id]
    end

    @file.save!

    case params[:source]
    when 'plupload'
      render partial: 'file', object: @file
    when 'redactor'
      render json: {
        filelink: url_for(@file.attachment),
        filename: @file.attachment.filename
      }
    else
      flash[:success] = I18n.t('comfy.admin.cms.files.created')
      redirect_to action: :edit, id: @file
    end
  rescue ActiveRecord::RecordInvalid
    case params[:source]
    when 'plupload'
      render body: @file.errors.full_messages.to_sentence, status: :unprocessable_entity
    when 'redactor'
      render body: nil, status: :unprocessable_entity
    else
      flash.now[:danger] = I18n.t('comfy.admin.cms.files.creation_failure')
      render action: :new
    end
  end

  def edit
    render
  end

  def update
    if @file.update(file_params)
      flash[:success] = I18n.t('comfy.admin.cms.files.updated')
      redirect_to action: :edit, id: @file
    else
      flash.now[:danger] = I18n.t('comfy.admin.cms.files.update_failure')
      render action: :edit
    end
  end

  def destroy
    @file.destroy
    respond_to do |format|
      format.js
      format.html do
        flash[:success] = I18n.t('comfy.admin.cms.files.deleted')
        redirect_to action: :index
      end
    end
  end

protected

  def build_file
    @file = @site.files.new(file_params)
  end

  def load_file
    @file = @site.files.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.files.not_found')
    redirect_to action: :index
  end

  def file_params
    file = params[:file]
    unless file.is_a?(Hash) || file.respond_to?(:to_unsafe_hash)
      params[:file] = {}
      params[:file][:file] = file
    end
    params.fetch(:file, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/layouts_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::LayoutsController < Comfy::Admin::Cms::BaseController
  include ::Comfy::ReorderAction
  self.reorder_action_resource = ::Comfy::Cms::Layout

  before_action :build_layout,  only: %i[new create]
  before_action :load_layout,   only: %i[edit update destroy]
  before_action :authorize

  def index
    return redirect_to action: :new if @site.layouts.count.zero?

    @layouts = @site.layouts.roots.order(:position)
  end

  def new
    render
  end

  def edit
    render
  end

  def create
    @layout.save!
    flash[:success] = I18n.t('comfy.admin.cms.layouts.created')
    redirect_to action: :edit, id: @layout
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.layouts.creation_failure')
    render action: :new
  end

  def update
    @layout.update!(layout_params)
    flash[:success] = I18n.t('comfy.admin.cms.layouts.updated')
    redirect_to action: :edit, id: @layout
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.layouts.update_failure')
    render action: :edit
  end

  def destroy
    @layout.destroy
    flash[:success] = I18n.t('comfy.admin.cms.layouts.deleted')
    redirect_to action: :index
  end

protected

  def build_layout
    @layout = @site.layouts.new(layout_params)
    @layout.parent      ||= ::Comfy::Cms::Layout.find_by_id(params[:parent_id])
    @layout.app_layout  ||= @layout.parent.try(:app_layout)
    @layout.content     ||= '{{ cms:wysiwyg content }}'
  end

  def load_layout
    @layout = @site.layouts.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.layouts.not_found')
    redirect_to action: :index
  end

  def layout_params
    params.fetch(:layout, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/sites_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::SitesController < Comfy::Admin::Cms::BaseController
  skip_before_action  :load_admin_site,
                      :load_seeds

  before_action :build_site,  only: %i[new create]
  before_action :load_site,   only: %i[edit update destroy]
  before_action :authorize

  def index
    return redirect_to action: :new if ::Comfy::Cms::Site.count.zero?

    @site   = ::Comfy::Cms::Site.find_by_id(session[:site_id])
    @sites  = ::Comfy::Cms::Site.all
  end

  def new
    render
  end

  def edit
    render
  end

  def create
    @site.save!
    flash[:success] = I18n.t('comfy.admin.cms.sites.created')
    redirect_to comfy_admin_cms_site_layouts_path(@site)
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.sites.creation_failure')
    render action: :new
  end

  def update
    @site.update!(site_params)
    flash[:success] = I18n.t('comfy.admin.cms.sites.updated')
    redirect_to action: :edit, id: @site
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.sites.update_failure')
    render action: :edit
  end

  def destroy
    @site.destroy
    flash[:success] = I18n.t('comfy.admin.cms.sites.deleted')
    redirect_to action: :index
  end

protected

  def build_site
    @site = ::Comfy::Cms::Site.new(site_params)
    @site.hostname ||= request.host.downcase
  end

  def load_site
    @site = ::Comfy::Cms::Site.find(params[:id])
    I18n.locale = ComfortableMediaSurfer.config.admin_locale || @site.locale
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.sites.not_found')
    redirect_to action: :index
  end

  def site_params
    params.fetch(:site, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/snippets_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::SnippetsController < Comfy::Admin::Cms::BaseController
  include ::Comfy::ReorderAction
  self.reorder_action_resource = ::Comfy::Cms::Snippet

  before_action :build_snippet, only: %i[new create]
  before_action :load_snippet,  only: %i[edit update destroy]
  before_action :authorize

  def index
    return redirect_to action: :new if @site.snippets.count.zero?

    @snippets = @site.snippets.includes(:categories).for_category(params[:categories]).order(:position)
  end

  def new
    render
  end

  def edit
    @snippet.attributes = snippet_params
  end

  def create
    @snippet.save!
    flash[:success] = I18n.t('comfy.admin.cms.snippets.created')
    redirect_to action: :edit, id: @snippet
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.snippets.creation_failure')
    render action: :new
  end

  def update
    @snippet.update!(snippet_params)
    flash[:success] = I18n.t('comfy.admin.cms.snippets.updated')
    redirect_to action: :edit, id: @snippet
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.snippets.update_failure')
    render action: :edit
  end

  def destroy
    @snippet.destroy
    flash[:success] = I18n.t('comfy.admin.cms.snippets.deleted')
    redirect_to action: :index
  end

protected

  def build_snippet
    @snippet = @site.snippets.new(snippet_params)
  end

  def load_snippet
    @snippet = @site.snippets.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.snippets.not_found')
    redirect_to action: :index
  end

  def snippet_params
    params.fetch(:snippet, {}).permit!
  end
end
</file>

<file path="app/controllers/comfy/admin/cms/translations_controller.rb">
# frozen_string_literal: true

class Comfy::Admin::Cms::TranslationsController < Comfy::Admin::Cms::BaseController
  helper_method :translation_select_options

  before_action :load_page
  before_action :build_translation,   only: %i[new create]
  before_action :load_translation,    only: %i[edit update destroy]
  before_action :authorize
  before_action :preview_translation, only: %i[create update]

  def new
    render
  end

  def edit
    render
  end

  def create
    @translation.save!
    flash[:success] = I18n.t('comfy.admin.cms.translations.created')
    redirect_to action: :edit, id: @translation
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.translations.creation_failure')
    render action: :new
  end

  def update
    @translation.update!(translation_params)
    flash[:success] = I18n.t('comfy.admin.cms.translations.updated')
    redirect_to action: :edit, id: @translation
  rescue ActiveRecord::RecordInvalid
    flash.now[:danger] = I18n.t('comfy.admin.cms.translations.update_failure')
    render action: :edit
  end

  def destroy
    @translation.destroy
    flash[:success] = I18n.t('comfy.admin.cms.translations.deleted')
    redirect_to edit_comfy_admin_cms_site_page_path(@site, @page)
  end

  def form_fragments
    @translation = @page.translations.find_by(id: params[:id]) || @page.translations.new
    @translation.layout = @site.layouts.find_by(id: params[:layout_id])

    render(
      partial: 'comfy/admin/cms/fragments/form_fragments',
      locals: { record: @translation, scope: :translation },
      layout: false
    )
  end

private

  def translation_select_options
    all = ComfortableMediaSurfer.config.locales
    taken = @page.translations.pluck(:locale) + [@site.locale] - [@translation.locale]
    all.except(*taken).map { |k, v| ["#{v} (#{k})", k] }
  end

  def load_page
    @page = @site.pages.find(params[:page_id])
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.pages.not_found')
    redirect_to comfy_admin_cms_site_pages_path(@site)
  end

  def build_translation
    @translation = @page.translations.new(translation_params)
    @translation.layout ||= @page.layout
  end

  def load_translation
    @translation = @page.translations.find(params[:id])
    @translation.attributes = translation_params
  rescue ActiveRecord::RecordNotFound
    flash[:danger] = I18n.t('comfy.admin.cms.translations.not_found')
    redirect_to edit_comfy_admin_cms_site_page_path(@site, @page)
  end

  def translation_params
    params.fetch(:translation, {}).permit!
  end

  def preview_translation
    return unless params[:preview]

    layout = @translation.layout.app_layout.blank? ? false : @translation.layout.app_layout
    @cms_site   = @page.site
    @cms_layout = @translation.layout
    @cms_page   = @page

    # Make sure to use the site locale to render the preview becaue it might
    # be different from the admin locale.
    I18n.locale = @translation.locale

    # Chrome chokes on content with iframes. Issue #434
    response.headers['X-XSS-Protection'] = '0'

    # raise
    render inline: @translation.render, layout: layout, content_type: 'text/html'
  end
end
</file>

<file path="app/controllers/comfy/cms/assets_controller.rb">
# frozen_string_literal: true

class Comfy::Cms::AssetsController < Comfy::Cms::BaseController
  skip_before_action :verify_authenticity_token, raise: false

  before_action :load_cms_layout,
                :use_null_session

  after_action :set_cache_control_header

  def render_css
    render body: @cms_layout.css, content_type: 'text/css'
  end

  def render_js
    render body: @cms_layout.js, content_type: 'application/javascript'
  end

protected

  def load_cms_layout
    @cms_layout = @cms_site.layouts.find_by_identifier!(params[:identifier])
  rescue ActiveRecord::RecordNotFound
    render body: nil, status: 404
  end

  # null_session avoids cookies and flash updates
  def use_null_session
    ActionController::RequestForgeryProtection::ProtectionMethods::NullSession.new(self)
      .handle_unverified_request
  end

  def set_cache_control_header
    return unless params[:cache_buster].present?

    response.headers['Cache-Control'] = "public, max-age=#{1.year.to_i}"
  end
end
</file>

<file path="app/controllers/concerns/comfy/reorder_action.rb">
# frozen_string_literal: true

module Comfy::ReorderAction
  extend ActiveSupport::Concern

  included do
    mattr_accessor :reorder_action_resource
  end

  def reorder
    resource_class = self.class.reorder_action_resource
    (params.permit(order: [])[:order] || []).each_with_index do |id, index|
      resource_class.where(id: id).update_all(position: index)
    end
    if resource_class == ::Comfy::Cms::Page
      Comfy::Cms::Page.all.each(&:save!)
    end
    head :ok
  end
end
</file>

<file path="app/models/comfy/cms/fragment.rb">
# frozen_string_literal: true

class Comfy::Cms::Fragment < ActiveRecord::Base
  self.table_name = 'comfy_cms_fragments'

  has_many_attached :attachments

  serialize :content, coder: Psych

  attr_reader :files

  # -- Callbacks ---------------------------------------------------------------
  # active_storage attachment behavior changed in rails 6
  before_save :remove_attachments, :add_attachments

  # -- Relationships -----------------------------------------------------------
  belongs_to :record, polymorphic: true, touch: true

  # -- Validations -------------------------------------------------------------
  validates :identifier,
            presence: true,
            uniqueness: { scope: :record }

  # -- Instance Methods --------------------------------------------------------

  # Temporary accessor for uploaded files. We can only attach to persisted
  # records so we are deffering it to the after_save callback.
  # Note: hijacking dirty tracking to force trigger callbacks later.
  def files=(files)
    @files = [files].flatten.compact
    content_will_change! if @files.present?
  end

  def file_ids_destroy=(ids)
    @file_ids_destroy = [ids].flatten.compact
    content_will_change! if @file_ids_destroy.present?
  end

protected

  def remove_attachments
    return unless @file_ids_destroy.present?

    attachments.where(id: @file_ids_destroy).destroy_all
  end

  def add_attachments
    return if @files.blank?

    # If we're dealing with a single file
    if tag == 'file'
      @files = [@files.first]
      attachments&.purge_later
    end

    attachments.attach(@files)
  end
end
</file>

<file path="app/views/comfy/admin/cms/files/index.html.haml">
- content_for :right_column do
  = render "comfy/admin/cms/categories/index", type: "Comfy::Cms::File"

:ruby
  session_id = request.session_options[:id]
  session_id_value = session_id.respond_to?(:public_id) ? session_id.public_id : session_id.to_s
  cms_uploader_data = {
    cms_uploader: {
      url: comfy_admin_cms_site_files_path(@site, source: :plupload, categories: params[:categories]),
      token: { name: request_forgery_protection_token, value: form_authenticity_token },
      session: { name: Rails.application.config.session_options[:key], value: session_id_value }
    }
  }

#cms-uploader{data: cms_uploader_data}
  #cms-uploader-drag-drop-target

  .page-header
    = link_to t('.new_link'), new_comfy_admin_cms_site_file_path(@site), class: "btn btn-secondary float-right", id: "cms-uploader-browse"
    %h2= t('.title')

  = comfy_admin_partial "comfy/admin/cms/partials/files_before"

  = comfy_paginate @files

  %ul.list.sortable.cms-uploader-filelist
    = render partial: "file", collection: @files

  = comfy_admin_partial "comfy/admin/cms/partials/files_after"

  = comfy_paginate @files
</file>

<file path="app/views/comfy/admin/cms/pages/_form.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/page_form_before", form: form

= form.text_field :label, data: { slugify: @page.new_record? }

- if @page.parent.present?
  = form.text_field :slug, data: { slug: true }, prepend: @page.parent.full_path

- if (options = ::Comfy::Cms::Page.options_for_select(site: @site, current_page: @page, exclude_self: true)).present?
  = form.select :parent_id, options, bootstrap: {custom_control: true}

- if (options = ::Comfy::Cms::Layout.options_for_select(@site)).present?
  = form.select :layout_id, options, {bootstrap: {custom_control: true}}, {data: {url: form_fragments_comfy_admin_cms_site_page_path(@site, @page.id.to_i)}, id: "fragments-toggle"}

= comfy_admin_partial "comfy/admin/cms/partials/page_form_inner", form: form

#form-fragments-container
  = render "comfy/admin/cms/fragments/form_fragments", record: @page, scope: :page

= render "comfy/admin/cms/categories/form", form: form

- if (options = ::Comfy::Cms::Page.options_for_select(site: @site, current_page: @page)).present?
  = form.select :target_page_id, [["---- #{t('.select_target_page')} ----", nil]] + options, bootstrap: {custom_control: true}

= form.check_box :is_published

= comfy_admin_partial "comfy/admin/cms/partials/page_form_after", form: form

= form.form_actions do
  = submit_tag t(".preview"), name: "preview", formtarget: "comfy-cms-preview", id: nil, class: "btn btn-secondary"
  = submit_tag t(@page.new_record?? ".create" : ".update"), class: "btn btn-primary ml-sm-1"
  = link_to t(".cancel"), comfy_admin_cms_site_pages_path, class: "btn btn-link"
</file>

<file path="app/views/layouts/comfy/admin/cms/_left.html.haml">
= comfy_admin_partial "comfy/admin/cms/partials/navigation_before"

%nav.navbar.navbar-expand-lg
  %button.navbar-toggler{type: "button", data: {toggle:"collapse", target: "#leftnav"}, aria: {controls: "navbarSupportedContent", expanded: "false", label: "Toggle navigation"}}
    %i.fas.fa-bars

  #leftnav.navbar-collapse.collapse

    %ul.nav.nav-pills
      %li.nav-item
        = active_link_to comfy_admin_cms_sites_path, class: "nav-link", active: ['comfy/admin/cms/sites'] do
          = t('comfy.admin.cms.base.sites')

      - if @site && !@site.new_record?
        %li.nav-item
          = active_link_to comfy_admin_cms_site_layouts_path(@site), class: "nav-link" do
            = t('comfy.admin.cms.base.layouts')
        %li.nav-item
          = active_link_to comfy_admin_cms_site_pages_path(@site), class: "nav-link" do
            = t('comfy.admin.cms.base.pages')
        %li.nav-item
          = active_link_to comfy_admin_cms_site_snippets_path(@site), class: "nav-link" do
            = t('comfy.admin.cms.base.snippets')
        %li.nav-item
          - unless is_active_link?(comfy_admin_cms_site_files_path(@site))
            %a.cms-files-open-modal{href: comfy_admin_cms_site_files_path(@site), title: "Open library"}
              %i.fas.fa-bars
          = active_link_to comfy_admin_cms_site_files_path(@site), class: "nav-link" do
            = t('comfy.admin.cms.base.files')

      = cms_hook :navigation

      = comfy_admin_partial "comfy/admin/cms/partials/navigation_inner"

= comfy_admin_partial "comfy/admin/cms/partials/navigation_after"

.left-footer
  = link_to 'ComfortableMediaSurfer', 'https://github.com/shakacode/comfortable-media-surfer', target: '_blank'
  %span.version= ComfortableMediaSurfer::VERSION
  %br
  = link_to 'Rails', 'https://rubyonrails.org', target: '_blank'
  %span.version= Rails::version
  = link_to 'Ruby', 'https://www.ruby-lang.org', target: '_blank'
  %span.version= RUBY_VERSION
  %br
  = Rails.env.upcase + ' - ' + ActiveRecord::Base.connection.adapter_name
</file>

<file path="config/environments/production.rb">
# frozen_string_literal: true

require 'active_support/core_ext/integer/time'

defined?(ComfortableMediaSurfer::Application) && ComfortableMediaSurfer::Application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in ENV["RAILS_MASTER_KEY"], config/master.key, or an environment
  # key such as config/credentials/production.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Enable static file serving from the `/public` folder (turn off if using NGINX/Apache for it).
  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
  # config.action_dispatch.x_sendfile_header = "X-Accel-Redirect" # for NGINX

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Mount Action Cable outside main process or domain.
  # config.action_cable.mount_path = nil
  # config.action_cable.url = "wss://example.com/cable"
  # config.action_cable.allowed_request_origins = [ "http://example.com", /http:\/\/example.*/ ]

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  # Can be used together with config.force_ssl for Strict-Transport-Security and secure cookies.
  # config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Log to STDOUT by default
  config.logger = ActiveSupport::Logger.new($stdout)
    .tap  { |logger| logger.formatter = Logger::Formatter.new }
    .then { |logger| ActiveSupport::TaggedLogging.new(logger) }

  # Prepend all log lines with the following tags.
  config.log_tags = [:request_id]

  # Info include generic and useful information about system operation, but avoids logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII). If you
  # want to log everything, set the level to "debug".
  config.log_level = ENV.fetch('RAILS_LOG_LEVEL', 'info')

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store

  # Use a real queuing backend for Active Job (and separate queues per environment).
  # config.active_job.queue_adapter     = :resque
  # config.active_job.queue_name_prefix = "comfy_production"

  config.action_mailer.perform_caching = false

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end
</file>

<file path="config/environments/test.rb">
# frozen_string_literal: true

require 'active_support/core_ext/integer/time'

# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

defined?(ComfortableMediaSurfer::Application) && ComfortableMediaSurfer::Application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  config.active_job.queue_adapter = :test # added for Rails 7.1

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV['CI'].present?

  # Configure public file server for tests with Cache-Control for performance.
  config.public_file_server.enabled = true
  config.public_file_server.headers = {
    'Cache-Control' => "public, max-age=#{1.hour.to_i}"
  }

  # Show full error reports and disable caching.
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = false
  config.cache_store = :null_store

  # Raise exceptions instead of rendering exception templates.
  config.action_dispatch.show_exceptions = if Gem::Version.new(Rails.version) < Gem::Version.new('7.1.0')
                                             false
                                           else
                                             :none
                                           end

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  config.action_mailer.perform_caching = false

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  if Gem::Version.new(Rails.version) >= Gem::Version.new('7.1.0')
    # Raise error when a before_action's only/except options reference missing actions
    config.action_controller.raise_on_missing_callback_actions = true
  end
end
</file>

<file path="config/locales/ar.yml">
ar:
  activerecord:
    models:
      comfy/cms/site: الموقع
      comfy/cms/layout: تصميم
      comfy/cms/page: الصفحة
      comfy/cms/snippet: قصاصة
      comfy/cms/file: ملف
      comfy/cms/translation: الترجمة

    attributes:
      comfy/cms/site:
        identifier: المعرّف
        label: عنوان
        hostname: اسم مضيف الموقع
        path: مسار
        locale: اللغة
      comfy/cms/layout:
        identifier: المعرّف
        label: اسم التخطيط
        app_layout: التصميم
        parent_id: التخطيط الرئيسي
        content: المحتوى
        css: أوراق الأنماط
        js: جافا سكريبت
      comfy/cms/page:
        label: عنوان
        layout_id: تصميم
        slug: كلمة الدلالة
        full_path: المسار الكامل
        parent_id: الآب
        target_page_id: إعادة توجيه الي
        content: المحتوى
        is_published: نشرت
      comfy/cms/file:
        label: عنوان
        file: ملف
        description: الوصف
      comfy/cms/snippet:
        label: عنوان
        identifier: المعرّف
        content: المحتوى
      comfy/cms/translation:
        locale: اللغة
        label: عنوان
        layout_id: تصميم
        is_published: نشرت

  comfy:
    cms:
      content:
        site_not_found: غير موجود
        layout_not_found: تخطيط غير موجود
        page_not_found: الصفحة غير موجودة

    admin:
      cms:
        base:
          site_not_found: غير موجود
          seeds_enabled: يتم تمكين بذور CMS. سيتم تجاهل جميع التغييرات التي أجريت هنا.
          sites: المواقع الخاصة بي
          layouts: مخطط
          pages: الصفحات
          snippets: مقتطفات
          files: ملفات

        sites:
          created: موقع جديد تم انشاءه
          creation_failure: فشل في إنشاء الموقع
          updated: تحديث الموقع
          update_failure: فشل في تحديث الموقع
          deleted: تم الحذف
          not_found: غير موجود

          index:
            title: المواقع الخاصة بي
            new_link: إنشاء جديد
            select: اختيار الموقع
            edit: تعديل
            delete: حذف
            are_you_sure: هل أنت متأكد أنك تريد حذف هذا؟
          new:
            title: موقع جديد
          edit:
            title: تعديل
          form:
            create: إنشاء موقع
            cancel: إلغاء
            update: تحديث الموقع

        layouts:
          created: إنشاء تخطيط
          creation_failure: لا يمكن إنشاء النسق
          updated: تم تحديث التصميم
          update_failure: فشل في تحديث التصميم
          deleted: تم حذف التصميم
          not_found: تخطيط غير موجود

          index:
            title: مخطط
            new_link: إنشاء تخطيط جديد
          index_branch:
            add_child_layout: إضافة تخطيط الطفل
            edit: تعديل
            delete: حذف
            are_you_sure: هل أنت متاكد؟
          new:
            title: تصميم جديد
          edit:
            title: تحرير التخطيط
          form:
            select_parent_layout: التخطيط الرئيسي
            select_app_layout: حدد تخطيط التطبيق
            create: انشاء تصميم
            cancel: إلغاء
            update: تحديث التخطيط

        pages:
          created: تم إنشاء الصفحة
          creation_failure: فشل في إنشاء الصفحة
          updated: تحديث الصفحة
          update_failure: فشل في تحديث الصفحة
          deleted: تم حذف الصفحة
          not_found: الصفحة غير موجودة
          layout_not_found: لم يتم العثور على تخطيطات يرجى إنشاء واحد.

          index:
            title: الصفحات
            new_link: إنشاء صفحة جديدة
          index_branch:
            toggle: تبديل
            add_child_page: أضف صفحة فرعية
            edit: تعديل
            delete: حذف
            are_you_sure: هل أنت متاكد؟
          new:
            title: صفحة جديدة
          edit:
            title: تعديل
          form:
            select_target_page: لا إعادة توجيه
            preview: معاينة
            create: إنشاء صفحة
            cancel: إلغاء
            update: تحديث الصفحة
            choose_link: اختر الصفحة...

        fragments:
          form_fragments:
            no_tags: |-
              لا يحتوي التخطيط على علامات محتوى محددة.<br/>
              تحرير محتوى تخطيط لتضمين علامة التجزئة. فمثلا: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: تم إنشاء الترجمة
          creation_failure: فشل في إنشاء الترجمة
          updated: تم تحديث الترجمة
          update_failure: فشل في تحديث الترجمة
          deleted: تم حذف الترجمة
          not_found: لم يتم العثور على الترجمة

          new:
            title: ترجمة جديدة
          edit:
            title: تحرير الترجمة
          form:
            preview: معاينة
            create: إنشاء
            update: تحديث
            cancel: الرجوع إلى
          sidebar:
            new: ترجمة جديدة
            confirm: هل أنت متاكد؟

        snippets:
          created: تم إنشاء مقتطف
          creation_failure: فشل في إنشاء مقتطف
          updated: تم تحديث المقتطف
          update_failure: فشل تحديث المقتطف
          deleted: تم حذف المقتطف
          not_found: مقتطف غير موجود

          index:
            title: مقتطفات
            new_link: إنشاء مقتطف جديد
            edit: تعديل
            delete: حذف
            are_you_sure: هل أنت متاكد؟
          new:
            title: مقتطف جديد
          edit:
            title: تحرير مقتطف
          form:
            create: إنشاء مقتطف جديد
            cancel: إلغاء
            update: تحديث مقتطف

        revisions:
          reverted: محتوى عاد
          record_not_found: لم يتم العثور على السجل
          not_found: لم يتم العثور على المراجعة

          show:
            title: مراجعات لـ
            revision: الإصدار
            update: تحديث لهذا المراجعة
            cancel: إلغاء
            content: المحتوى
            changes: التغييرات
            previous: السابق
            current: الحالي
          sidebar:
            revision:
              zero: لا مراجعات
              one: '٪ {count} المراجعة'
              few: '٪ {count} المراجعات'
              many: '٪ {count} المراجعات'
              other: '٪ {count} المراجعات'

        files:
          created: الملفات المحملة
          creation_failure: فشل تحميل الملفات
          updated: تم تحديث الملف
          update_failure: فشل في تحديث الملف
          deleted: تم حذف الملف‬
          not_found: لم يتم العثور على الملف

          index:
            title: ملفات
            new_link: رفع ملف جديد
            button: رفع الملفات
          new:
            title: ملف جديد
          edit:
            title: تعديل
          form:
            current_file: الملف الحالي
            create: رفع ملف
            cancel: إلغاء
            update: تحديث الملف
            delete: حذف الملف
            are_you_sure: هل أنت متاكد؟
          page_form:
            are_you_sure: هل أنت متاكد؟
          file:
            edit: تعديل
            delete: حذف
            are_you_sure: هل أنت متاكد؟

        categories:
          index:
            edit: تعديل
            done: تم
            all: كل الفئات
            add: إضافة
            add_placeholder: إضافة فئة
          show:
            are_you_sure: هل أنت متاكد؟
          edit:
            save: حفظ
          form:
            label: الفئات
</file>

<file path="config/locales/de.yml">
de:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Vorlage
      comfy/cms/page: Seite
      comfy/cms/snippet: Schnipsel
      comfy/cms/file: Datei
      comfy/cms/translation: Übersetzung

    attributes:
      comfy/cms/site:
        identifier: Name
        label: Bezeichnung
        hostname: Hostname
        path: Pfad
        locale: Sprache
      comfy/cms/layout:
        identifier: Eindeutiger Name
        label: Name
        app_layout: Grundlegendes Layout
        parent_id: Übergeordnete Vorlage
        content: Inhalt
        css: CSS-Stilvorlage
        js: JavaScript
      comfy/cms/page:
        label: Titel
        layout_id: Vorlage
        slug: URL-Teil
        full_path: Vollständiger Pfad
        parent_id: Vorfahre
        target_page_id: Weiterleitung zu Seite
        content: Inhalt
        is_published: Veröffentlicht
      comfy/cms/file:
        label: Bezeichnung
        file: Datei
        description: Beschreibung
      comfy/cms/snippet:
        identifier: Eindeutiger Name
        label: Bezeichnung
        content: Inhalt
      comfy/cms/translation:
        locale: Sprache
        label: Label
        layout_id: Vorlage
        is_published: Veröffentlicht

  comfy:
    cms:
      content:
        site_not_found: Site nicht gefunden
        layout_not_found: Vorlage nicht gefunden
        page_not_found: Seite nicht gefunden

    admin:
      cms:
        base:
          site_not_found: Fehler
          seeds_enabled: Fixtures sind aktiviert - alle Änderungen werden verworfen!
          sites: Sites
          layouts: Vorlagen
          pages: Seiten
          snippets: Schnipsel
          files: Dateien

        sites:
          created: Site erstellt
          creation_failure: Fehler beim Erstellen der Site!
          updated: Site aktualisiert
          update_failure: Fehler beim Aktualisieren der Site!
          deleted: Site gelöscht
          not_found: Site existiert nicht

          index:
            title: Sites
            new_link: Neue Site erstellen
            select: Auswählen
            edit: Bearbeiten
            delete: Löschen
            are_you_sure: Sicher, dass Sie diese Site löschen möchten?
          new:
            title: Site erstellen
          edit:
            title: Site bearbeiten
          form:
            create: Site erstellen
            cancel: Abbrechen
            update: Site speichern

        layouts:
          created: Vorlage erstellt
          creation_failure: Fehler beim Erstellen der Vorlage!
          updated: Vorlage aktualisiert
          update_failure: Fehler beim Aktualisieren der Vorlage!
          deleted: Vorlage gelöscht
          not_found: Vorlage nicht gefunden

          index:
            title: Vorlagen
            new_link: Neue Vorlage erstellen
          index_branch:
            add_child_layout: Neue, untergeordnete Vorlage erstellen
            edit: Vorlage bearbeiten
            delete: Vorlage löschen
            are_you_sure: Sind Sie sicher, dass Sie diese Vorlage löschen möchten?
          new:
            title: Neue Vorlage
          edit:
            title: Vorlage bearbeiten
          form:
            select_parent_layout: Übergeordnete Vorlage auswählen
            select_app_layout: Grundlegendes Layout auswählen
            create: Vorlage erstellen
            cancel: Abbrechen
            update: Vorlage speichern

        pages:
          created: Seite erstellt
          creation_failure: Fehler beim Erstellen der Seite!
          updated: Seite aktualisiert
          update_failure: Fehler beim Aktualisieren der Seite!
          deleted: Seite gelöscht
          not_found: Seite nicht gefunden
          layout_not_found: Bisher wurde keine Vorlage angelegt!

          index:
            title: Seiten
            new_link: Neue Seite erstellen
          index_branch:
            toggle: Schalter
            add_child_page: Neue, untergeordnete Seite erstellen
            edit: Bearbeiten
            delete: Löschen
            are_you_sure: Sind Sie sicher, dass Sie diese Seite löschen möchten?
          new:
            title: Seite erstellen
          edit:
            title: Seite bearbeiten
          form:
            select_target_page: Keine Weiterleitung
            preview: Vorschau
            create: Seite erstellen
            cancel: Abbrechen
            update: Seite speichern
            choose_link: Seite auswählen...

        fragments:
          form_fragments:
            no_tags: |-
              Das gewählte Layout hat kein Comfy-Tags deklariert, daher kann diese Seite nicht bearbeitet werden.<br/>
              Beispiel: <code>{{ cms:wysiwyg content }}</code>

        translations:
          created: Übersetzung angelegt
          creation_failure: Fehler beim Anlegen der Übersetzung!
          updated: Übersetzung aktualisiert
          update_failure: Fehler beim Aktualisieren der Übersetzung!
          deleted: Übersetzung gelöscht
          not_found: Übersetzung nicht gefunden

          new:
            title: Übersetzung erstellen
          edit:
            title: Übersetzung bearbeiten
          form:
            preview: Vorschau
            create: Neue Übersetzung
            update: Überstzung speichern
            cancel: Zurück zur Seite
          sidebar:
            new: Neue Übersetzung
            confirm: Sind Sie sicher?

        snippets:
          created: Schnipsel erstellt
          creation_failure: Fehler beim Erstellen des Schnipsels!
          updated: Schnipsel aktualisiert
          update_failure: Fehler beim Aktualisieren des Schnipsels!
          deleted: Schnipsel gelöscht
          not_found: Schnipsel nicht angelegt

          index:
            title: Schnipsel
            new_link: Neuen Schnipsel erstellen
            edit: Schnipsel bearbeiten
            delete: Schnipsel löschen
            are_you_sure: Sind Sie sicher, dass Sie diesen Schnipsel löschen möchten?
          new:
            title: Schnipsel erstellen
          edit:
            title: Schnipsel bearbeiten
          form:
            create: Schnipsel erstellen
            cancel: Abbrechen
            update: Schnipsel speichern

        revisions:
          reverted: Inhalt wurde aus gewählter Version wiederhergestellt
          record_not_found: Eintrag in gewählter Version nicht gefunden
          not_found: Version nicht gefunden

          show:
            title: Versionen von
            revision: Version
            update: Zurücksetzen auf gewählte Version
            cancel: Abbrechen
            content: Inhalt
            changes: Änderungen
            previous: Vorherige Version
            current: Aktuell
          sidebar:
            revision:
              zero: Keine Versionen
              one: '%{count} Version'
              few: '%{count} Versionen'
              many: '%{count} Versionen'
              other: '%{count} Versionen'

        files:
          created: Datei hochgeladen
          creation_failure: Fehler beim Hochladen der Datei!
          updated: Datei hochgeladen
          update_failure: Fehler beim Aktualisieren der Datei!
          deleted: Datei gelöscht
          not_found: Datei nicht gefunden

          index:
            title: Dateien
            new_link: Neue Datei hochladen
            button: Datei hochladen
          new:
            title: Datei erstellen
          edit:
            title: Datei bearbeiten
          form:
            current_file: Aktuelle Datei
            create: Datei hochladen
            cancel: Abbrechen
            update: Datei speichern
            delete: Datei löschen
            are_you_sure: Sind Sie sicher, dass Sie diese Datei löschen möchten?
          page_form:
            are_you_sure: Sind Sie sicher?
          file:
            edit: Datei bearbeiten
            delete: Datei löschen
            are_you_sure: Sind Sie sicher?

        categories:
          index:
            edit: Bearbeiten
            done: Erledigt
            all: Alle Kategorien
            add: Hinzufügen
            add_placeholder: Kategorie hinzuzufügen
          show:
            are_you_sure: Sind Sie sicher, dass Sie diese Kategorie löschen möchten?
          edit:
            save: Kategorie speichern
          form:
            label: Kategorien
</file>

<file path="config/locales/en.yml">
en:
  activerecord:
    models:
      comfy/cms/site: Site
      comfy/cms/layout: Layout
      comfy/cms/page: Page
      comfy/cms/snippet: Snippet
      comfy/cms/file: File
      comfy/cms/translation: Translation

    attributes:
      comfy/cms/site:
        identifier: Identifier
        label: Label
        hostname: Hostname
        path: Path
        locale: Language
      comfy/cms/layout:
        identifier: Identifier
        label: Layout Name
        app_layout: App Layout
        parent_id: Parent Layout
        content: Content
        css: Stylesheet
        js: Javascript
      comfy/cms/page:
        label: Label
        layout_id: Layout
        slug: Slug
        full_path: Full path
        parent_id: Parent
        target_page_id: Redirect to Page
        content: Content
        is_published: Published
      comfy/cms/file:
        label: Label
        file: File
        description: Description
      comfy/cms/snippet:
        label: Label
        identifier: Identifier
        content: Content
      comfy/cms/translation:
        locale: Language
        label: Label
        layout_id: Layout
        is_published: Published

  comfy:
    cms:
      content:
        site_not_found: Site Not Found
        layout_not_found: Layout Not Found
        page_not_found: Page Not Found

    admin:
      cms:
        base:
          site_not_found: Site not found
          seeds_enabled: CMS Seeds are enabled. All changes done here will be discarded.
          sites: Sites
          layouts: Layouts
          pages: Pages
          snippets: Snippets
          files: Files

        sites:
          created: Site created
          creation_failure: Failed to create site
          updated: Site updated
          update_failure: Failed to update site
          deleted: Site deleted
          not_found: Site not found

          index:
            title: Sites
            new_link: Create New Site
            select: Select Site
            edit: Edit
            delete: Delete
            are_you_sure: Are you sure you want to delete this site?
          new:
            title: New Site
          edit:
            title: Editing Site
          form:
            create: Create Site
            cancel: Cancel
            update: Update Site

        layouts:
          created: Layout created
          creation_failure: Failed to create layout
          updated: Layout updated
          update_failure: Failed to update layout
          deleted: Layout deleted
          not_found: Layout not found

          index:
            title: Layouts
            new_link: Create New Layout
          index_branch:
            add_child_layout: Add Child Layout
            edit: Edit
            delete: Delete
            are_you_sure: Are you sure?
          new:
            title: New Layout
          edit:
            title: Editing Layout
          form:
            select_parent_layout: Select Parent Layout
            select_app_layout: Select Application Layout
            create: Create Layout
            cancel: Cancel
            update: Update Layout

        pages:
          created: Page created, siblings, and parent updated
          creation_failure: Failed to create page
          updated: Page, siblings, and parent updated
          update_failure: Failed to update page
          deleted: Page deleted, siblings, and parent updated
          not_found: Page not found
          layout_not_found: No Layouts found. Please create one.

          index:
            title: Pages
            new_link: Create New Page
          index_branch:
            toggle: Toggle
            add_child_page: Add Child Page
            edit: Edit
            delete: Delete
            are_you_sure: Are you sure?
          new:
            title: New Page
          edit:
            title: Editing Page
          form:
            select_target_page: No Redirect
            preview: Preview
            create: Create Page
            cancel: Cancel
            update: Update Page
            choose_link: Select page...

        fragments:
          form_fragments:
            no_tags: |-
              Layout has no content tags defined.<br/>
              Edit Layout content to include a fragment tag. For example: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Translation created
          creation_failure: Failed to create translation
          updated: Translation updated
          update_failure: Failed to update translation
          deleted: Translation deleted
          not_found: Translation not found

          new:
            title: New Translation
          edit:
            title: Editing Translation
          form:
            preview: Preview
            create: Create
            update: Update
            cancel: Return to Page
          sidebar:
            new: New Translation
            confirm: Are you sure?

        snippets:
          created: Snippet created
          creation_failure: Failed to create snippet
          updated: Snippet updated
          update_failure: Failed to update snippet
          deleted: Snippet deleted
          not_found: Snippet not found

          index:
            title: Snippets
            new_link: Create New Snippet
            edit: Edit
            delete: Delete
            are_you_sure: Are you sure?
          new:
            title: New Snippet
          edit:
            title: Editing Snippet
          form:
            create: Create Snippet
            cancel: Cancel
            update: Update Snippet

        revisions:
          reverted: Content Reverted
          record_not_found: Record Not Found
          not_found: Revision Not Found

          show:
            title: Revisions for
            revision: Revision
            update: Update to this Revision
            cancel: Cancel
            content: Content
            changes: Changes
            previous: Previous
            current: Current
          sidebar:
            revision:
              zero: No Revisions
              one: '%{count} Revision'
              few: '%{count} Revisions'
              many: '%{count} Revisions'
              other: '%{count} Revisions'

        files:
          created: Files uploaded
          creation_failure: Failed to upload files
          updated: File updated
          update_failure: Failed to update file
          deleted: File deleted
          not_found: File not found

          index:
            title: Files
            new_link: Upload New File
            button: Upload Files
          new:
            title: New File
          edit:
            title: Editing File
          form:
            current_file: Current File
            create: Upload File
            cancel: Cancel
            update: Update File
            delete: Delete File
            are_you_sure: Are you sure?
          page_form:
            are_you_sure: Are you sure?
          file:
            edit: Edit
            delete: Delete
            are_you_sure: Are you sure?

        categories:
          index:
            edit: Edit
            done: Done
            all: All Categories
            add: Add
            add_placeholder: Add Category
          show:
            are_you_sure: Are you sure?
          edit:
            save: Save
          form:
            label: Categories
</file>

<file path="config/locales/hr.yml">
hr:
  activerecord:
    models:
      comfy/cms/site: Website
      comfy/cms/layout: Predložak
      comfy/cms/page: Stranica
      comfy/cms/snippet: Isječak
      comfy/cms/file: Datoteka
      comfy/cms/translation: Prijevod

    attributes:
      comfy/cms/site:
        identifier: Identifikator
        label: Naziv
        hostname: Host (URL)
        path: Putanja
        locale: Prijevod
      comfy/cms/layout:
        identifier: Identifikator
        label: Naziv
        app_layout: Predložak iz applikacije
        parent_id: Nedređeni Predložak
        content: Sadržaj
        css: Stylesheet
        js: Javaskripta
      comfy/cms/page:
        label: Naziv
        layout_id: Predložak
        slug: Slug
        full_path: Putanja
        parent_id: Nedređena stranica
        target_page_id: Preusmjeri na stranicu
        content: Sadržaj
        is_published: Objavljeno
      comfy/cms/file:
        label: Naziv
        file: Datoteka
        description: Opis
      comfy/cms/snippet:
        label: Naziv
        identifier: Identifikator
        content: Sadržaj
      comfy/cms/translation:
        locale: Prijevod
        label: Naziv
        layout_id: Predložak
        is_published: Objavljeno

  comfy:
    cms:
      content:
        site_not_found: Website nije pronađen
        layout_not_found: Predložak nije pronađen
        page_not_found: Stranica nije pronađena

    admin:
      cms:
        base:
          site_not_found: Website nije pronađen.
          seeds_enabled: Opcija CMS Seeds je uključena. Promjene neće biti sačuvane.
          sites: Website
          layouts: Predlošci
          pages: Stranice
          snippets: Isječci
          files: Datoteke

        sites:
          created: Website kreiran
          creation_failure: Website nije kreiran
          updated: Website ažuriran
          update_failure: Website nije ažuriran
          deleted: Website izbrisan
          not_found: Website nije pronađen

          index:
            title: Website
            new_link: Kreiraj novi website
            select: Odaberi
            edit: Uredi
            delete: Izbriši
            are_you_sure: Da li ste sigurni da želite obrisati ovaj website?
          new:
            title: Novi website
          edit:
            title: Uredi website
          form:
            create: Kreiraj website
            cancel: Otkaži
            update: Ažuriraj

        layouts:
          created: Predložak kreiran
          creation_failure: Predložak nije kreiran
          updated: Predložak ažuriran
          update_failure: Predložak nije ažuriran
          deleted: Predložak izbrisan
          not_found: Predložak nije pronađen

          index:
            title: Predložak
            new_link: Kreiraj novi predložak
          index_branch:
            add_child_layout: Dodaj podređeni predložak
            edit: Uredi
            delete: Izbriši
            are_you_sure: Jesite li sigurni?
          new:
            title: Novi predložak
          edit:
            title: Uređivanje predloška
          form:
            select_parent_layout: Odaberi nadređeni predložak
            select_app_layout: Odaberi predložak iz aplikacije
            create: Kreiraj predložak
            cancel: Otkaži
            update: Ažuriraj predložak

        pages:
          created: Stranica kreirana
          creation_failure: Kreiranje stranice nije uspjelo
          updated: Stranica ažurirana
          update_failure: Ažuriranje nije uspjelo
          deleted: Stranica izbrisana
          not_found: Stranica nije pronađena
          layout_not_found: Nema aktivnih predložaka. Molimo vas prvo kreirajte predložak.

          index:
            title: Stranice
            new_link: Kreiraj novu stranicu
          index_branch:
            toggle: Pomakni
            add_child_page: Dodaj podređenu stranicu
            edit: Uredi
            delete: Izbriši
            are_you_sure: Jesite li sigurni?
          new:
            title: Nova stranica
          edit:
            title: Uređivanje stranice
          form:
            select_target_page: Nema redirekcije
            preview: Pregled
            create: Kreiraj stranicu
            cancel: Otkaži
            update: Ažuriraj
            choose_link: Odaberi stranicu...

        fragments:
          form_fragments:
            no_tags: |-
              Predložak nema definiranih tagova.<br/>
              Uredi predložak tako da sadrži barem jedan tag. Na primjer: <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Prijevod kreiran
          creation_failure: Kreiranje prijevoda nije uspjelo
          updated: Prijevod ažuriran
          update_failure: Ažuriranje prijevoda nije uspjelo
          deleted: Prijevod izbrisan
          not_found: Prijevod nije pronađen

          new:
            title: Novi prijevod
          edit:
            title: Uredi prijevod
          form:
            preview: Pregled
            create: Kreiraj
            update: Ažuriraj
            cancel: Povratak na stranicu
          sidebar:
            new: Novi prijevod
            confirm: Jesite li sigurni?

        snippets:
          created: Isječak kreiran
          creation_failure: Kreiranje isječka nije bilo uspješno
          updated: Isječak ažuriran
          update_failure: Ažuriranje isječka nije bilo usjpješno
          deleted: Isječak izbrisan
          not_found: Isječak nije pronađen

          index:
            title: Isječci
            new_link: Kreiraj novi isječak
            edit: Uredi
            delete: Izbriši
            are_you_sure: Jesite li sigurni?
          new:
            title: Novi isječak
          edit:
            title: Uređivanje isječka
          form:
            create: Kreiraj isječak
            cancel: Otkaži
            update: Ažuriraj isječak

        revisions:
          reverted: Sadržaj je poništen
          record_not_found: Zapis nije pronađen
          not_found: Revizija nije pronađena

          show:
            title: Revizija za
            revision: Revizija
            update: Ažuriraj na ovu reveiziju
            cancel: Otkaži
            content: Sadržaj
            changes: Promjene
            previous: Prethodna
            current: Trenutačna
          sidebar:
            revision:
              zero: Nema revizija
              one: '%{count} revizija'
              few: '%{count} revizija'
              many: '%{count} revizija'
              other: '%{count} revizija'

        files:
          created: Datoteka učitana
          creation_failure: Učitavanje datoteka nije uspješno
          updated: Datoteka ažurirana
          update_failure: Ažuriranje datoteke nije uspješno
          deleted: Datoteka izbrisana
          not_found: Datoteka nije pronađena

          index:
            title: Datoteke
            new_link: Dodaj novu datoteku
            button: Učitavanje datoteke
          new:
            title: Nova datoteka
          edit:
            title: Uredi datoteku
          form:
            current_file: Trenutačna datoteka
            create: Učitavanje datoteke
            cancel: Otkaži
            update: Ažuriraj datoteku
            delete: Izbriši datoteku
            are_you_sure: Jesite li sigurni?
          page_form:
            are_you_sure: Jesite li sigurni?
          file:
            edit: Uredi
            delete: Izbriši
            are_you_sure: Jesite li sigurni?

        categories:
          index:
            edit: Uredi
            done: Završi
            all: Sve kategorije
            add: Dodaj
            add_placeholder: Dodaj kategoriju
          show:
            are_you_sure: Jesite li sigurni?
          edit:
            save: Spremi
          form:
            label: Kategorije
</file>

<file path="config/locales/pl.yml">
pl:
  activerecord:
    models:
      comfy/cms/site: Witryna
      comfy/cms/layout: Szablon
      comfy/cms/page: Strona
      comfy/cms/snippet: Snippet
      comfy/cms/file: Plik
      comfy/cms/translation: Tłumaczenie

    attributes:
      comfy/cms/site:
        identifier: Identyfikator
        label: Tytuł
        hostname: Nazwa hosta
        path: Ścieżka
        locale: Język
      comfy/cms/layout:
        identifier: Identyfikator
        label: Szablon
        app_layout: Szablon aplikacji
        parent_id: Rodzic
        content: Zawartość
        css: Style
        js: Javascript
      comfy/cms/page:
        label: Tytuł
        layout_id: Szablon
        slug: Przyjazna ścieżka
        full_path: Pełna ścieżka
        parent_id: Rodzic
        target_page_id: Przekieruj do strony
        content: Zawartość
        is_published: Opublikowana
      comfy/cms/file:
        label: Tytuł
        file: Plik
        description: Opis
      comfy/cms/snippet:
        identifier: Identyfikator
        label: Tytuł
        content: Zawartość
      comfy/cms/translation:
        locale: Język
        label: Nazwa
        layout_id: Szablon
        is_published: Opublikowano

  comfy:
    cms:
      content:
        site_not_found: Witryna nie została znaleziona
        layout_not_found: Szablon nie został znaleziony
        page_not_found: Strona nie została znaleziona

    admin:
      cms:
        base:
          site_not_found: Strona nie została znaleziona
          seeds_enabled: Fikstury CMS są włączone. Wszystkie zmiany zapisane tutaj nie będą uwzględnione.
          sites: Witryny
          layouts: Szablony
          pages: Strony
          snippets: Snippety
          files: Pliki

        sites:
          created: Witryna została utworzona
          creation_failure: Błąd przy tworzeniu witryny
          updated: Witryna została uaktualniona
          update_failure: Błąd przy uaktualnianiu witryny
          deleted: Witryna została usunięta
          not_found: Nie znaleziono witryny

          index:
            title: Witryny
            new_link: Utwórz nową witrynę
            select: Wybierz witrynę
            edit: Edytuj
            delete: Usuń
            are_you_sure: Jesteś pewien, że chce usunąć tą witrynę?
          new:
            title: Nowa witryna
          edit:
            title: Edytuj witrynę
          form:
            create: Utwórz witrynę
            cancel: Anuluj
            update: Uaktualnij witrynę

        layouts:
          created: Szablon został utworzony
          creation_failure: Błąd przy tworzeniu szablonu
          updated: Szablon został uaktualniony
          update_failure: Błąd przy uaktualnianiu szablonu
          deleted: Szablon został usunięty
          not_found: Nie znaleziono szablonu

          index:
            title: Szablony
            new_link: Utwórz nowy szablon
          index_branch:
            add_child_layout: Dodaj podszablon
            edit: Edytuj
            delete: Usuń
            are_you_sure: Jesteś pewien?
          new:
            title: Nowy szablon
          edit:
            title: Edytuj szablon
          form:
            select_parent_layout: Wybierz szablon rodzica
            select_app_layout: Wybierz szablon aplikacji
            create: Stwórz szablon
            cancel: Anuluj
            update: Uaktualnij szablon

        pages:
          created: Strona została utworzona
          creation_failure: Błąd przy tworzeniu strony
          updated: Strona została uaktualniona
          update_failure: Błąd przy uaktualnianiu strony
          deleted: Strona została usunięta
          not_found: Nie znaleziono strony
          layout_not_found: Brakuje szablonu. Proszę utworzyć

          index:
            title: Strony
            new_link: Utwórz nową stronę
          index_branch:
            toggle: Przełącz
            add_child_page: Dodaj podstronę
            edit: Edytuj
            delete: Usuń
            are_you_sure: Jesteś pewien?
          new:
            title: Nowa strona
          edit:
            title: Edytuj stronę
          form:
            select_target_page: Bez przekierowania
            preview: Podgląd
            create: Utwórz stronę
            cancel: Anuluj
            update: Uaktualnij stronę
            choose_link: Wybierz stronę...

        fragments:
          form_fragments:
            no_tags: |-
              Szablon nie ma zdefiniowanych tagów<br/>
              Dodaj do jego treści tag strony lub pola, np. <code>{{cms:wysiwyg content}}</code>

        translations:
          created: Tłumaczenie zostało utworzone
          creation_failure: Błąd przy tworzeniu tlumaczenia
          updated: Tłumaczenie zostało uaktualnione
          update_failure: Błąd przy uaktualnianiu tłumaczenia
          deleted: Tłumaczenie zostało usunięte
          not_found: Nie znaleziono tłumaczenia

          new:
            title: Nowe tłumaczenie
          edit:
            title: Edytuj tłumaczenie
          form:
            preview: Podgląd
            create: Utwórz tłumaczenie
            update: Uaktualnij tłumaczenie
            cancel: Anuluj
          sidebar:
            new: Nowe tłumaczenie
            confirm: Jesteś pewien?

        snippets:
          created: Snippet został utworzony
          creation_failure: Błąd przy tworzeniu snippeta
          updated: Snippet został uaktualniony
          update_failure: Błąd przy uaktualnianiu snippeta
          deleted: Snippet został usunięty
          not_found: Nie znaleziono snippeta

          index:
            title: Snippety
            new_link: Utwórz nowy snippet
            edit: Edytuj
            delete: Usuń
            are_you_sure: Jesteś pewien?
          new:
            title: Nowy snippet
          edit:
            title: Edytuj snippet
          form:
            create: Utwórz snippet
            cancel: Anuluj
            update: Uaktualnij snippet

        revisions:
          reverted: Zawartość została przywrócona
          record_not_found: Wpis nie został znaleziony
          not_found: Wersja nie została znaleziona

          show:
            title: Wersje dla
            revision: Wersja
            update: Uaktualnij do tej wersji
            cancel: Anuluj
            content: Pole
            changes: Wersje
            previous: Historyczna
            current: Aktualna
          sidebar:
            revision:
              zero: '%{count} Wersji'
              one: '%{count} Wersja'
              few: '%{count} Wersje'
              many: '%{count} Wersji'
              other: '%{count} Wersje'

        files:
          created: Plik wrzucony na serwer
          creation_failure: Błąd przy wrzucaniu pliku
          updated: Plik został uaktualniony
          update_failure: Błąd przy uaktualnianiu pliku
          deleted: Plik został usunięty
          not_found: Plik nie został znaleziony

          index:
            title: Pliki
            new_link: Wgraj nowy plik
            button: Wgraj plik
          new:
            title: Nowy plik
          edit:
            title: Edytuj plik
          form:
            current_file: Aktualny plik
            create: Wgraj plik
            cancel: Anuluj
            update: Uaktualnij plik
            delete: Usuń
            are_you_sure: Jesteś pewien?
          page_form:
            are_you_sure: Jesteś pewien?
          file:
            edit: Edytuj
            delete: Usuń
            are_you_sure: Jesteś pewien?

        categories:
          index:
            edit: Edytuj
            done: Zrobione
            all: Wszystko Kategorie
            add: Dodaj
            add_placeholder: Dodaj Kategorię
          show:
            are_you_sure: Jesteś pewien?
          edit:
            save: Zapisz
          form:
            label: Tytuł
</file>

<file path="config/application.rb">
# frozen_string_literal: true

require_relative 'boot'

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module ComfortableMediaSurfer
  class Application < Rails::Application
    # Load defaults based on Rails major/minor version
    config.load_defaults Rails.version.scan(%r{^\d+\.\d+}).first.to_f

    # Rails 7.1 compatibility - See config/initializers/new_framework_defaults_7_1.rb
    if Gem::Version.new(Rails.version) >= Gem::Version.new('7.1.0')
      config.active_record.default_column_serializer = YAML
      config.active_record.before_committed_on_all_records = false
      # config.active_record.commit_transaction_on_non_local_return = false # deprecated in Rails 8
      config.active_record.run_after_transaction_callbacks_in_order_defined = false
      config.active_support.message_serializer = :json
      config.active_record.run_commit_callbacks_on_first_saved_instances_in_transaction = true
      # config.active_record.allow_deprecated_singular_associations_name = true
      # config.active_support.raise_on_invalid_cache_expiration_time = false
      # config.active_record.sqlite3_adapter_strict_strings_by_default = false
      # config.active_support.cache_format_version = 7.0
      # Please, add to the `ignore` list any other `lib` subdirectories that do
      # not contain `.rb` files, or that should not be reloaded or eager loaded.
      # Common ones are `templates`, `generators`, or `middleware`, for example.
      config.add_autoload_paths_to_load_path = false
      config.autoload_lib(ignore: %w[generators])
    end

    # Making sure we don't load our dev routes as part of the engine
    config.paths['config/routes.rb'] << 'config/cms_routes.rb'

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")
    # Ensuring that all ActiveStorage routes are loaded before out globbing route.
    config.railties_order = [ActiveStorage::Engine, :main_app, :all]

    config.i18n.enforce_available_locales = true

    config.active_record.yaml_column_permitted_classes = [
      Symbol,
      Date,
      Time,
      ActiveSupport::TimeWithZone,
      ActiveSupport::TimeZone,
      ActiveSupport::SafeBuffer
    ]
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/tags/mixins/file_content.rb">
# frozen_string_literal: true

# A mixin for tags that returns the file as their content.
module ComfortableMediaSurfer::Content::Tags::Mixins
  module FileContent
    # @param [ActiveStorage::Blob] file
    # @param ["link", "image", "url"] as
    # @param [{String => String}] variant_attrs ImageMagick variant attributes
    # @param [String] label alt text for `as: "image"`, link text for `as: "link"`
    # @return [String]
    def content(file: self.file, as: self.as, variant_attrs: self.variant_attrs, label: self.label)
      return '' unless file

      url_helpers = Rails.application.routes.url_helpers

      attachment_url =
        if variant_attrs.present? && file.image?
          variant = file.variant(variant_attrs)
          url_helpers.rails_representation_path(variant, only_path: true)
        else
          url_helpers.rails_blob_path(file, only_path: true)
        end

      case as
      when 'link'
        "<a href='#{attachment_url}'#{html_class_attribute} target='_blank'>#{label}</a>"
      when 'image'
        "<img src='#{attachment_url}'#{html_class_attribute} alt='#{label}' title='#{label}'/>"
      else
        attachment_url
      end
    end

  private

    def html_class_attribute
      return if @class.blank?

      " class='#{@class}'"
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/content/renderer.rb">
# frozen_string_literal: true

require 'strscan'

# Processing content follows these stages:
#
#   string        - Text with tags. like this: "some {{cms:fragment content}} text"
#   tokenization  - Splits string into a list of strings and hashes that define tags
#                   Example: ["some ", {tag_class: "fragment", tag_params: ""}, " text"]
#   nodefying     - Initializes Tag instances from tag hashes and returns list
#                   like this: ["some ", (FragmentTagInstance), " text"]
#   rendering     - Recursively iterates through nodes. Tag instances get their
#                   `render` method called. Result of that is tokenized, nodefied
#                   and rendered once again until there are no tags to expand.
#                   Resulting list is flattened and joined into a final rendered string.
#
class ComfortableMediaSurfer::Content::Renderer
  class SyntaxError < StandardError; end
  class Error < StandardError; end

  MAX_DEPTH = 100

  # tags are in this format: {{ cms:tag_class params }}
  TAG_REGEX = %r{\{\{\s*?cms:(?<class>\w+)(?<params>.*?)\}\}}

  class << self
    # @return [Hash<String, Class<ComfortableMediaSurfer::Content::Tag>>]
    def tags
      @tags ||= {}
    end

    # @param [String] name
    # @param [Class<ComfortableMediaSurfer::Content::Tag>] klass
    def register_tag(name, klass)
      tags[name.to_s] = klass
    end
  end

  # @param [Comfy::Cms::WithFragments, nil] context
  def initialize(context)
    @context = context
    @depth   = 0
  end

  # This is how we render content out. Takes context (cms page) and content
  # nodes
  # @param [Array<String, ComfortableMediaSurfer::Content::Tag>]
  # @param [Boolean] allow_erb
  def render(nodes, allow_erb = ComfortableMediaSurfer.config.allow_erb)
    if (@depth += 1) > MAX_DEPTH
      raise Error, 'Deep tag nesting or recursive nesting detected'
    end

    nodes.map do |node|
      case node
      when String
        sanitize_erb(node, allow_erb)
      else
        tokens  = tokenize(node.render)
        nodes   = nodes(tokens)
        render(nodes, allow_erb || node.allow_erb?)
      end
    end.flatten.join
  end

  def sanitize_erb(string, allow_erb)
    if allow_erb
      string.to_s
    else
      string.to_s.gsub('<%', '&lt;%').gsub('%>', '%&gt;')
    end
  end

  # Splitting text with tags into tokens we can process down the line
  # @return [Array<String, {Symbol => String}>]
  def tokenize(string)
    tokens = []
    ss = StringScanner.new(string.to_s)
    while (string = ss.scan_until(TAG_REGEX))
      text = string.sub(ss[0], '')
      tokens << text unless text.empty?
      tokens << {
        tag_class: ss[:class],
        tag_params: ss[:params].strip,
        source: ss[0]
      }
    end
    text = ss.rest
    tokens << text if text.present?
    tokens
  end

  # Constructing node tree for content. It's a list of strings and tags with
  # their own `nodes` method that has array of strings and tags with their own
  # `nodes` method that... you get the idea.
  # @param [Array<String, {Symbol => String}>] tokens
  # @return [Array<String, ComfortableMediaSurfer::Content::Tag>]
  def nodes(tokens)
    nodes = [[]]
    tokens.each do |token|
      case token

      # tag signature
      when Hash
        case tag_class = token[:tag_class]

        # This handles {{cms:end}} tag. Stopping collecting block nodes.
        when 'end'
          if nodes.count == 1
            raise SyntaxError, 'closing unopened block'
          end

          nodes.pop

        else
          # @type [Class<ComfortableMediaSurfer::Content::Tag>]
          klass = self.class.tags[tag_class] ||
                  raise(SyntaxError, "Unrecognized tag: #{token[:source]}")

          # @type [ComfortableMediaSurfer::Content::Tag]
          tag = klass.new(
            context: @context,
            params: ComfortableMediaSurfer::Content::ParamsParser.new(token[:tag_params]).params,
            source: token[:source]
          )
          nodes.last << tag

          # If it's a block tag we start collecting nodes into it
          if tag.is_a?(ComfortableMediaSurfer::Content::Block)
            nodes << tag.nodes
          end
        end

      # text
      else
        nodes.last << token
      end
    end

    if nodes.count > 1
      raise SyntaxError, 'unclosed block detected'
    end

    nodes.flatten
  end
end
</file>

<file path="lib/comfortable_media_surfer/extensions/acts_as_tree.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Extensions::ActsAsTree
  def self.included(base)
    base.extend(ClassMethods)
  end

  module ClassMethods
    def cms_acts_as_tree(options = {})
      configuration = {
        foreign_key: 'parent_id',
        order: nil,
        counter_cache: nil,
        dependent: :destroy,
        touch: false
      }
      configuration.update(options) if options.is_a?(Hash)

      belongs_to :parent,
                 optional: true,
                 class_name: name,
                 foreign_key: configuration[:foreign_key],
                 counter_cache: configuration[:counter_cache],
                 touch: configuration[:touch]

      has_many :children,
               -> { order(configuration[:order]) },
               class_name: name,
               foreign_key: configuration[:foreign_key],
               dependent: configuration[:dependent]

      class_eval <<-RUBY, __FILE__, __LINE__ + 1
        include ComfortableMediaSurfer::Extensions::ActsAsTree::InstanceMethods

        scope :roots, -> {
          where("#{configuration[:foreign_key]} IS NULL").
          order(#{configuration[:order].nil? ? 'nil' : %("#{configuration[:order]}")})
        }

        def self.root
          roots.first
        end

        validates_each "#{configuration[:foreign_key]}" do |record, attr, value|
          if value
            if record.id == value
              record.errors.add attr, "cannot be it's own id"
            elsif record.descendants.map {|c| c.id}.include?(value)
              record.errors.add attr, "cannot be a descendant's id"
            end
          end
        end
      RUBY
    end
  end

  module InstanceMethods
    # Returns list of ancestors, starting from parent until root.
    #
    #   subchild1.ancestors # => [child1, root]
    def ancestors
      node  = self
      nodes = []
      nodes << node = node.parent while node.parent
      nodes
    end

    # Returns all children and children of children
    def descendants
      nodes = []
      children.each do |c|
        nodes << c
        nodes << c.descendants
      end
      nodes.flatten
    end

    # Returns the root node of the tree.
    def root
      node = self
      node = node.parent while node.parent
      node
    end

    # Checks if this node is a root
    def root?
      !parent_id
    end

    # Returns all siblings of the current node.
    #
    #   subchild1.siblings # => [subchild2]
    def siblings
      self_and_siblings - [self]
    end

    # Returns all siblings and a reference to the current node.
    #
    #   subchild1.self_and_siblings # => [subchild1, subchild2]
    def self_and_siblings
      parent ? parent.children : self.class.roots
    end

    # BUG: https://github.com/rails/rails/issues/14369
    # It's still a bug. Remove it to see failing test
    def parent_id=(id)
      self.parent = self.class.find_by(id: id)
    end
  end
end

ActiveSupport.on_load :active_record do
  include ComfortableMediaSurfer::Extensions::ActsAsTree
end
</file>

<file path="lib/comfortable_media_surfer/extensions/has_revisions.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Extensions::HasRevisions
  def self.included(base)
    base.send :extend, ClassMethods
  end

  module ClassMethods
    def cms_has_revisions_for(*fields)
      include ComfortableMediaSurfer::Extensions::HasRevisions::InstanceMethods

      attr_accessor :revision_data

      has_many :revisions,
               as: :record,
               dependent: :destroy,
               class_name: 'Comfy::Cms::Revision'

      before_save :prepare_revision
      after_save  :create_revision

      define_method(:revision_fields) do
        fields.collect(&:to_s)
      end
    end
  end

  module InstanceMethods
    # Preparing revision data. A bit of a special thing to grab page blocks
    def prepare_revision
      return if new_record?

      if (respond_to?(:fragments_attributes_changed) && fragments_attributes_changed) ||
         !!changed.intersect?(revision_fields)
        self.revision_data = revision_fields.each_with_object({}) do |field, c|
          c[field] = send("#{field}_was")
        end
      end
    end

    # Revision is created only if relevant data changed
    def create_revision
      return unless revision_data

      limit = ComfortableMediaSurfer.config.revisions_limit.to_i

      # creating revision
      if limit != 0
        revisions.create!(data: revision_data)
      end

      # blowing away old revisions
      ids = [0] + revisions.order(created_at: :desc).limit(limit).pluck(:id)
      revisions.where('id NOT IN (?)', ids).destroy_all
    end

    # Assigning whatever is found in revision data and attempting to save the object
    def restore_from_revision(revision)
      return unless revision.record == self

      update!(revision.data)
    end
  end
end

ActiveSupport.on_load :active_record do
  include ComfortableMediaSurfer::Extensions::HasRevisions
end
</file>

<file path="lib/comfortable_media_surfer/seeds/layout/importer.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Layout
  class Importer < ComfortableMediaSurfer::Seeds::Importer
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, from, 'layouts/')
    end

    def import!(path = self.path, parent = nil)
      Dir["#{path}*/"].each do |layout_path|
        import_layout(layout_path, parent)
      end

      # cleaning up
      site.layouts.where('id NOT IN (?)', seed_ids).destroy_all
    end

  private

    def import_layout(path, parent)
      identifier = path.split('/').last

      # reading file content in, resulting in a hash
      content_path = File.join(path, 'content.html')
      content_hash = parse_file_content(content_path)

      # parsing attributes section
      attributes_yaml = content_hash.delete('attributes')
      attrs           = YAML.safe_load(attributes_yaml)

      layout = site.layouts.where(identifier: identifier).first_or_initialize
      layout.parent = parent

      if fresh_seed?(layout, content_path)
        layout.attributes = attrs.merge(
          app_layout: attrs['app_layout'] || parent.try(:app_layout),
          content: content_hash['content'],
          js: content_hash['js'],
          css: content_hash['css']
        )

        if layout.save
          message = "[CMS SEEDS] Imported Layout \t #{layout.identifier}"
          ComfortableMediaSurfer.logger.info(message)
        else
          message = "[CMS SEEDS] Failed to import Layout \n#{layout.errors.inspect}"
          ComfortableMediaSurfer.logger.warn(message)
        end
      end

      seed_ids << layout.id

      # importing child layouts (if there are any)
      Dir["#{path}*/"].each do |layout_path|
        import_layout(layout_path, layout)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/seeds/snippet/importer.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Snippet
  class Importer < ComfortableMediaSurfer::Seeds::Importer
    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, from, 'snippets/')
    end

    def import!
      Dir.glob("#{path}/*.html").each do |path|
        identifier = File.basename(path, '.html')

        # reading file content in, resulting in a hash
        content_hash = parse_file_content(path)

        # parsing attributes section
        attributes_yaml = content_hash.delete('attributes')
        attrs           = YAML.safe_load(attributes_yaml)

        snippet = site.snippets.where(identifier: identifier).first_or_initialize

        if fresh_seed?(snippet, path)
          category_ids = category_names_to_ids(snippet, attrs.delete('categories'))

          snippet.attributes = attrs.merge(
            category_ids: category_ids,
            content: content_hash['content']
          )

          if snippet.save
            ComfortableMediaSurfer.logger.info("[CMS SEEDS] Imported Snippet \t #{snippet.identifier}")
          else
            ComfortableMediaSurfer.logger.warn("[CMS SEEDS] Failed to import Snippet \n#{snippet.errors.inspect}")
          end
        end

        # Tracking what page from seeds we're working with. So we can remove pages
        # that are no longer in seeds
        seed_ids << snippet.id
      end

      # cleaning up
      site.snippets.where('id NOT IN (?)', seed_ids).destroy_all
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/engine.rb">
# frozen_string_literal: true

require 'comfortable_media_surfer'
require 'rails'
require 'rails-i18n'
require 'comfy_bootstrap_form'
require 'active_link_to'
require 'kramdown'
require 'haml-rails'

module ComfortableMediaSurfer
  class Engine < ::Rails::Engine
    initializer 'comfortable_media_surfer.setup_assets' do |app|
      app.config.assets.paths << root.join('app/assets/builds')
      app.config.assets.precompile += %w[comfy/admin/cms/application.js comfy/admin/cms/application.css]
    end

    config.to_prepare do
      Dir.glob("#{Rails.root}app/decorators/comfortable_media_surfer/*_decorator*.rb").each do |c|
        require_dependency(c)
      end
    end
  end
end
</file>

<file path="lib/comfortable_media_surfer/render_methods.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::RenderMethods
  def self.included(base)
    # If application controller doesn't have template associated with it
    # CMS will attempt to find one. This is so you don't have to explicitly
    # call render cms_page: '/something'
    base.rescue_from 'ActionView::MissingTemplate' do |e|
      render cms_page: request.path
    rescue ComfortableMediaSurfer::MissingPage, ComfortableMediaSurfer::MissingSite
      raise e
    end
  end

  # Now you can render cms_page simply by calling:
  #   render cms_page: '/path/to/page'
  # This way application controllers can use CMS content while populating
  # instance variables that can be used in partials (that are included by
  # by the cms page and/or layout)
  #
  # Or how about not worrying about setting up CMS pages and rendering
  # application view using a CMS layout?
  #   render cms_layout: 'layout_slug', cms_fragments: {
  #     fragment_identifier_a: 'content text',
  #     fragment_identifier_b: {template: 'path/to/template' },
  #     fragment_identifier_c: {partial:  'path/to/partial' }
  #   }
  #
  # This way you are populating page block content and rendering
  # an instantialized CMS page.
  #
  # Site is loaded automatically based on the request. However you can force
  # it by passing :cms_site parameter with site's slug. For example:
  #   render cms_page: '/path/to/page', cms_site: 'default'
  #
  def render(options = {}, locals = {}, &)
    return super unless options.is_a?(Hash)

    if (site_identifier = options.delete(:cms_site)) && !(@cms_site = Comfy::Cms::Site.find_by_identifier(site_identifier))
      raise ComfortableMediaSurfer::MissingSite, site_identifier
    end

    if ((page_path = options.delete(:cms_page)) || (layout_identifier = options.delete(:cms_layout))) && !@cms_site ||= Comfy::Cms::Site.find_site(
      request.host_with_port.downcase, request.fullpath
    )
      raise ComfortableMediaSurfer::MissingSite, "#{request.host.downcase}/#{request.fullpath}"
    end

    if page_path
      render_cms_page(page_path, options, locals, &)
    elsif layout_identifier
      render_cms_layout(layout_identifier, options, locals, &)
    else
      super
    end
  end

  def render_cms_page(path, options = {}, locals = {}, &)
    path.gsub!(%r{^/#{@cms_site.path}}, '') if @cms_site.path.present?

    unless (@cms_page = @cms_site.pages.find_by_full_path(path))
      raise ComfortableMediaSurfer::MissingPage, path
    end

    @cms_page.translate!

    @cms_layout = @cms_page.layout
    if (cms_fragments = options.delete(:cms_fragments)).present?
      cms_fragments.each do |identifier, value|
        content = value.is_a?(Hash) ? render_to_string(value.merge(layout: false)) : value.to_s
        page_fragment = @cms_page.fragments.detect { |f| f.identifier == identifier.to_s } ||
                        @cms_page.fragments.build(identifier: identifier.to_s)
        page_fragment.content = content
      end
    end
    cms_app_layout = @cms_layout.app_layout
    options[:layout] ||= cms_app_layout.blank? ? nil : cms_app_layout
    options[:inline] = @cms_page.render

    render(options, locals, &)
  end

  def render_cms_layout(identifier, options = {}, locals = {}, &)
    unless (@cms_layout = @cms_site.layouts.find_by_identifier(identifier))
      raise ComfortableMediaSurfer::MissingLayout, identifier
    end

    cms_app_layout = @cms_layout.app_layout
    cms_page = @cms_site.pages.build(layout: @cms_layout)
    cms_fragments =
      options.delete(:cms_fragments) || { content: render_to_string({ layout: false }.merge(options)) }

    cms_fragments.each do |frag_identifier, value|
      content = value.is_a?(Hash) ? render_to_string(value.merge(layout: false)) : value.to_s
      cms_page.fragments.build(identifier: frag_identifier.to_s, content: content)
    end
    options[:layout] ||= cms_app_layout.blank? ? nil : cms_app_layout
    options[:inline] = cms_page.render

    render(options, locals, &)
  end
end

ActiveSupport.on_load :action_controller_base do
  include ComfortableMediaSurfer::RenderMethods
end
</file>

<file path="rakelib/create_release.rake">
# frozen_string_literal: true

require 'English'

desc("Releases the gem package using the given version.

  IMPORTANT: the gem version must be in valid rubygem format (no dashes).
  This task depends on the gem-release ruby gem.

  1st argument: The new version in rubygem format (no dashes). Pass no argument to
                automatically perform a patch version bump.
  2nd argument: Perform a dry run by passing 'true' as a second argument.

  Example: `rake create_release[2.1.0,false]`")

task :create_release, %i[gem_version dry_run] do |_t, args|
  args_hash = args.to_hash

  is_dry_run = Release.object_to_boolean(args_hash[:dry_run])
  gem_version = args_hash.fetch(:gem_version, '').strip
  gem_root = Release.gem_root

  Release.update_the_local_project
  Release.ensure_there_is_nothing_to_commit
  Release.sh_in_dir(gem_root,
                    "gem bump --no-commit #{gem_version == '' ? '' : %(--version #{gem_version})}")
  Release.sh_in_dir(gem_root, 'bundle install')
  Release.sh_in_dir(gem_root, "git commit -am 'Bump version to #{gem_version}'")
  Release.sh_in_dir(gem_root, 'git push')

  # See https://github.com/svenfuchs/gem-release
  Release.release_the_new_gem_version unless is_dry_run
end

module Release
  extend FileUtils
  class << self
    def gem_root
      File.expand_path('..', __dir__)
    end

    # Executes a string or an array of strings in a shell in the given directory in an unbundled environment
    def sh_in_dir(dir, *shell_commands)
      shell_commands.flatten.each { |shell_command| sh %(cd #{dir} && #{shell_command.strip}) }
    end

    def ensure_there_is_nothing_to_commit
      status = `git status --porcelain`

      return if $CHILD_STATUS.success? && status == ''

      error = if $CHILD_STATUS.success?
                'You have uncommitted code. Please commit or stash your changes before continuing'
              else
                'You do not have Git installed. Please install Git, and commit your changes before continuing'
              end
      raise(error)
    end

    def object_to_boolean(value)
      [true, 'true', 'yes', 1, '1', 't'].include?(value.instance_of?(String) ? value.downcase : value)
    end

    def update_the_local_project
      puts 'Pulling latest commits from remote repository'

      sh_in_dir(gem_root, 'git pull --rebase')
      raise 'Failed in pulling latest changes from default remote repository.' unless $CHILD_STATUS.success?
    rescue Errno::ENOENT
      raise 'Ensure you have Git and Bundler installed before continuing.'
    end

    def release_the_new_gem_version
      puts 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'
      puts 'Use the OTP for RubyGems!'
      puts 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

      sh_in_dir(gem_root, 'gem release --push --tag')
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/revisions/translation_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../../test_helper'

class Comfy::Admin::Cms::Revisions::TranslationControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site         = comfy_cms_sites(:default)
    @page         = comfy_cms_pages(:default)
    @translation  = comfy_cms_translations(:default)
    @revision     = comfy_cms_revisions(:translation)
  end

  def test_get_index
    r :get, comfy_admin_cms_site_page_translation_revisions_path(@site, @page, @translation)
    assert_response :redirect
    assert_redirected_to action: :show, id: @revision
  end

  def test_get_index_with_no_revisions
    Comfy::Cms::Revision.delete_all
    r :get, comfy_admin_cms_site_page_translation_revisions_path(@site, @page, @translation)
    assert_response :redirect
    assert_redirected_to edit_comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
  end

  def test_get_show
    r :get, comfy_admin_cms_site_page_translation_revision_path(@site, @page, @translation, @revision)
    assert_response :success
    assert assigns(:record)
    assert assigns(:revision)
    assert assigns(:record).is_a?(Comfy::Cms::Translation)
    assert_template :show
  end

  def test_get_show_for_invalid_record
    r :get, comfy_admin_cms_site_page_translation_revision_path(@site, @page, 'invalid', @revision)
    assert_response :redirect
    assert_redirected_to comfy_admin_cms_site_pages_path(@site)
    assert_equal 'Record Not Found', flash[:danger]
  end

  def test_get_show_failure
    r :get, comfy_admin_cms_site_page_translation_revision_path(@site, @page, @translation, 'invalid')
    assert_response :redirect
    assert assigns(:record)
    assert_redirected_to edit_comfy_admin_cms_site_page_translation_path(@site, @page, assigns(:record))
    assert_equal 'Revision Not Found', flash[:danger]
  end

  def test_revert
    assert_difference -> { @translation.revisions.count } do
      r :patch, revert_comfy_admin_cms_site_page_translation_revision_path(@site, @page, @translation, @revision)
      assert_response :redirect
      assert_redirected_to edit_comfy_admin_cms_site_page_translation_path(@site, @page, @translation)
      assert_equal 'Content Reverted', flash[:success]

      @translation.reload

      assert_equal [{
        identifier: 'content',
        tag: 'text',
        content: 'old content',
        datetime: nil,
        boolean: false
      }], @translation.fragments_attributes
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/pages_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::PagesControllerTest < ActionDispatch::IntegrationTest
  def setup
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
  end

  def test_get_index
    r :get, comfy_admin_cms_site_pages_path(site_id: @site)
    assert_response :success
    assert assigns(:pages)
    assert_template :index
  end

  def test_get_index_with_no_pages
    Comfy::Cms::Page.delete_all
    r :get, comfy_admin_cms_site_pages_path(site_id: @site)
    assert_response :redirect
    assert_redirected_to action: :new
  end

  def test_get_index_with_category
    category = @site.categories.create!(
      label: 'Test Category',
      categorized_type: 'Comfy::Cms::Page'
    )
    category.categorizations.create!(categorized: comfy_cms_pages(:child))

    r :get, comfy_admin_cms_site_pages_path(site_id: @site), params: { categories: category.label }
    assert_response :success
    assert assigns(:pages)
    assert_equal 1, assigns(:pages).count
    assert assigns(:pages).first.categories.member? category
  end

  def test_get_index_with_category_invalid
    r :get, comfy_admin_cms_site_pages_path(site_id: @site), params: { categories: 'invalid' }
    assert_response :success
    assert assigns(:pages)
    assert_equal 0, assigns(:pages).count
  end

  def test_get_index_with_toggle
    @site.pages.create!(
      label: 'test',
      slug: 'test',
      parent: comfy_cms_pages(:child),
      layout: comfy_cms_layouts(:default)
    )
    r :get, comfy_admin_cms_site_pages_path(site_id: @site)
    assert_response :success
  end

  def test_get_links_with_redactor
    r :get, comfy_admin_cms_site_pages_path(site_id: @site), params: { source: 'redactor' }
    assert_response :success

    assert_equal [
      { 'name' => 'Select page...',  'url' => false },
      { 'name' => 'Default Page',    'url' => '/' },
      { 'name' => '. . Child Page',  'url' => '/child-page' }
    ], JSON.parse(response.body)
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert assigns(:page)
    assert_equal @layout, assigns(:page).layout
    assert_template :new
    assert_select "form[action='/admin/sites/#{@site.id}/pages']"
    assert_select "select[data-url='/admin/sites/#{@site.id}/pages/0/form_fragments']"

    assert_select "textarea[name='page[fragments_attributes][0][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][identifier]'][value='content']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][tag]'][value='textarea']"
  end

  def test_get_new_with_several_fields
    @layout.update_column(:content, '{{cms:wysiwyg a}}{{cms:markdown b}}')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select "textarea[name='page[fragments_attributes][0][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][identifier]'][value='a']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][tag]'][value='wysiwyg']"
    assert_select "textarea[name='page[fragments_attributes][1][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][1][identifier]'][value='b']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][1][tag]'][value='markdown']"
  end

  def test_get_new_with_non_renderable_fragment
    @layout.update_column(:content, '{{cms:text a}}{{cms:text b, render: false}}')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select 'label.renderable-true', 'A'
    assert_select 'label.renderable-false', 'B'
  end

  def test_get_new_with_invalid_tag
    @layout.update_column(:content, '{{cms:invalid}}')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select 'div.alert-danger', 'Unrecognized tag: {{cms:invalid}}'
  end

  def test_get_new_with_invalid_fragment_tag
    @layout.update_column(:content, 'a {{cms:markdown}} b')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select 'div.alert-danger', 'Missing identifier for fragment tag: {{cms:markdown}}'
  end

  def test_get_new_with_repeated_tag
    @layout.update_column(:content, '{{cms:text test}}{{cms:text test}}')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select "input[name='page[fragments_attributes][0][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][identifier]'][value='test']"
    assert_select "input[name='page[fragments_attributes][1][content]']", 0
    assert_select "input[type='hidden'][name='page[fragments_attributes][1][identifier]'][value='test']", 0
  end

  def test_get_new_with_namespaced_tags
    @layout.update_column(:content, '{{cms:text a, namespace: a}}{{cms:text b, namespace: b}}')
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success
    assert_select "a[data-toggle='tab'][href='#ns-a']", 'A'
    assert_select "a[data-toggle='tab'][href='#ns-b']", 'B'
    assert_select "input[name='page[fragments_attributes][0][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][0][identifier]'][value='a']"
    assert_select "input[name='page[fragments_attributes][1][content]']"
    assert_select "input[type='hidden'][name='page[fragments_attributes][1][identifier]'][value='b']"
  end

  def test_get_new_with_localized_names
    I18n.backend.store_translations(:en, comfy: { cms: { content:
      { tag: { localized_a: 'Localized Fragment' },
        namespace: { localized_a: 'Localized Namespace' } } } })
    @layout.update_column(
      :content,
      '{{cms:text localized_a, namespace: localized_a}}{{cms:text b, namespace: b}}'
    )
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :success

    assert_select "a[data-toggle='tab'][href='#ns-localized_a']", 'Localized Namespace'
    assert_select 'label', 'Localized Fragment'
  ensure
    I18n.backend.store_translations(:en, comfy: { cms: { content:
      { tag: nil, namespace: nil } } })
  end

  def test_get_new_as_child_page
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site), params: { parent_id: @page }
    assert_response :success
    assert assigns(:page)
    assert_equal comfy_cms_pages(:default), assigns(:page).parent
    assert_template :new
  end

  def test_get_edit
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: @page)
    assert_response :success
    assert assigns(:page)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{@site.id}/pages/#{@page.id}']"
    assert_select "select[data-url='/admin/sites/#{@site.id}/pages/#{@page.id}/form_fragments']"
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: 'not_found')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'Page not found', flash[:danger]
  end

  def test_get_edit_with_blank_layout
    @page.update_column(:layout_id, nil)
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: @page)
    assert_response :success
    assert assigns(:page)
  end

  def test_get_edit_with_non_english_locale
    @site.update_column(:locale, 'es')
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: @page)
    assert_response :success
  end

  def test_get_edit_with_layout_and_no_tags
    @page.layout.update_column(:content, '')
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: @page)
    assert_response :success
  end

  def test_creation
    assert_difference 'Comfy::Cms::Page.count' do
      assert_difference 'Comfy::Cms::Fragment.count', 2 do
        r :post, comfy_admin_cms_site_pages_path(site_id: @site), params: {
          page: {
            label: 'Test Page',
            slug: 'test-page',
            parent_id: @page.id,
            layout_id: @layout.id,
            fragments_attributes: [
              { identifier: 'default_page_text',
                content: 'content content' },
              { identifier: 'default_field_text',
                content: 'title content' }
            ]
          },
          commit: 'Create Page'
        }
        assert_response :redirect
        page = Comfy::Cms::Page.last
        assert_equal @site, page.site
        assert_redirected_to action: :edit, id: page
        assert_equal 'Page created, siblings, and parent updated', flash[:success]
      end
    end
  end

  def test_creation_with_files
    assert_difference 'Comfy::Cms::Page.count' do
      assert_difference 'Comfy::Cms::Fragment.count', 3 do
        assert_difference 'ActiveStorage::Attachment.count', 3 do
          r :post, comfy_admin_cms_site_pages_path(site_id: @site), params: {
            page: {
              label: 'Test Page',
              slug: 'test-page',
              parent_id: @page.id,
              layout_id: @layout.id,
              fragments_attributes: [
                { identifier: 'image',
                  tag: 'file',
                  files: fixture_file_upload('image.jpg', 'image/jpeg') },
                { identifier: 'files_multiple',
                  tag: 'files',
                  files: [
                    fixture_file_upload('image.jpg', 'image/jpeg'),
                    fixture_file_upload('document.pdf', 'application/pdf')
                  ] },
                { identifier: 'unpopulated',
                  tag: 'file',
                  content: nil }
              ]
            },
            commit: 'Create Page'
          }
          assert_response :redirect
          page = Comfy::Cms::Page.last
          assert_equal @site, page.site
          assert_redirected_to action: :edit, id: page
          assert_equal 'Page created, siblings, and parent updated', flash[:success]
        end
      end
    end
  end

  def test_creation_failure
    assert_no_difference ['Comfy::Cms::Page.count', 'Comfy::Cms::Fragment.count'] do
      r :post, comfy_admin_cms_site_pages_path(site_id: @site), params: { page: {
        layout_id: @layout.id,
        fragments_attributes: [
          { identifier: 'content',
            content: 'content content' },
          { identifier: 'title',
            content: 'title content' }
        ]
      } }
      assert_response :success
      page = assigns(:page)

      assert_equal 2, page.fragments.size
      assert_equal ['content content', 'title content'], page.fragments.collect(&:content)
      assert_template :new
      assert_equal 'Failed to create page', flash[:danger]
    end
  end

  def test_update
    assert_no_difference 'Comfy::Cms::Fragment.count' do
      r :put, comfy_admin_cms_site_page_path(site_id: @site, id: @page), params: { page: {
        label: 'Updated Label'
      } }
      @page.reload
      assert_response :redirect
      assert_redirected_to action: :edit, id: @page
      assert_equal 'Page, siblings, and parent updated', flash[:success]
      assert_equal 'Updated Label', @page.label
    end
  end

  def test_update_with_layout_change
    assert_difference 'Comfy::Cms::Fragment.count' do
      r :put, comfy_admin_cms_site_page_path(site_id: @site, id: @page), params: { page: {
        label: 'Updated Label',
        layout_id: comfy_cms_layouts(:nested).id,
        fragments_attributes: [
          { identifier: 'content',
            content: 'new_page_text_content' },
          { identifier: 'header',
            content: 'new_page_string_content' }
        ]
      } }
      @page.reload
      assert_response :redirect
      assert_redirected_to action: :edit, id: @page
      assert_equal 'Page, siblings, and parent updated', flash[:success]
      assert_equal 'Updated Label', @page.label
      identifiers = @page.fragments.collect(&:identifier)
      assert_equal %w[boolean content datetime file header], identifiers.sort
    end
  end

  def test_update_failure
    r :put, comfy_admin_cms_site_page_path(site_id: @site, id: @page), params: { page: {
      label: ''
    } }
    assert_response :success
    assert_template :edit
    assert assigns(:page)
    assert_equal 'Failed to update page', flash[:danger]
  end

  def test_destroy
    assert_difference 'Comfy::Cms::Page.count', -2 do
      assert_difference 'Comfy::Cms::Fragment.count', -5 do
        r :delete, comfy_admin_cms_site_page_path(site_id: @site, id: @page)
        assert_response :redirect
        assert_redirected_to action: :index
        assert_equal 'Page deleted, siblings, and parent updated', flash[:success]
      end
    end
  end

  def test_get_form_fragments
    r :get, form_fragments_comfy_admin_cms_site_page_path(site_id: @site, id: @page), xhr: true, params: {
      layout_id: comfy_cms_layouts(:nested).id
    }
    assert_response :success
    assert assigns(:page)
    assert_equal 2, assigns(:page).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'

    r :get, form_fragments_comfy_admin_cms_site_page_path(site_id: @site, id: @page), xhr: true, params: {
      layout_id: @layout.id
    }
    assert_response :success
    assert assigns(:page)
    assert_equal 1, assigns(:page).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'
  end

  def test_get_form_fragments_for_new_page
    r :get, form_fragments_comfy_admin_cms_site_page_path(site_id: @site, id: 0), xhr: true, params: {
      layout_id: @layout.id
    }
    assert_response :success
    assert assigns(:page)
    assert_equal 1, assigns(:page).fragment_nodes.size
    assert_template 'comfy/admin/cms/fragments/_form_fragments'
  end

  def test_creation_preview
    assert_no_difference 'Comfy::Cms::Page.count' do
      r :post, comfy_admin_cms_site_pages_path(site_id: @site), params: {
        preview: 'Preview',
        page: {
          label: 'Test Page',
          slug: 'test-page',
          parent_id: @page.id,
          layout_id: @layout.id,
          fragments_attributes: [
            { identifier: 'content',
              content: 'preview content' }
          ]
        }
      }
      assert_response :success
      assert_match %r{preview content}, response.body
      assert_equal 'text/html; charset=utf-8', response.content_type

      assert_equal @site, assigns(:cms_site)
      assert_equal @layout, assigns(:cms_layout)
      assert assigns(:cms_page)
      assert assigns(:cms_page).new_record?
    end
  end

  def test_update_preview
    assert_no_difference 'Comfy::Cms::Page.count' do
      r :put, comfy_admin_cms_site_page_path(site_id: @site, id: @page), params: {
        preview: 'Preview',
        page: {
          label: 'Updated Label',
          fragments_attributes: [
            { identifier: 'content',
              content: 'preview content' }
          ]
        }
      }
      assert_response :success
      assert_match %r{preview content}, response.body
      @page.reload
      assert_not_equal 'Updated Label', @page.label

      assert_equal @page.site,   assigns(:cms_site)
      assert_equal @page.layout, assigns(:cms_layout)
      assert_equal @page,        assigns(:cms_page)
    end
  end

  def test_preview_language
    @site.update_column(:locale, 'de')

    assert_equal :en, I18n.locale

    r :post, comfy_admin_cms_site_pages_path(site_id: @site), params: {
      preview: 'Preview',
      page: {
        label: 'Test Page',
        slug: 'test-page',
        parent_id: @page.id,
        layout_id: @layout.id,
        fragments_attributes: [
          { identifier: 'content',
            content: 'preview content' }
        ]
      }
    }

    assert_response :success
    assert_equal :de, I18n.locale
  end

  def test_get_new_with_no_layout
    Comfy::Cms::Layout.destroy_all
    r :get, new_comfy_admin_cms_site_page_path(site_id: @site)
    assert_response :redirect
    assert_redirected_to new_comfy_admin_cms_site_layout_path(@site)
    assert_equal 'No Layouts found. Please create one.', flash[:danger]
  end

  def test_get_edit_with_no_layout
    Comfy::Cms::Layout.destroy_all
    r :get, edit_comfy_admin_cms_site_page_path(site_id: @site, id: @page)
    assert_response :redirect
    assert_redirected_to new_comfy_admin_cms_site_layout_path(@site)
    assert_equal 'No Layouts found. Please create one.', flash[:danger]
  end

  def test_get_toggle_branch
    r :get, toggle_branch_comfy_admin_cms_site_page_path(site_id: @site, id: @page), xhr: true, params: { format: :js }
    assert_response :success
    assert_equal [@page.id.to_s], session[:cms_page_tree]

    r :get, toggle_branch_comfy_admin_cms_site_page_path(site_id: @site, id: @page), xhr: true, params: { format: :js }
    assert_response :success
    assert_equal [], session[:cms_page_tree]
  end

  def test_get_toggle_branch_no_record
    r :get, toggle_branch_comfy_admin_cms_site_page_path(site_id: @site, id: @page), xhr: true, params: { format: :js }
    assert_response :success
    assert_equal [@page.id.to_s], session[:cms_page_tree]
  end

  def test_reorder
    page_one = comfy_cms_pages(:child)
    page_two = @site.pages.create!(
      parent: @page,
      layout: @layout,
      label: 'test',
      slug: 'test'
    )
    assert_equal 0, page_one.position
    assert_equal 1, page_two.position

    r :put, reorder_comfy_admin_cms_site_pages_path(site_id: @site), params: {
      order: [page_two.id, page_one.id]
    }
    assert_response :success
    page_one.reload
    page_two.reload

    assert_equal 1, page_one.position
    assert_equal 0, page_two.position
  end
end
</file>

<file path="test/lib/content/tags/file_link_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsFileLinkTest < ActiveSupport::TestCase
  delegate :rails_blob_path, to: 'Rails.application.routes.url_helpers'

  setup do
    @page = comfy_cms_pages(:default)
    @file = comfy_cms_files(:default)
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page, params: ['123'])
    assert_equal '123', tag.identifier
    assert_equal 'url', tag.as
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(
      context: @page,
      params: [
        '123', {
          'as' => 'image',
          'resize' => '100x100',
          'gravity' => 'center',
          'crop' => '100x100+0+0'
        }
      ]
    )
    assert_equal '123', tag.identifier
    assert_equal 'image', tag.as
    assert_equal ({
      'resize' => '100x100',
      'gravity' => 'center',
      'crop' => '100x100+0+0'
    }), tag.variant_attrs
  end

  def test_init_without_identifier
    message = 'Missing identifier for file link tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page)
    end
  end

  def test_file
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page, params: [@file.id])
    assert_instance_of Comfy::Cms::File, tag.file_record

    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page, params: ['invalid'])
    assert_nil tag.file_record
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page, params: [@file.id])
    out = rails_blob_path(tag.file, only_path: true)
    assert_equal out, tag.content
    assert_equal out, tag.render
  end

  def test_content_as_link
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(
      context: @page,
      params: [@file.id, { 'as' => 'link', 'class' => 'html-class' }]
    )
    url = rails_blob_path(tag.file, only_path: true)
    out = "<a href='#{url}' class='html-class' target='_blank'>default file</a>"
    assert_equal out, tag.content
    assert_equal out, tag.render
  end

  def test_content_as_image
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(
      context: @page,
      params: [@file.id, { 'as' => 'image', 'class' => 'html-class' }]
    )
    url = rails_blob_path(tag.file, only_path: true)
    out = "<img src='#{url}' class='html-class' alt='default file' title='default file'/>"
    assert_equal out, tag.content
    assert_equal out, tag.render
  end

  def test_content_when_not_found
    tag = ComfortableMediaSurfer::Content::Tags::FileLink.new(context: @page, params: ['invalid'])
    assert_equal '', tag.content
    assert_equal '', tag.render
  end
end
</file>

<file path="test/lib/content/tags/helper_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsHelperTest < ActiveSupport::TestCase
  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page, params: ['helper_method'])
    assert_equal 'helper_method', tag.method_name
    assert_equal [], tag.params
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(
      context: @page,
      params: ['helper_method', 'param', { 'key' => 'val' }]
    )
    assert_equal 'helper_method', tag.method_name
    assert_equal ['param', { 'key' => 'val' }], tag.params
  end

  def test_init_without_method_name
    message = 'Missing method name for helper tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page)
    end
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(
      context: @page,
      params: ['method_name', 'param', { 'key' => 'val' }]
    )
    assert_match(%r{<%= method_name\("param",{"key"\s*=>\s*"val"}\) %>}, tag.content)
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(
      context: @page,
      params: ['method_name', 'param', { 'key' => 'val' }]
    )
    assert_match(%r{<%= method_name\("param",{"key"\s*=>\s*"val"}\) %>}, tag.render)
  end

  def test_render_with_whitelist
    ComfortableMediaSurfer.config.allowed_helpers = %i[tester eval]
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page, params: ['tester'])
    assert_equal '<%= tester() %>', tag.render

    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page, params: ['eval'])
    assert_equal '<%= eval() %>', tag.render

    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page, params: ['not_whitelisted'])
    assert_nil tag.render
  end

  def test_render_with_blacklist
    ComfortableMediaSurfer::Content::Tags::Helper::BLACKLIST.each do |method|
      tag = ComfortableMediaSurfer::Content::Tags::Helper.new(context: @page, params: [method])
      assert_nil tag.render
    end
  end

  def test_render_with_erb_injection
    tag = ComfortableMediaSurfer::Content::Tags::Helper.new(
      context: @page,
      params: ["foo\#{:bar}", "foo\#{Kernel.exec('poweroff')"]
    )
    assert_equal "<%= foo\#{:bar}(\"foo\\\#{Kernel.exec('poweroff')\") %>", tag.render
  end
end
</file>

<file path="test/lib/content/tags/partial_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsPartialTest < ActiveSupport::TestCase
  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['path/to/partial']
    )
    assert_equal 'path/to/partial', tag.path
    assert_equal ({}), tag.locals
  end

  def test_init_with_locals
    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['path/to/partial', { 'key' => 'val' }]
    )
    assert_equal 'path/to/partial', tag.path
    assert_equal ({ 'key' => 'val' }), tag.locals
  end

  def test_init_without_path
    message = 'Missing path for partial tag'
    assert_raises ComfortableMediaSurfer::Content::Tag::Error, message do
      ComfortableMediaSurfer::Content::Tags::Partial.new(
        context: @page,
        params: [{ 'key' => 'val' }]
      )
    end
  end

  def test_content
    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['path/to/partial', { 'key' => 'val' }]
    )
    assert_match(%r{<%= render partial: "path/to/partial", locals: {"key"\s*=>\s*"val"} %>}, tag.content)
  end

  def test_render
    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['path/to/partial', { 'key' => 'val' }]
    )
    assert_match(%r{<%= render partial: "path/to/partial", locals: {"key"\s*=>\s*"val"} %>}, tag.render)
  end

  def test_render_with_whitelist
    ComfortableMediaSurfer.config.allowed_partials = ['safe/path']

    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['path/to/partial']
    )
    assert_equal '', tag.render

    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ['safe/path']
    )
    assert_equal '<%= render partial: "safe/path", locals: {} %>', tag.render
  end

  def test_render_with_erb_injection
    tag = ComfortableMediaSurfer::Content::Tags::Partial.new(
      context: @page,
      params: ["foo\#{:bar}", { 'key' => "va\#{:l}ue" }]
    )
    assert_match(%r{<%= render partial: "foo\\\#{:bar}", locals: {"key"\s*=>\s*"va\\\#{:l}ue"} %>}, tag.render)
  end
end
</file>

<file path="test/lib/seeds/layouts_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class SeedsLayoutsTest < ActiveSupport::TestCase
  make_my_diffs_pretty!

  DEFAULT_HTML = <<~HTML
    <html>
      <body>
        {{ cms:file header, as: image }}
        {{ cms:markdown content }}
      </body>
    </html>

  HTML

  NESTED_HTML = <<~HTML
    {{ cms:file thumbnail }}
    <div class="left">{{ cms:markdown left }}</div>
    <div class="right">{{ cms:markdown right }}</div>

  HTML

  def test_creation
    Comfy::Cms::Layout.delete_all

    assert_difference 'Comfy::Cms::Layout.count', 2 do
      ComfortableMediaSurfer::Seeds::Layout::Importer.new('sample-site', 'default-site').import!
    end

    assert layout = Comfy::Cms::Layout.where(identifier: 'default').first
    assert_equal 'Default Seed Layout', layout.label
    assert_equal DEFAULT_HTML,          layout.content
    assert_equal "body{color: red}\n",  layout.css
    assert_equal "// default js\n\n",   layout.js

    assert nested_layout = Comfy::Cms::Layout.where(identifier: 'nested').first
    assert_equal layout, nested_layout.parent
    assert_equal 'Nested Seed Layout',  nested_layout.label
    assert_equal NESTED_HTML,           nested_layout.content
    assert_equal "div{float:left}\n",   nested_layout.css
    assert_equal "// nested js\n\n",    nested_layout.js
  end

  def test_update
    layout        = comfy_cms_layouts(:default)
    nested_layout = comfy_cms_layouts(:nested)
    child_layout  = comfy_cms_layouts(:child)

    layout.update_column(:updated_at, 10.years.ago)
    nested_layout.update_column(:updated_at, 10.years.ago)
    child_layout.update_column(:updated_at, 10.years.ago)

    assert_difference(-> { Comfy::Cms::Layout.count }, -1) do
      ComfortableMediaSurfer::Seeds::Layout::Importer.new('sample-site', 'default-site').import!

      layout.reload
      assert_equal 'Default Seed Layout', layout.label
      assert_equal DEFAULT_HTML,          layout.content
      assert_equal "body{color: red}\n",  layout.css
      assert_equal "// default js\n\n",   layout.js
      assert_equal 0,                     layout.position

      nested_layout.reload
      assert_equal layout,                nested_layout.parent
      assert_equal 'Nested Seed Layout',  nested_layout.label
      assert_equal NESTED_HTML,           nested_layout.content
      assert_equal "div{float:left}\n",   nested_layout.css
      assert_equal "// nested js\n\n",    nested_layout.js
      assert_equal 42,                    nested_layout.position

      assert_nil Comfy::Cms::Layout.where(identifier: 'child').first
    end
  end

  def test_update_ignore
    layout = comfy_cms_layouts(:default)
    layout_path       = File.join(ComfortableMediaSurfer.config.seeds_path, 'sample-site', 'layouts', 'default')
    content_file_path = File.join(layout_path, 'content.html')

    assert layout.updated_at >= File.mtime(content_file_path)

    ComfortableMediaSurfer::Seeds::Layout::Importer.new('sample-site', 'default-site').import!
    layout.reload
    assert_equal 'default',                   layout.identifier
    assert_equal 'Default Layout',            layout.label
    assert_equal '{{cms:textarea content}}',  layout.content
    assert_equal 'default_css',               layout.css
    assert_equal 'default_js',                layout.js
  end

  def test_export
    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')

    layout_1_content_path = File.join(host_path, 'layouts/default/content.html')
    layout_2_content_path = File.join(host_path, 'layouts/nested/content.html')
    layout_3_content_path = File.join(host_path, 'layouts/nested/child/content.html')

    ComfortableMediaSurfer::Seeds::Layout::Exporter.new('default-site', 'test-site').export!

    assert File.exist?(layout_1_content_path)
    assert File.exist?(layout_2_content_path)
    assert File.exist?(layout_3_content_path)

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Default Layout
      app_layout:
      position: 0
      [content]
      {{cms:textarea content}}
      [js]
      default_js
      [css]
      default_css
    TEXT

    # macos gives '' (null) for app_layout: but linux ' ' (space) !
    file_read = File.read(layout_1_content_path).gsub('app_layout: ', 'app_layout:')
    assert_equal out, file_read

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Nested Layout
      app_layout:
      position: 0
      [content]
      {{cms:text header}}
      {{cms:textarea content}}
      [js]
      nested_js
      [css]
      nested_css
    TEXT

    # macos gives '' (null) for app_layout: but linux ' ' (space) !
    file_read = File.read(layout_2_content_path).gsub('app_layout: ', 'app_layout:')
    assert_equal out, file_read

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Child Layout
      app_layout:
      position: 0
      [content]
      {{cms:textarea left_column}}
      {{cms:textarea right_column}}
      [js]
      child_js
      [css]
      child_css
    TEXT
    # macos gives '' (null) for app_layout: but linux ' ' (space) !
    file_read = File.read(layout_3_content_path).gsub('app_layout: ', 'app_layout:')
    assert_equal out, file_read
  ensure
    FileUtils.rm_rf(host_path)
  end
end
</file>

<file path="test/lib/seeds/snippets_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class SeedsSnippetsTest < ActiveSupport::TestCase
  setup do
    @site     = comfy_cms_sites(:default)
    @snippet  = comfy_cms_snippets(:default)
  end

  def test_creation
    Comfy::Cms::Snippet.delete_all

    assert_difference -> { Comfy::Cms::Snippet.count } do
      ComfortableMediaSurfer::Seeds::Snippet::Importer.new('sample-site', 'default-site').import!
    end

    snippet = Comfy::Cms::Snippet.last

    assert_equal 'default', snippet.identifier
    assert_equal 'Default Seed Snippet', snippet.label
    assert_equal "Default Seed Snippet Content\n", snippet.content

    assert_equal %w[category_a category_b], snippet.categories.map(&:label)
  end

  def test_update
    @snippet.update_column(:updated_at, 10.years.ago)
    assert_equal 'default', @snippet.identifier
    assert_equal 'Default Snippet', @snippet.label
    assert_equal '## snippet content', @snippet.content

    ComfortableMediaSurfer::Seeds::Snippet::Importer.new('sample-site', 'default-site').import!

    @snippet.reload
    assert_equal 'default', @snippet.identifier
    assert_equal 'Default Seed Snippet', @snippet.label
    assert_equal "Default Seed Snippet Content\n", @snippet.content
  end

  def test_delete
    old_snippet = @snippet
    old_snippet.update_column(:identifier, 'old')

    ComfortableMediaSurfer::Seeds::Snippet::Importer.new('sample-site', 'default-site').import!

    assert snippet = Comfy::Cms::Snippet.last
    assert_equal 'default', snippet.identifier
    assert_equal 'Default Seed Snippet', snippet.label
    assert_equal "Default Seed Snippet Content\n", snippet.content

    assert_nil Comfy::Cms::Snippet.where(id: old_snippet.id).first
  end

  def test_update_ignoring
    snippet_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'sample-site', 'snippets')
    content_path = File.join(snippet_path, 'default.html')

    assert @snippet.updated_at >= File.mtime(content_path)

    ComfortableMediaSurfer::Seeds::Snippet::Importer.new('sample-site', 'default-site').import!
    @snippet.reload
    assert_equal 'default', @snippet.identifier
    assert_equal 'Default Snippet', @snippet.label
    assert_equal '## snippet content', @snippet.content
  end

  def test_export
    comfy_cms_categories(:default).categorizations.create!(
      categorized: @snippet
    )

    host_path     = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    content_path  = File.join(host_path, 'snippets/default.html')

    ComfortableMediaSurfer::Seeds::Snippet::Exporter.new('default-site', 'test-site').export!

    assert File.exist?(content_path)
    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Default Snippet
      categories:
      - Default
      position: 0
      [content]
      ## snippet content
    TEXT
    assert_equal out, File.read(content_path)
  ensure
    FileUtils.rm_rf(host_path)
  end
end
</file>

<file path="test/lib/form_builder_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class FormBuilderTest < ActionView::TestCase
  make_my_diffs_pretty!
  setup do
    @page = comfy_cms_pages(:default)
    @builder = ComfortableMediaSurfer::FormBuilder.new(:page, @page, self, bootstrap: { layout: 'horizontal' })
  end

  def test_fragment_field_for_text
    tag = ComfortableMediaSurfer::Content::Tags::Text.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="text"/>
          <input class="form-control" id="fragment-test" name="page[fragments_attributes][123][content]" type="text"/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_text_non_renderable
    tag = ComfortableMediaSurfer::Content::Tags::Text.new(context: @page, params: ['test', { 'render' => 'false' }])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-false col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="text"/>
          <input class="form-control" id="fragment-test" name="page[fragments_attributes][123][content]" type="text"/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_text_with_content
    tag = ComfortableMediaSurfer::Content::Tags::Text.new(context: @page, params: ['content'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-content">Content</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="content"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="text"/>
          <input class="form-control" id="fragment-content" name="page[fragments_attributes][123][content]" type="text" value="content"/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_checkbox
    tag = ComfortableMediaSurfer::Content::Tags::Checkbox.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="checkbox"/>
          <div class="form-check mt-2">
            <input autocomplete="off" name="page[fragments_attributes][123][boolean]" type="hidden" value="0"/>
            <input class="form-check-input position-static" id="fragment-test" name="page[fragments_attributes][123][boolean]" type="checkbox" value="1"/>
          </div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_checkbox_with_value
    tag = ComfortableMediaSurfer::Content::Tags::Checkbox.new(context: @page, params: ['boolean'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-boolean">Boolean</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="boolean"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="checkbox"/>
          <div class="form-check mt-2">
            <input autocomplete="off" name="page[fragments_attributes][123][boolean]" type="hidden" value="0"/>
            <input checked="checked" class="form-check-input position-static" id="fragment-boolean" name="page[fragments_attributes][123][boolean]" type="checkbox" value="1"/>
          </div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_date
    tag = ComfortableMediaSurfer::Content::Tags::Date.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="date"/>
          <input class="form-control" data-cms-date="true" id="fragment-test" name="page[fragments_attributes][123][datetime]" type="text" value=""/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_datetime
    tag = ComfortableMediaSurfer::Content::Tags::Datetime.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="datetime"/>
          <input class="form-control" data-cms-datetime="true" id="fragment-test" name="page[fragments_attributes][123][datetime]" type="text" value=""/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_file
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="file"/>
          <input class="form-control" id="fragment-test" name="page[fragments_attributes][123][files]" type="file"/>
          <div class="fragment-attachments"></div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_file_with_content
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: ['file'])
    actual = @builder.fragment_field(tag, 123)

    attachment = active_storage_attachments(:file)
    attachment_url  = view.url_for(attachment)
    thumb_url       = view.url_for(attachment.variant(Comfy::Cms::File::VARIANT_SIZE[:thumb]))

    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-file">File</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="file"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="file"/>
          <input class="form-control" id="fragment-file" name="page[fragments_attributes][123][files]" type="file"/>
          <div class="fragment-attachments">
            <div class="fragment-attachment btn-group btn-group-sm mb-1">
              <a class="btn btn-light text-truncate" data-cms-file-link-tag="{{ cms:page_file_link file, as: image }}" data-cms-file-thumb-url="#{thumb_url}" href="#{attachment_url}" target="_blank">fragment.jpeg</a>
              <input id="attachment_211760658" name="page[fragments_attributes][123][file_ids_destroy][]" type="checkbox" value="211760658"/>
              <label class="btn btn-light" for="attachment_211760658">
                <i class="fas fa-fw fa-times"/>
              </label>
            </div>
          </div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_files
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="files"/>
          <input class="form-control" id="fragment-test" multiple="multiple" name="page[fragments_attributes][123][files][]" type="file"/>
          <div class="fragment-attachments"></div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_files_with_content
    tag = ComfortableMediaSurfer::Content::Tags::Files.new(context: @page, params: ['file'])
    actual = @builder.fragment_field(tag, 123)

    attachment = active_storage_attachments(:file)
    attachment_url  = view.url_for(attachment)
    thumb_url       = view.url_for(attachment.variant(Comfy::Cms::File::VARIANT_SIZE[:thumb]))

    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-file">File</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="file"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="files"/>
          <input class="form-control" id="fragment-file" multiple="multiple" name="page[fragments_attributes][123][files][]" type="file"/>
          <div class="fragment-attachments">
            <div class="fragment-attachment btn-group btn-group-sm mb-1">
              <a class="btn btn-light text-truncate" data-cms-file-link-tag="{{ cms:page_file_link file, filename: &quot;fragment.jpeg&quot;, as: image }}" data-cms-file-thumb-url="#{thumb_url}" href="#{attachment_url}" target="_blank">fragment.jpeg</a>
              <input id="attachment_211760658" name="page[fragments_attributes][123][file_ids_destroy][]" type="checkbox" value="211760658"/>
              <label class="btn btn-light" for="attachment_211760658">
                <i class="fas fa-fw fa-times"/>
              </label>
            </div>
          </div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_markdown
    tag = ComfortableMediaSurfer::Content::Tags::Markdown.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="markdown"/>
          <textarea data-cms-cm-mode="text/x-markdown" id="fragment-test" name="page[fragments_attributes][123][content]"></textarea>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_number
    tag = ComfortableMediaSurfer::Content::Tags::Number.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="number"/>
          <input class="form-control" id="fragment-test" name="page[fragments_attributes][123][content]" type="number"/>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_textarea
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="file"/>
          <input class="form-control" id="fragment-test" name="page[fragments_attributes][123][files]" type="file"/>
          <div class="fragment-attachments"></div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_fragment_field_for_wysiwyg
    tag = ComfortableMediaSurfer::Content::Tags::Wysiwyg.new(context: @page, params: ['test'])
    actual = @builder.fragment_field(tag, 123)
    expected = <<~HTML
      <div class="form-group row">
        <label class="renderable-true col-form-label col-sm-2 text-sm-right" for="fragment-test">Test</label>
        <div class="col-sm-10">
          <input autocomplete="off" name="page[fragments_attributes][123][identifier]" type="hidden" value="test"/>
          <input autocomplete="off" name="page[fragments_attributes][123][tag]" type="hidden" value="wysiwyg"/>
          <textarea data-cms-rich-text="true" id="fragment-test" name="page[fragments_attributes][123][content]"></textarea>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end

  def test_form_actions
    actual = @builder.form_actions do
      'test'
    end
    expected = <<~HTML
      <div class="form-actions row bg-light">
        <div class="col-lg-8 offset-lg-2">
          <div class="form-group row mb-0">
            <div class="col-sm-10 offset-sm-2">test</div>
          </div>
        </div>
      </div>
    HTML
    assert_xml_equal expected, actual
  end
end
</file>

<file path="test/lib/revisions_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class RevisionsTest < ActiveSupport::TestCase
  setup do
    @site     = comfy_cms_sites(:default)
    @layout   = comfy_cms_layouts(:default)
    @page     = comfy_cms_pages(:default)
    @snippet  = comfy_cms_snippets(:default)
  end

  def test_fixtures_validity
    assert_equal ({
      'content' => 'revision {{cms:fragment content}}',
      'css' => 'revision css',
      'js' => 'revision js'
    }), comfy_cms_revisions(:layout).data

    assert_equal ({ 'fragments_attributes' => [
      { 'identifier' => 'content', 'content' => 'old content' },
      { 'identifier' => 'title',   'content' => 'old title' }
    ] }), comfy_cms_revisions(:page).data

    assert_equal ({
      'content' => 'revision content'
    }), comfy_cms_revisions(:snippet).data
  end

  def test_init_for_layouts
    assert_equal %w[content css js], @layout.revision_fields
  end

  def test_init_for_pages
    assert_equal ['fragments_attributes'], @page.revision_fields
  end

  def test_init_for_snippets
    assert_equal ['content'], @snippet.revision_fields
  end

  def test_creation_for_layout
    old_attributes = @layout.attributes.slice('content', 'css', 'js')

    assert_difference -> { @layout.revisions.count } do
      @layout.update!(
        content: 'new {{cms:fragment content}}',
        js: 'new js'
      )
      @layout.reload
      assert_equal 2, @layout.revisions.count
      revision = @layout.revisions.last
      assert_equal old_attributes, revision.data
    end
  end

  def test_creation_for_layout_ignore
    assert_no_difference -> { @layout.revisions.count } do
      @layout.update(label: 'new label')
    end
  end

  def test_creation_for_page
    assert_difference -> { @page.revisions.count } do
      @page.update!(
        fragments_attributes: [
          { identifier: 'content',
            content: 'new content' }
        ]
      )
      @page.reload
      assert_equal 2, @page.revisions.count
      revision = @page.revisions.last

      assert_equal ({
        'fragments_attributes' => [
          { identifier: 'boolean',
            tag: 'checkbox',
            content: nil,
            datetime: nil,
            boolean: true },
          { identifier: 'file',
            tag: 'file',
            content: nil,
            datetime: nil,
            boolean: false },
          { identifier: 'datetime',
            tag: 'datetime',
            content: nil,
            datetime: comfy_cms_fragments(:datetime).datetime,
            boolean: false },
          { identifier: 'content',
            tag: 'text',
            content: 'content',
            datetime: nil,
            boolean: false }
        ]
      }), revision.data
    end
  end

  def test_creation_for_page_ignore
    assert_no_difference -> { @page.revisions.count } do
      @page.update(label: 'new label')
    end
  end

  def test_creation_for_snippet
    old_attributes = @snippet.attributes.slice('content')

    assert_difference -> { @snippet.revisions.count } do
      @snippet.update(content: 'new content')
      @snippet.reload
      assert_equal 2, @snippet.revisions.count
      revision = @snippet.revisions.last
      assert_equal old_attributes, revision.data
    end
  end

  def test_creation_for_snippet_ignore
    assert_no_difference -> { @snippet.revisions.count } do
      @snippet.update(label: 'new label')
    end
  end

  def test_creation_for_new_record
    assert_difference 'Comfy::Cms::Snippet.count' do
      assert_no_difference 'Comfy::Cms::Revision.count' do
        snippet = @site.snippets.create!(
          label: 'test snippet',
          identifier: 'test_snippet',
          content: 'test content'
        )
        assert_equal 0, snippet.revisions.count
      end
    end
  end

  def test_restore_from_revision_for_layout
    revision = comfy_cms_revisions(:layout)

    assert_difference -> { @layout.revisions.count } do
      @layout.restore_from_revision(revision)
      @layout.reload
      assert_equal 'revision {{cms:fragment content}}', @layout.content
      assert_equal 'revision css', @layout.css
      assert_equal 'revision js', @layout.js
    end
  end

  def test_restore_from_revision_for_page
    revision = comfy_cms_revisions(:page)

    assert_difference -> { @page.revisions.count } do
      @page.restore_from_revision(revision)
      @page.reload

      assert_equal [
        { identifier: 'boolean',
          tag: 'checkbox',
          content: nil,
          datetime: nil,
          boolean: true },
        { identifier: 'file',
          tag: 'file',
          content: nil,
          datetime: nil,
          boolean: false },
        { identifier: 'datetime',
          tag: 'datetime',
          content: nil,
          datetime: comfy_cms_fragments(:datetime).datetime,
          boolean: false },
        { identifier: 'content',
          tag: 'text',
          content: 'old content',
          datetime: nil,
          boolean: false },
        { identifier: 'title',
          tag: 'text',
          content: 'old title',
          datetime: nil,
          boolean: false }
      ], @page.fragments_attributes
    end
  end

  def test_restore_from_revision_for_snippet
    revision = comfy_cms_revisions(:snippet)

    assert_difference -> { @snippet.revisions.count } do
      @snippet.restore_from_revision(revision)
      @snippet.reload
      assert_equal 'revision content', @snippet.content
    end
  end

  def test_restore_from_revision_with_wrong_revision_type
    revision = comfy_cms_revisions(:layout)

    assert_no_difference -> { @snippet.revisions.count } do
      @snippet.restore_from_revision(revision)
      @snippet.reload
      assert_equal '## snippet content', @snippet.content
    end
  end

  def test_creation_with_limit
    ComfortableMediaSurfer.config.revisions_limit = 1
    revision = comfy_cms_revisions(:snippet)

    assert_equal 1, @snippet.revisions.count

    assert_no_difference -> { @snippet.revisions.count } do
      @snippet.update(content: 'new content')
      assert_nil Comfy::Cms::Revision.find_by_id(revision.id)

      @snippet.reload
      revision = @snippet.revisions.last
      assert_equal ({ 'content' => '## snippet content' }), revision.data
    end
  end
end
</file>

<file path="test/lib/seeds_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class SeedsTest < ActiveSupport::TestCase
  def test_import_all
    Comfy::Cms::Page.destroy_all
    Comfy::Cms::Layout.destroy_all
    Comfy::Cms::Snippet.destroy_all

    assert_difference(-> { Comfy::Cms::Layout.count }, 2) do
      assert_difference(-> { Comfy::Cms::Page.count }, 3) do
        assert_difference(-> { Comfy::Cms::Snippet.count }, 1) do
          ComfortableMediaSurfer::Seeds::Importer.new('sample-site', 'default-site').import!
        end
      end
    end
  end

  def test_import_all_with_no_site
    comfy_cms_sites(:default).destroy

    assert_raises ActiveRecord::RecordNotFound do
      ComfortableMediaSurfer::Seeds::Importer.new('sample-site', 'default-site').import!
    end
  end

  def test_import_single_class
    Comfy::Cms::Page.destroy_all
    Comfy::Cms::Layout.destroy_all
    Comfy::Cms::Snippet.destroy_all

    assert_difference(-> { Comfy::Cms::Layout.count }, 2) do
      assert_difference(-> { Comfy::Cms::Page.count }, 0) do
        assert_difference(-> { Comfy::Cms::Snippet.count }, 0) do
          ComfortableMediaSurfer::Seeds::Importer.new('sample-site', 'default-site').import!(['Layout'])
        end
      end
    end
  end

  def test_import_multiple_classes
    Comfy::Cms::Page.destroy_all
    Comfy::Cms::Layout.destroy_all
    Comfy::Cms::Snippet.destroy_all

    assert_difference(-> { Comfy::Cms::Layout.count }, 2) do
      assert_difference(-> { Comfy::Cms::Page.count }, 0) do
        assert_difference(-> { Comfy::Cms::Snippet.count }, 1) do
          ComfortableMediaSurfer::Seeds::Importer.new('sample-site', 'default-site').import!(%w[Layout Snippet])
        end
      end
    end
  end

  def test_import_all_with_no_folder
    assert_raises ComfortableMediaSurfer::Seeds::Error do
      ComfortableMediaSurfer::Seeds::Importer.new('invalid', 'default-site').import!
    end
  end

  def test_export_all
    ActiveStorage::Blob.any_instance.stubs(:download).returns(
      File.read(File.join(Rails.root, 'db/cms_seeds/sample-site/files/default.jpg'))
    )

    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    ComfortableMediaSurfer::Seeds::Exporter.new('default-site', 'test-site').export!
    assert(File.exist?(File.join(host_path, 'layouts')))
  ensure
    FileUtils.rm_rf(host_path)
  end

  def test_export_all_with_no_site
    comfy_cms_sites(:default).destroy

    assert_raises ActiveRecord::RecordNotFound do
      ComfortableMediaSurfer::Seeds::Exporter.new('sample-site', 'default-site').export!
    end
  end

  def test_export_single_class
    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    ComfortableMediaSurfer::Seeds::Exporter.new('default-site', 'test-site').export!(['Layout'])
    assert(File.exist?(File.join(host_path, 'layouts')))
  ensure
    FileUtils.rm_rf(host_path)
  end

  def test_export_multiple_classes
    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    ComfortableMediaSurfer::Seeds::Exporter.new('default-site', 'test-site').export!(%w[Layout Snippet])
    assert(%w[layouts snippets].all? { |klass| File.exist?(File.join(host_path, klass)) })
  ensure
    FileUtils.rm_rf(host_path)
  end
end
</file>

<file path="test/models/categorization_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsCategorizationTest < ActiveSupport::TestCase
  setup do
    @category = comfy_cms_categories(:default)
  end

  def test_fixtures_validity
    Comfy::Cms::Categorization.all.each do |categorization|
      assert categorization.valid?, categorization.errors.full_messages.to_s
    end
  end

  def test_validation
    category = Comfy::Cms::Categorization.new
    assert category.invalid?
    assert_has_errors_on category, :category, :categorized
  end

  def test_creation
    assert_difference 'Comfy::Cms::Categorization.count' do
      @category.categorizations.create!(
        categorized: comfy_cms_pages(:default)
      )
    end
  end

  def test_categorized_relationship
    file = comfy_cms_files(:default)
    assert file.respond_to?(:category_ids)
    assert_equal 1, file.categories.count
    assert_equal @category, file.categories.first

    assert comfy_cms_pages(:default).respond_to?(:category_ids)
    assert_equal 0, comfy_cms_pages(:default).categories.count
  end

  def test_categorized_destruction
    file_count            = -> { Comfy::Cms::File.count }
    categorization_count  = -> { Comfy::Cms::Categorization.count }

    assert_difference([file_count, categorization_count], -1) do
      comfy_cms_files(:default).destroy
    end
  end

  def test_categorized_syncing
    # or we're not going to be able to link
    @category.update_column(:categorized_type, 'Comfy::Cms::Page')

    page = comfy_cms_pages(:default)
    assert_equal 0, page.categories.count

    page.update(category_ids: [@category.id, 9999])

    page.reload
    assert_equal 1, page.categories.count

    page.update(category_ids: [])
    page.reload
    assert_equal 0, page.categories.count
  end

  def test_scope_for_category
    category = @category
    assert_equal 1, Comfy::Cms::File.for_category(category.label).count
    assert_equal 0, Comfy::Cms::File.for_category('invalid').count
    assert_equal 1, Comfy::Cms::File.for_category(category.label, 'invalid').count
    assert_equal 1, Comfy::Cms::File.for_category(nil).count

    new_category = comfy_cms_sites(:default).categories.create!(
      label: 'Test Category',
      categorized_type: 'Comfy::Cms::File'
    )
    new_category.categorizations.create!(categorized: comfy_cms_pages(:default))
    assert_equal 1, Comfy::Cms::File.for_category(category.label, new_category.label).to_a.size
    assert_equal 1,
                 Comfy::Cms::File.for_category(category.label, new_category.label).distinct.count('comfy_cms_files.id')
  end
end
</file>

<file path="test/models/fragment_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsFragmentTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)

    @upload_doc = fixture_file_upload('document.pdf', 'application/pdf')
    @upload_img = fixture_file_upload('image.jpg', 'image/jpeg')
  end

  def page_params(frag_params = [])
    {
      layout: @layout,
      label: 'test page',
      slug: 'test_page',
      parent_id: @page.id,
      fragments_attributes: frag_params
    }
  end

  # -- Tests -------------------------------------------------------------------

  def test_initialization
    frag = Comfy::Cms::Fragment.new
    assert_equal 'text', frag.tag
  end

  def test_fixtures_validity
    Comfy::Cms::Fragment.all.each do |frag|
      assert frag.valid?, frag.errors.full_messages.to_s
    end
  end

  def test_validation
    frag = Comfy::Cms::Fragment.new
    refute frag.valid?
    assert_has_errors_on frag, :identifier, :record
  end

  def test_content_serialization
    fragment = Comfy::Cms::Fragment.new

    fragment.content = 'test'
    assert_equal 'test', fragment.content

    fragment.content = 123
    assert_equal 123, fragment.content

    fragment.content = [1, 2, 3]
    assert_equal [1, 2, 3], fragment.content
  end

  def test_creation
    assert_difference 'Comfy::Cms::Fragment.count' do
      @page.fragments.create!(
        identifier: 'test',
        content: 'test content'
      )
    end
  end

  def test_creation_with_files
    assert_difference -> { Comfy::Cms::Fragment.count } do
      assert_difference(-> { ActiveStorage::Attachment.count }, 2) do
        frag = @page.fragments.create!(
          identifier: 'test',
          tag: 'files',
          files: [@upload_doc, @upload_img]
        )
        assert_equal 2, frag.attachments.count
      end
    end
  end

  def test_creation_with_file
    fragment_count    = -> { Comfy::Cms::Fragment.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference [fragment_count, attachment_count] do
      frag = @page.fragments.create!(
        identifier: 'test',
        tag: 'file',
        files: [@upload_doc, @upload_img]
      )
      assert_equal 1, frag.attachments.count
    end
  end

  def test_update_with_files
    frag = @page.fragments.create!(
      identifier: 'test',
      tag: 'file',
      files: [@upload_img]
    )
    assert_equal 1, frag.attachments.count
    assert_equal 'image.jpg', frag.attachments.first.filename.to_s
    assert_difference -> { frag.attachments.count } do
      frag.update(
        tag: 'files',
        files: [@upload_doc]
      )
    end
  end

  def test_update_with_file
    frag = @page.fragments.create!(
      identifier: 'test'
    )
    assert_equal 0, frag.attachments.count
    assert_difference -> { frag.attachments.count } do
      frag.update(
        tag: 'file',
        files: [@upload_doc]
      )
    end
    frag.reload
    assert_equal 'document.pdf', frag.attachments.first.filename.to_s
  end

  def test_update_with_file_removal
    frag = comfy_cms_fragments(:file)
    assert_difference -> { frag.attachments.count }, -1 do
      frag.update(
        file_ids_destroy: frag.attachments.pluck(:id)
      )
    end
  end

  def test_touch
    timestamp = 2.days.ago
    @page.update_column(:updated_at, timestamp)
    comfy_cms_fragments(:default).update(content: 'updated')
    @page.reload
    refute_equal timestamp, @page.updated_at
  end
end
</file>

<file path="test/models/layout_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsLayoutTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
  end

  def test_fixtures_validity
    Comfy::Cms::Layout.all.each do |layout|
      assert layout.valid?, layout.errors.full_messages.to_s
    end
  end

  def test_validations
    layout = @site.layouts.create
    assert layout.errors.present?
    assert_has_errors_on layout, :label, :identifier
  end

  def test_content_tokens
    layout = Comfy::Cms::Layout.new(content: 'a {{cms:text content}} b')
    expected = [
      'a ',
      { tag_class: 'text', tag_params: 'content', source: '{{cms:text content}}' },
      ' b'
    ]
    assert_equal expected, layout.content_tokens
  end

  def test_content_tokens_nested
    layout_a = Comfy::Cms::Layout.new(content: 'a {{cms:text content}} {{cms:text footer}} b')
    layout_b = Comfy::Cms::Layout.new(content: 'c {{cms:text content}} d')
    layout_b.parent = layout_a
    expected = [
      'a ',
      'c ',
      { tag_class: 'text', tag_params: 'content', source: '{{cms:text content}}' },
      ' d',
      ' ',
      { tag_class: 'text', tag_params: 'footer', source: '{{cms:text footer}}' },
      ' b'
    ]
    assert_equal expected, layout_b.content_tokens
  end

  def test_content_tokens_nested_with_fragment_subclass_tag
    layout_a = Comfy::Cms::Layout.new(content: 'a {{cms:markdown content}} b')
    layout_b = Comfy::Cms::Layout.new(content: 'c {{cms:text content}} d')
    layout_b.parent = layout_a
    expected = [
      'a ',
      'c ',
      { tag_class: 'text', tag_params: 'content', source: '{{cms:text content}}' },
      ' d',
      ' b'
    ]
    assert_equal expected, layout_b.content_tokens
  end

  def test_content_tokens_nested_with_non_fragment_subclass_tag
    layout_a = Comfy::Cms::Layout.new(content: 'a {{cms:## snippet content}} b')
    layout_b = Comfy::Cms::Layout.new(content: 'c {{cms:text content}} d')
    layout_b.parent = layout_a
    expected = [
      'c ',
      { tag_class: 'text', tag_params: 'content', source: '{{cms:text content}}' },
      ' d'
    ]
    assert_equal expected, layout_b.content_tokens
  end

  def test_content_tokens_nested_without_content_tag
    layout_a = Comfy::Cms::Layout.new(content: 'a {{cms:text footer}} b')
    layout_b = Comfy::Cms::Layout.new(content: 'c {{cms:text content}} d')
    layout_b.parent = layout_a
    expected = [
      'c ', { tag_class: 'text', tag_params: 'content', source: '{{cms:text content}}' }, ' d'
    ]
    assert_equal expected, layout_b.content_tokens
  end

  def test_label_assignment
    layout = @site.layouts.new(
      identifier: 'test',
      content: 'content'
    )
    assert layout.valid?
    assert_equal 'Test', layout.label
  end

  def test_creation
    assert_difference 'Comfy::Cms::Layout.count' do
      layout = @site.layouts.create(
        label: 'New Layout',
        identifier: 'new-layout',
        content: '{{cms:text default}}',
        css: 'css',
        js: 'js'
      )
      assert_equal 'New Layout',            layout.label
      assert_equal 'new-layout',            layout.identifier
      assert_equal '{{cms:text default}}',  layout.content
      assert_equal 'css',                   layout.css
      assert_equal 'js',                    layout.js
      assert_equal 1,                       layout.position
    end
  end

  def test_options_for_select
    assert_equal ['Default Layout', 'Nested Layout', '. . Child Layout'],
                 Comfy::Cms::Layout.options_for_select(@site).collect(&:first)
    assert_equal ['Default Layout', 'Nested Layout'],
                 Comfy::Cms::Layout.options_for_select(@site, comfy_cms_layouts(:child)).collect(&:first)
    assert_equal ['Default Layout'],
                 Comfy::Cms::Layout.options_for_select(@site, comfy_cms_layouts(:nested)).collect(&:first)
  end

  def test_app_layouts_for_select
    FileUtils.touch(File.expand_path('app/views/layouts/comfy/admin/cms/nested.html.erb', Rails.root))
    FileUtils.touch(File.expand_path('app/views/layouts/comfy/_partial.html.erb', Rails.root))
    FileUtils.touch(File.expand_path('app/views/layouts/comfy/not_a_layout.erb', Rails.root))

    view_paths = [File.expand_path('app/views/', Rails.root)]
    assert_equal ['comfy/admin/cms', 'comfy/admin/cms/nested'],
                 Comfy::Cms::Layout.app_layouts_for_select(view_paths)
  ensure
    FileUtils.rm(File.expand_path('app/views/layouts/comfy/admin/cms/nested.html.erb', Rails.root))
    FileUtils.rm(File.expand_path('app/views/layouts/comfy/_partial.html.erb', Rails.root))
    FileUtils.rm(File.expand_path('app/views/layouts/comfy/not_a_layout.erb', Rails.root))
  end

  def test_multiple_view_paths
    FileUtils.mkdir_p(File.expand_path('app/additional_views/layouts', Rails.root))
    FileUtils.touch(File.expand_path('app/additional_views/layouts/additional_layout.html.erb', Rails.root))

    view_paths = [File.expand_path('app/views/', Rails.root), File.expand_path('app/additional_views', Rails.root)]
    assert_equal ['additional_layout', 'comfy/admin/cms'], Comfy::Cms::Layout.app_layouts_for_select(view_paths)
  ensure
    FileUtils.rm_r(File.expand_path('app/additional_views', Rails.root))
  end

  def test_update_forces_page_content_reload
    layout_a = comfy_cms_layouts(:nested)
    layout_b = comfy_cms_layouts(:child)
    page_a = @site.pages.create!(
      label: 'page_1',
      slug: 'page-1',
      parent_id: @page.id,
      layout_id: layout_a.id,
      is_published: '1',
      fragments_attributes: [
        { identifier: 'header',
          content: 'header_content' },
        { identifier: 'content',
          content: 'content_content' }
      ]
    )
    page_b = @site.pages.create!(
      label: 'page_2',
      slug: 'page-2',
      parent_id: @page.id,
      layout_id: layout_b.id,
      is_published: '1',
      fragments_attributes: [
        { identifier: 'header',
          content: 'header_content' },
        { identifier: 'left_column',
          content: 'left_column_content' },
        { identifier: 'right_column',
          content: 'left_column_content' }
      ]
    )
    assert_equal "header_content\ncontent_content", page_a.content_cache
    assert_equal "header_content\nleft_column_content\nleft_column_content", page_b.content_cache

    layout_a.update(content: 'Updated {{cms:text content}}')
    page_a.reload
    page_b.reload

    assert_equal 'Updated content_content', page_a.content_cache
    assert_equal "Updated left_column_content\nleft_column_content", page_b.content_cache
  end

  def test_cache_buster
    timestamp = Time.current
    layout = @site.layouts.create(updated_at: timestamp)
    assert_equal timestamp.to_i, layout.cache_buster
  end
end
</file>

<file path="test/models/snippet_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsSnippetTest < ActiveSupport::TestCase
  setup do
    @site = comfy_cms_sites(:default)
  end

  def test_fixtures_validity
    Comfy::Cms::Snippet.all.each do |snippet|
      assert snippet.valid?, snippet.errors.full_messages.to_s
    end
  end

  def test_validations
    snippet = Comfy::Cms::Snippet.new
    snippet.save
    assert snippet.invalid?
    assert_has_errors_on snippet, :site, :label, :identifier
  end

  def test_label_assignment
    snippet = @site.snippets.new(
      identifier: 'test'
    )
    assert snippet.valid?
    assert_equal 'Test', snippet.label
  end

  def test_create
    assert_difference 'Comfy::Cms::Snippet.count' do
      snippet = @site.snippets.create(
        label: 'Test Snippet',
        identifier: 'test',
        content: 'Test Content'
      )
      assert_equal 'Test Snippet', snippet.label
      assert_equal 'test', snippet.identifier
      assert_equal 'Test Content', snippet.content
      assert_equal 2, snippet.position
    end
  end

  def test_update_forces_page_content_reload
    snippet = comfy_cms_snippets(:default)
    page    = comfy_cms_pages(:default)
    comfy_cms_fragments(:default).update_column(:content, '{{cms:snippet default}}')
    page.clear_content_cache!

    assert_equal '## snippet content', page.content_cache
    snippet.update(content: 'new ## snippet content')
    page.reload
    assert_equal 'new ## snippet content', page.content_cache
  end
end
</file>

<file path="test/system/files_frontend_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class FilesFrontendTest < ApplicationSystemTestCase
  setup do
    @site     = comfy_cms_sites(:default)
    @layout   = comfy_cms_layouts(:default)
    @page     = comfy_cms_pages(:default)
  end

  def test_site_file_drag_and_drop
    skip
    # Dragging from iframe isn't supported by the chromedriver. This is not
    # possible to test at the moment.
    # See: https://github.com/SeleniumHQ/selenium/issues/810"
  end

  def test_page_file_drag_and_drop
    @layout.update_column(:content, <<~TEXT)
      {{ cms:files attachments, render: false }}
      {{ cms:text content }}
    TEXT

    comfy_cms_fragments(:default).update_column(:content, '')

    @page.update!(
      fragments_attributes: [{
        identifier: 'attachments',
        tag: 'files',
        files: fixture_file_upload('image.jpg', 'image/jpg')
      }]
    )

    visit_p edit_comfy_admin_cms_site_page_path(@site, @page)

    text_field = find_field(name: 'page[fragments_attributes][1][content]')
    find_link('image.jpg').drag_to(text_field)

    skip
    # Figure out why dragging doesn't really happen.
    assert_equal '{{ cms:page_file_link attachments, filename: "image.jpg", as: image }}', text_field.value
  end
end
</file>

<file path="test/tasks/cms_seeds_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'
require 'rake'

class CmsSeedsTaskTest < ActiveSupport::TestCase
  setup do
    @rake = Rake::Application.new
    Rake.application = @rake
    # We force rake file reload by passing empty array as the last parameter
    Rake.application.rake_require('tasks/cms_seeds', $LOAD_PATH, [])
    Rake::Task.define_task(:environment)
  end

  def test_import
    importer = mock
    ComfortableMediaSurfer::Seeds::Importer.expects(:new).with('from_folder', 'to_site').returns(importer)
    importer.expects(:import!)

    with_captured_stdout do
      @rake['comfy:cms_seeds:import'].invoke('from_folder', 'to_site')
    end
  end

  def test_import_for_a_specific_class
    importer = mock
    ComfortableMediaSurfer::Seeds::Importer.expects(:new).with('from_folder', 'to_site').returns(importer)
    importer.expects(:import!).with(['Page'])

    with_captured_stdout do
      @rake['comfy:cms_seeds:import'].invoke('from_folder', 'to_site', 'Page')
    end
  end

  def test_export
    exporter = mock
    ComfortableMediaSurfer::Seeds::Exporter.expects(:new).with('from_site', 'to_folder').returns(exporter)
    exporter.expects(:export!)

    with_captured_stdout do
      @rake['comfy:cms_seeds:export'].invoke('from_site', 'to_folder')
    end
  end

  def test_export_for_a_specific_class
    exporter = mock
    ComfortableMediaSurfer::Seeds::Exporter.expects(:new).with('from_site', 'to_folder').returns(exporter)
    exporter.expects(:export!).with(['Page'])

    with_captured_stdout do
      @rake['comfy:cms_seeds:export'].invoke('from_site', 'to_folder', 'Page')
    end
  end
end
</file>

<file path="test/test_helper.rb">
# frozen_string_literal: true

ENV['RAILS_ENV'] = 'test'

require 'simplecov'

unless ENV['SKIP_COV']
  require 'coveralls'
  Coveralls.wear!('rails')
  SimpleCov.formatter = Coveralls::SimpleCov::Formatter
end

SimpleCov.command_name 'Unit Tests'
SimpleCov.start 'rails' do
  add_filter 'lib/tasks'
  add_filter 'lib/generators'
  add_filter 'lib/comfortable_media_surfer/engine'
  add_filter 'lib/comfortable_media_surfer/routing' # TODO: add comprehensive tests for routes
  add_filter 'lib/comfortable_media_surfer/version'
end

require_relative '../config/environment'
require 'rails/test_help'
require 'rails/generators'
require 'minitest/reporters'
require 'minitest/unit'
require 'mocha/minitest'
require 'capybara/cuprite'

# suppress 'already initialized' warnings - this is needed
# for loading and accurate coverage reporting on Rails 7.1
# TODO: find less hacky solution for this
if Gem::Version.new(Rails.version) >= Gem::Version.new('7.1.0')
  $VERBOSE = nil
  Dir[Rails.root.join('lib/**/*.rb')].each { |f| load f }
  $VERBOSE = false
end

reporter_options = { color: true, slow_count: 4 }
Minitest::Reporters.use! [Minitest::Reporters::DefaultReporter.new(reporter_options)]
Rails.backtrace_cleaner.remove_silencers!

class ActiveSupport::TestCase
  include ActionDispatch::TestProcess

  fixtures :all
  self.use_transactional_tests = true

  setup :reset_config,
        :reset_locale

  # resetting default configuration
  def reset_config
    ComfortableMediaSurfer.configure do |config|
      config.cms_title            = 'ComfortableMediaSurfer CMS Engine'
      config.admin_auth           = 'ComfortableMediaSurfer::AccessControl::AdminAuthentication'
      config.admin_authorization  = 'ComfortableMediaSurfer::AccessControl::AdminAuthorization'
      config.public_auth          = 'ComfortableMediaSurfer::AccessControl::PublicAuthentication'
      config.public_authorization = 'ComfortableMediaSurfer::AccessControl::PublicAuthorization'
      config.admin_route_redirect = ''
      config.enable_seeds         = false
      config.seeds_path           = File.expand_path('db/cms_seeds', Rails.root)
      config.revisions_limit      = 25
      config.locales              = {
        'en' => 'English',
        'es' => 'Español'
      }
      config.admin_locale         = nil
      config.admin_cache_sweeper  = nil
      config.allow_erb            = false
      config.allowed_helpers      = nil
      config.allowed_partials     = nil
      config.allowed_templates    = nil
      config.hostname_aliases     = nil
      config.reveal_cms_partials  = false
      config.public_cms_path      = nil
      config.page_to_json_options = { methods: [:content], except: [:content_cache] }
    end
    ComfortableMediaSurfer::AccessControl::AdminAuthentication.username = 'user'
    ComfortableMediaSurfer::AccessControl::AdminAuthentication.password = 'pass'
  end

  def reset_locale
    I18n.default_locale = :en
    I18n.locale         = :en
  end

  # Example usage:
  #   assert_has_errors_on @record, :field_1, :field_2
  def assert_has_errors_on(record, *fields)
    unmatched = record.errors.attribute_names - fields.flatten
    assert unmatched.blank?, "#{record.class} has errors on '#{unmatched.join(', ')}'"
    unmatched = fields.flatten - record.errors.attribute_names
    assert unmatched.blank?, "#{record.class} doesn't have errors on '#{unmatched.join(', ')}'"
  end

  # Example usage:
  #   assert_exception_raised                                 do ... end
  #   assert_exception_raised ActiveRecord::RecordInvalid     do ... end
  #   assert_exception_raised Plugin::Error, 'error_message'  do ... end
  def assert_exception_raised(exception_class = nil, error_message = nil)
    exception_raised = nil
    yield
  rescue StandardError => e
    e
  ensure
    if exception_raised
      if exception_class
        assert_equal exception_class, exception_raised.class, exception_raised.to_s
      else
        assert true
      end
      assert_equal error_message, exception_raised.to_s if error_message
    else
      flunk 'Exception was not raised'
    end
  end

  def assert_no_select(selector, value = nil)
    assert_select(selector, text: value, count: 0)
  end

  # Capturing $stdout into a string
  def with_captured_stdout
    old = $stdout
    $stdout = StringIO.new
    yield
    $stdout.string
  ensure
    $stdout = old
  end
end

class ActionDispatch::IntegrationTest
  # Attaching http_auth stuff with request. Example use:
  #   r :get, '/cms-admin/pages'
  def r(method, path, options = {})
    headers = options[:headers] || {}
    headers['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Basic.encode_credentials(
      ComfortableMediaSurfer::AccessControl::AdminAuthentication.username,
      ComfortableMediaSurfer::AccessControl::AdminAuthentication.password
    )
    options[:headers] = headers
    # send(:get, path, options)
    send(method, path, **options)
  end

  def with_routing
    yield ComfortableMediaSurfer::Application.routes
  ensure
    ComfortableMediaSurfer::Application.routes_reloader.reload!
  end
end

class ActionView::TestCase
  # When testing view helpers we don't actually have access to request. So
  # here's a fake one.
  class FakeRequest
    attr_accessor :host_with_port, :fullpath

    def initialize
      @host_with_port = 'www.example.com'
      @fullpath       = '/'
    end
  end

  setup do
    @request = FakeRequest.new
  end

  def request
    @request ||= FakeRequest.new
  end

  # Expected and actual are wrapped in a root tag to ensure proper XML structure.
  def assert_xml_equal(expected, actual)
    expected_xml = Nokogiri::XML("<test-xml>\n#{expected}\n</test-xml>", &:noblanks)
    actual_xml   = Nokogiri::XML("<test-xml>\n#{actual}\n</test-xml>", &:noblanks)

    equivalent = EquivalentXml.equivalent?(expected_xml, actual_xml)
    assert equivalent, -> {
      # using a lambda because diffing is expensive
      Diffy::Diff.new(
        sort_attributes(expected_xml.root).to_xml(indent: 2),
        sort_attributes(actual_xml.root).to_xml(indent: 2)
      ).to_s
    }
  end

private

  def sort_attributes(doc)
    return if doc.blank?

    doc.dup.traverse do |node|
      if node.is_a?(Nokogiri::XML::Element)
        attributes = node.attribute_nodes.sort_by(&:name)
        attributes.each do |attribute|
          node.delete(attribute.name)
          node[attribute.name] = attribute.value
        end
      end
      node
    end
  end
end

class Rails::Generators::TestCase
  setup :prepare_destination,
        :prepare_files

  destination File.expand_path('../tmp', File.dirname(__FILE__))

  def prepare_files
    config_path = File.join(destination_root, 'config')
    routes_path = File.join(config_path, 'routes.rb')
    app_path    = File.join(config_path, 'application.rb')
    FileUtils.mkdir_p(config_path)
    FileUtils.touch(routes_path)
    File.write(routes_path, <<~RUBY)
      Test::Application.routes.draw do
      end
    RUBY
    File.write(app_path, <<~RUBY)
      module TestApp
        class Application < Rails::Application
        end
      end
    RUBY
  end

  def read_file(filename)
    File.read(
      File.join(
        File.expand_path('fixtures/generators', File.dirname(__FILE__)),
        filename
      )
    )
  end
end

# In order to run system tests ensure that chrome-driver is installed.
class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  Capybara.register_driver(:better_cuprite) do |app|
    Capybara::Cuprite::Driver.new(
      app,
      window_size: [1200, 800],
      # See additional options for Dockerized environment in the respective section of this article
      browser_options: {},
      # Increase Chrome startup wait time (required for stable CI builds)
      process_timeout: 10,
      # Enable debugging capabilities
      inspector: true,
      # Allow running Chrome in a headful mode by setting HEADLESS env
      # var to a falsey value
      headless: !ENV['HEADLESS'].in?(%w[n 0 no false])
    )
  end

  # Configure Capybara to use :better_cuprite driver by default
  Capybara.default_driver = Capybara.javascript_driver = :better_cuprite
  Capybara.enable_aria_label = true

  driven_by :cuprite, using: :chromium, screen_size: [1400, 1400]

  # Visiting path and passing in BasicAuth credentials at the same time
  # I have no idea how to set headers here.
  def visit_p(path)
    username = ComfortableMediaSurfer::AccessControl::AdminAuthentication.username
    password = ComfortableMediaSurfer::AccessControl::AdminAuthentication.password
    visit("http://#{username}:#{password}@#{Capybara.server_host}:#{Capybara.server_port}#{path}")
  end
end
</file>

<file path=".rubocop.yml">
require:
  # - rubocop-rails
  # - rubocop-minitest

AllCops:
  TargetRubyVersion: 3.2
  NewCops: enable
  Exclude:
    - bin/*
    - db/schema.rb
    - db/migrate/**/*
    - test/fixtures/**/*
    - tmp/**/*
    - vendor/bundle/**/*

# -- Layout --------------------------------------------------------------------
Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/LineLength:
  Max: 148

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/AccessModifierIndentation:
  EnforcedStyle: outdent

# -- Metrics -------------------------------------------------------------------
Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Max: 45

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Max: 12

Metrics/MethodLength:
  Enabled: false

Metrics/PerceivedComplexity:
  Max: 15

# -- Naming --------------------------------------------------------------------
Naming/MethodParameterName:
  Enabled: false

# -- Style ---------------------------------------------------------------------
Style/ClassAndModuleChildren:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/DocumentDynamicEvalDefinition:
  Enabled: false

Style/HashSyntax:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/Lambda:
  EnforcedStyle: literal

Style/OptionalBooleanParameter:
  Enabled: false

Style/SafeNavigation:
  Enabled: false

Style/RegexpLiteral:
  EnforcedStyle: percent_r
</file>

<file path="LICENSE">
Copyright (c) 2010-2019 Oleg Khabarov, (c) 2024 Shakacode LLC

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path=".github/workflows/coveralls.yml">
name: "Coveralls"
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  coveralls:
    strategy:
      matrix:
        ruby-version:
          - "3.3"
        rails-version:
          - "7.1"
        continue-on-error: [true]
    name: ${{ format('Coverage (Ruby {0}, Rails {1})', matrix.ruby-version, matrix.rails-version) }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.continue-on-error }}
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/${{ matrix.rails-version }}.gemfile
      RAILS_ENV: test
      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
      - run: npm ci

      - name: Install Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Update surfer gem
        run: bundle update comfortable_media_surfer

      - name: Compile assets
        run: bin/bundle exec rails comfy:compile_assets

      - name: Run tests, report coverage
        run: |
          bin/bundle exec rails db:drop
          bin/bundle exec rails db:create
          bin/bundle exec rails db:migrate
          bin/bundle exec rails test:db
</file>

<file path="app/controllers/comfy/cms/content_controller.rb">
# frozen_string_literal: true

class Comfy::Cms::ContentController < Comfy::Cms::BaseController
  # Authentication module must have `authenticate` method
  include ComfortableMediaSurfer.config.public_auth.to_s.constantize

  # Authorization module must have `authorize` method
  include ComfortableMediaSurfer.config.public_authorization.to_s.constantize

  before_action :load_seeds
  before_action :load_cms_page,
                :authenticate,
                :authorize,
                only: :show

  def show
    if @cms_page.target_page.present?
      redirect_to @cms_page.target_page.url(relative: true)
    else
      respond_to do |format|
        format.html { render_page }
        format.json do
          @cms_page.content = render_to_string(
            inline: @cms_page.content_cache,
            layout: false
          )
          json_page = @cms_page.as_json(ComfortableMediaSurfer.config.page_to_json_options)
          render json: json_page
        end
      end
    end
  end

protected

  def render_page(status = :ok)
    render  inline: @cms_page.content_cache,
            layout: app_layout,
            status: status,
            content_type: mime_type
  end

  # it's possible to control mimetype of a page by creating a `mime_type` field
  def mime_type
    mime_block = @cms_page.fragments.detect { |f| f.identifier == 'mime_type' }
    mime_block&.content&.strip || 'text/html'
  end

  def app_layout
    return false if request.xhr? || !@cms_layout

    @cms_layout.app_layout.present? ? @cms_layout.app_layout : false
  end

  def load_seeds
    return unless ComfortableMediaSurfer.config.enable_seeds

    ComfortableMediaSurfer::Seeds::Importer.new(@cms_site.identifier).import!
  end

  # Attempting to populate @cms_page and @cms_layout instance variables so they
  # can be used in view helpers/partials
  def load_cms_page
    return if find_cms_page_by_full_path("/#{params[:cms_path]}")

    if find_cms_page_by_full_path('/404')
      render_page(:not_found)
    else
      message = "Page Not Found at: \"#{params[:cms_path]}\""
      raise ActionController::RoutingError, message
    end
  end

  # Getting page and setting content_cache and fragments data if we need to
  # serve translation data
  def find_cms_page_by_full_path(full_path)
    @cms_page = if Rails.env == 'development'
                  @cms_site.pages.find_by!(full_path: full_path)
                else
                  @cms_site.pages.published.find_by!(full_path: full_path)
                end

    @cms_page.translate!
    @cms_layout = @cms_page.layout

    @cms_page
  rescue ActiveRecord::RecordNotFound
    nil
  end
end
</file>

<file path="app/helpers/comfy/admin/cms_helper.rb">
# frozen_string_literal: true

module Comfy
  module Admin
    module CmsHelper
      # Wrapper around Comfy::FormBuilder
      def comfy_form_with(**options, &)
        form_options = options.merge(builder: ComfortableMediaSurfer::FormBuilder)
        form_options[:bootstrap]  = { layout: :horizontal }
        form_options[:local]      = true
        bootstrap_form_with(**form_options, &)
      end

      def comfy_admin_partial(path, params = {})
        render path, params
      rescue ActionView::MissingTemplate
        if ComfortableMediaSurfer.config.reveal_cms_partials
          content_tag(:div, class: 'comfy-admin-partial') do
            path
          end
        end
      end

      # Injects some content somewhere inside cms admin area
      def cms_hook(name, options = {})
        ComfortableMediaSurfer::ViewHooks.render(name, self, options)
      end

      # @param [String] fragment_id
      # @param [ActiveStorage::Blob] attachment
      # @param [Boolean] multiple
      # @return [String] {{ cms:page_file_link #{fragment_id}, ... }}
      def cms_page_file_link_tag(fragment_id:, attachment:, multiple:)
        filename  = ", filename: \"#{attachment.filename}\""  if multiple
        as        = ', as: image'                             if attachment.image?
        "{{ cms:page_file_link #{fragment_id}#{filename}#{as} }}"
      end

      # @param [Comfy::Cms::File] file
      # @return [String] {{ cms:file_link #{file.id}, ... }}
      def cms_file_link_tag(file)
        if file.attachment.image?
          "{{ cms:image #{file.label} }}"
        else
          "{{ cms:file_link #{file.id} }}"
        end
      end
    end
  end
end
</file>

<file path="app/models/comfy/cms/layout.rb">
# frozen_string_literal: true

class Comfy::Cms::Layout < ActiveRecord::Base
  self.table_name = 'comfy_cms_layouts'

  require_relative '../../../../lib/comfortable_media_surfer/extensions/acts_as_tree'

  cms_acts_as_tree
  cms_has_revisions_for :content, :css, :js

  # -- Relationships --------------------------------------------------------
  belongs_to :site
  has_many :pages, dependent: :nullify

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assign_label
  before_create :assign_position
  after_save    :clear_page_content_cache
  after_destroy :clear_page_content_cache

  # -- Validations -------------------------------------------------------------
  validates :site_id,
            presence:   true
  validates :label,
            presence:   true
  validates :identifier,
            presence: true,
            uniqueness: { scope: :site_id },
            format: { with: %r{\A\w[a-z0-9_-]*\z}i }

  # -- Class Methods -----------------------------------------------------------
  # Tree-like structure for layouts
  def self.options_for_select(site, current_layout = nil)
    options = []

    options_for_layout = ->(layout, depth = 0) do
      return if layout == current_layout

      options << ["#{'. . ' * depth}#{layout.label}", layout.id]

      layout.children.order(:position).each do |child_layout|
        options_for_layout.call(child_layout, depth + 1)
      end
    end

    site.layouts.roots.order(:position).each do |layout|
      options_for_layout.call(layout)
    end

    options
  end

  # List of available application layouts
  def self.app_layouts_for_select(view_paths)
    view_paths.map(&:to_s).select { |path| path.start_with?(Rails.root.to_s) }.flat_map do |full_path|
      Dir.glob("#{full_path}/layouts/**/*.html.*").collect do |filename|
        filename.gsub!("#{full_path}/layouts/", '')
        filename.split('/').last[0...1] == '_' ? nil : filename.split('.').first
      end.compact.sort
    end.compact.uniq.sort
  end

  # -- Instance Methods --------------------------------------------------------
  # Tokenized layout content that also pulls in parent layout (if there's one)
  # and merges on the {{cms:tag_type content}} tag (if parent layout has that).
  # Returns a list of tokens that can be fed into the renderer.
  def content_tokens
    renderer  = ComfortableMediaSurfer::Content::Renderer.new(nil)
    tokens    = renderer.tokenize(content)

    if parent
      fragment_tags = ComfortableMediaSurfer::Content::Tags::Fragment.subclasses.map do |c|
        ComfortableMediaSurfer::Content::Renderer.tags.key(c)
      end

      parent_tokens = parent.content_tokens
      replacement_position = parent_tokens.index do |n|
        n.is_a?(Hash) &&
          fragment_tags.member?(n[:tag_class]) &&
          n[:tag_params].split(%r{\s}).first == 'content'
      end

      if replacement_position
        parent_tokens[replacement_position] = tokens
        tokens = parent_tokens.flatten
      end
    end

    tokens
  end

  def cache_buster
    updated_at.to_i
  end

  # Forcing page content reload
  def clear_page_content_cache
    Comfy::Cms::Page.where(id: pages.pluck(:id)).update_all(content_cache: nil)
    children.each(&:clear_page_content_cache)
  end

protected

  def assign_label
    self.label = label.blank? ? identifier.try(:titleize) : label
  end

  def assign_position
    return if position.to_i.positive?

    max = site.layouts.where(parent_id: parent_id).maximum(:position)
    self.position = max ? max + 1 : 0
  end
end
</file>

<file path="config/environments/development.rb">
# frozen_string_literal: true

require 'active_support/core_ext/integer/time'

defined?(ComfortableMediaSurfer::Application) && ComfortableMediaSurfer::Application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join('tmp/caching-dev.txt').exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = { 'cache-control' => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  if Gem::Version.new(Rails.version) >= Gem::Version.new('7.1.0')
    # Raise error when a before_action's only/except options reference missing actions
    config.action_controller.raise_on_missing_callback_actions = true
  end

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
end
</file>

<file path="gemfiles/7.1.gemfile">
# frozen_string_literal: true

source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

gemspec path: '../'

gem 'rails', '~> 7.1.0', '>= 7.1.5.1'

group :development, :test do
  gem 'autoprefixer-rails', '~> 10.4.16.0'
  gem 'byebug',             '~> 11.1.0', platforms: %i[mri mingw x64_mingw]
  gem 'image_processing',   '>= 1.12.0'
  gem 'propshaft',          '~> 1.1.0'
  gem 'sqlite3',            '>= 2.1'
end

group :test do
  gem 'brakeman',                 '~> 6.1.2'
  gem 'bundler-audit',            '~> 0.9.1'
  gem 'coveralls_reborn',         '~> 0.28.0', require: false
  gem 'cuprite',                  '>= 0.15'
  gem 'equivalent-xml',           '~> 0.6.0'
  gem 'minitest',                 '>= 5.23.0'
  gem 'minitest-reporters',       '>= 1.6.1'
  gem 'mocha',                    '>= 2.3.0', require: false
  gem 'rails-controller-testing', '~> 1.0.5'
  gem 'rubocop',                  '~> 1.63.0', require: false
  gem 'rubocop-minitest'
  gem 'rubocop-rails'
  gem 'simplecov', '~> 0.22.0', require: false
end
</file>

<file path="gemfiles/7.2.gemfile">
# frozen_string_literal: true

source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

gemspec path: '../'

gem 'rails', '~> 7.2.0', '>= 7.2.2.1'

group :development, :test do
  gem 'autoprefixer-rails', '~> 10.4.16.0'
  gem 'byebug',             '~> 11.1.0', platforms: %i[mri mingw x64_mingw]
  gem 'image_processing',   '>= 1.12.0'
  gem 'propshaft',          '~> 1.1.0'
  gem 'sqlite3',            '>= 2.1'
end

group :test do
  gem 'brakeman',                 '~> 6.1.2'
  gem 'bundler-audit',            '~> 0.9.1'
  gem 'coveralls_reborn',         '~> 0.28.0', require: false
  gem 'cuprite',                  '>= 0.15'
  gem 'equivalent-xml',           '~> 0.6.0'
  gem 'minitest',                 '>= 5.23.0'
  gem 'minitest-reporters',       '>= 1.6.1'
  gem 'mocha',                    '>= 2.3.0', require: false
  gem 'rails-controller-testing', '~> 1.0.5'
  gem 'rubocop',                  '~> 1.63.0', require: false
  gem 'rubocop-minitest'
  gem 'rubocop-rails'
  gem 'simplecov', '~> 0.22.0', require: false
end
</file>

<file path="lib/generators/comfy/scaffold/scaffold_generator.rb">
# frozen_string_literal: true

require 'rails/generators/generated_attribute'
require 'rails/generators/active_record'

module Comfy
  module Generators
    class ScaffoldGenerator < Rails::Generators::NamedBase
      include Rails::Generators::Migration

      no_tasks do
        attr_accessor :model_attrs
      end

      source_root File.expand_path(File.join(File.dirname(__FILE__), 'templates'))

      argument :model_args, type: :array, default: [], banner: 'attribute:type'

      def initialize(*args, &)
        super
        @model_attrs = []
        model_args.each do |arg|
          next unless arg.include?(':')

          @model_attrs << Rails::Generators::GeneratedAttribute.new(*arg.split(':'))
        end
      end

      def self.next_migration_number(dirname)
        ActiveRecord::Generators::Base.next_migration_number(dirname)
      end

      def generate_model
        migration_template 'migration.rb', "db/migrate/create_#{file_name.pluralize}.rb"
        template 'model.rb', "app/models/#{file_name}.rb"
        template 'tests/model.rb', "test/models/#{file_name}_test.rb"
        template 'tests/fixture.yml', "test/fixtures/#{file_name.pluralize}.yml"
      end

      def generate_controller
        template 'controller.rb', "app/controllers/admin/#{file_name.pluralize}_controller.rb"
        template 'tests/controller.rb', "test/controllers/admin/#{file_name.pluralize}_controller_test.rb"
      end

      def generate_views
        template 'views/index.haml', "app/views/admin/#{file_name.pluralize}/index.html.haml"
        template 'views/show.haml', "app/views/admin/#{file_name.pluralize}/show.html.haml"
        template 'views/new.haml', "app/views/admin/#{file_name.pluralize}/new.html.haml"
        template 'views/edit.haml', "app/views/admin/#{file_name.pluralize}/edit.html.haml"
        template 'views/_form.haml', "app/views/admin/#{file_name.pluralize}/_form.html.haml"
      end

      def generate_route
        route_string = <<~TEXT
          namespace :admin do
            resources :#{file_name.pluralize}
          end

        TEXT
        route route_string
      end

      def generate_navigation_link
        partial_path = 'app/views/comfy/admin/cms/partials/_navigation_inner.html.haml'

        unless File.exist?(File.join(destination_root, partial_path))
          create_file partial_path
        end

        append_file partial_path do
          <<~HAML
            %li.nav-item
              = active_link_to '#{class_name.pluralize}', admin_#{file_name.pluralize}_path, class: 'nav-link'
          HAML
        end
      end
    end
  end
end
</file>

<file path="lib/tasks/cms_seeds.rake">
# frozen_string_literal: true

namespace :comfy do
  namespace :cms_seeds do
    desc 'Import CMS Seed data into database (from: folder name, to: site identifier, classes: class name[s])'

    task :import, %i[from to classes] => [:environment] do |_t, args|
      from  = args[:from]
      to    = args[:to] || from
      classes = args[:classes].nil? ? nil : args[:classes].split

      puts "Importing CMS Seed data from Folder [#{from}] to Site [#{to}] ..."

      # changing so that logger is going straight to screen
      logger = ComfortableMediaSurfer.logger
      ComfortableMediaSurfer.logger = Logger.new($stdout)

      ComfortableMediaSurfer::Seeds::Importer.new(from, to).import!(classes)

      ComfortableMediaSurfer.logger = logger
    end

    desc 'Export database data into CMS Seed files (from: site identifier, to: folder name, classes: class name[s])'
    task :export, %i[from to classes] => [:environment] do |_t, args|
      from  = args[:from]
      to    = args[:to] || from
      classes = args[:classes].nil? ? nil : args[:classes].split

      puts "Exporting CMS data from Site [#{from}] to Folder [#{to}] ..."

      # changing so that logger is going straight to screen
      logger = ComfortableMediaSurfer.logger
      ComfortableMediaSurfer.logger = Logger.new($stdout)

      ComfortableMediaSurfer::Seeds::Exporter.new(from, to).export!(classes)

      ComfortableMediaSurfer.logger = logger
    end
  end
end
</file>

<file path="test/controllers/comfy/admin/cms/files_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../../test_helper'

class Comfy::Admin::Cms::FilesControllerTest < ActionDispatch::IntegrationTest
  def setup
    @site = comfy_cms_sites(:default)
    @file = comfy_cms_files(:default)
  end

  def test_get_index
    file_count = @site.files.count
    @site.files.create!(
      label: 'other',
      file: fixture_file_upload('image.jpg', 'image/jpeg')
    )
    r :get, comfy_admin_cms_site_files_path(site_id: @site)
    assert_response :success
    assert_template :index
    assert_equal file_count + 1, @site.files.count
  end

  def test_get_index_with_category
    category = comfy_cms_categories(:default)
    r :get, comfy_admin_cms_site_files_path(site_id: @site), params: {
      categories: category.label
    }
    assert_response :success
    assert_template :index
  end

  def test_get_index_with_category_invalid
    r :get, comfy_admin_cms_site_files_path(site_id: @site), params: {
      categories: 'invalid'
    }
    assert_response :success
    assert_template :index
  end

  def test_get_index_with_redactor_images
    r :get, comfy_admin_cms_site_files_path(site_id: @site), params: {
      source: 'redactor', type: 'image'
    }
    assert_response :success
    assert_equal [{
      'thumb' => url_for(@file.attachment.variant(Comfy::Cms::File::VARIANT_SIZE[:redactor])),
      'image' => url_for(@file.attachment),
      'title' => @file.label
    }], JSON.parse(response.body)
  end

  def test_get_index_with_redactor_files
    r :get, comfy_admin_cms_site_files_path(site_id: @site), params: {
      source: 'redactor', type: 'file'
    }
    assert_response :success
    assert_equal [{
      'title' => @file.label,
      'name' => @file.attachment.filename.to_s,
      'link' => url_for(@file.attachment),
      'size' => '12.1 KB'
    }], JSON.parse(response.body)
  end

  def test_get_index_with_svg_file
    file_count = @site.files.count
    @site.files.create(
      file: fixture_file_upload('image.svg', 'image/svg+xml')
    )
    r :get, comfy_admin_cms_site_files_path(site_id: @site)
    assert_response :success
    assert_template :index
    assert_equal file_count + 1, @site.files.count
  end

  def test_get_new
    r :get, new_comfy_admin_cms_site_file_path(site_id: @site)
    assert_response :success
    assert assigns(:file)
    assert_template :new
    assert_select "form[action='/admin/sites/#{@site.id}/files'][enctype='multipart/form-data']"
  end

  def test_get_edit
    r :get, edit_comfy_admin_cms_site_file_path(site_id: @site, id: @file)
    assert_response :success
    assert assigns(:file)
    assert_template :edit
    assert_select "form[action='/admin/sites/#{@site.id}/files/#{@file.id}']"
  end

  def test_get_edit_failure
    r :get, edit_comfy_admin_cms_site_file_path(site_id: @site, id: 'invalid')
    assert_response :redirect
    assert_redirected_to action: :index
    assert_equal 'File not found', flash[:danger]
  end

  def test_create
    file_count            = -> { Comfy::Cms::File.count }
    categorization_count  = -> { Comfy::Cms::Categorization.count }
    attachment_count      = -> { ActiveStorage::Attachment.count }

    assert_difference [file_count, categorization_count, attachment_count] do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: { file: {
        label: 'Test File',
        description: 'Test Description',
        file: fixture_file_upload('image.jpg', 'image/jpeg'),
        category_ids: [comfy_cms_categories(:default).id]
      } }
      assert_response :redirect
      file = Comfy::Cms::File.last
      assert_equal comfy_cms_sites(:default), file.site
      assert_equal 'Test File', file.label
      assert_equal 'Test Description', file.description
      assert_redirected_to action: :edit, id: file
      assert_equal 'Files uploaded', flash[:success]
    end
  end

  def test_create_failure
    assert_no_difference -> { Comfy::Cms::File.count } do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: { file: {} }
      assert_response :success
      assert_template :new
      assert_equal 'Failed to upload files', flash[:danger]
    end
  end

  def test_create_as_plupload
    file_count        = -> { Comfy::Cms::File.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference [file_count, attachment_count] do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: {
        source: 'plupload',
        file: {
          file: fixture_file_upload('image.jpg', 'image/jpeg')
        }
      }
      assert_response :success
      assert_no_select 'body'
      assert_select "li[data-id='#{Comfy::Cms::File.last.id}']"
    end
  end

  def test_create_as_plupload_failure
    assert_no_difference -> { Comfy::Cms::File.count } do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: {
        source: 'plupload',
        file: {}
      }
      assert_response :unprocessable_entity
    end
  end

  def test_create_as_redactor
    file_count            = -> { Comfy::Cms::File.count }
    categorization_count  = -> { Comfy::Cms::Categorization.count }
    attachment_count      = -> { ActiveStorage::Attachment.count }

    assert_difference [file_count, categorization_count, attachment_count] do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: {
        source: 'redactor',
        file: fixture_file_upload('image.jpg', 'image/jpeg')
      }
      assert_response :success

      file = Comfy::Cms::File.last
      assert_equal ({
        'filelink' => url_for(file.attachment),
        'filename' => file.attachment.filename
      }), JSON.parse(response.body)

      category = Comfy::Cms::Category.last
      assert_equal 'wysiwyg', category.label
      assert_equal [category], file.categories
    end
  end

  def test_create_as_redactor_failure
    assert_no_difference -> { Comfy::Cms::File.count } do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: {
        source: 'redactor',
        file: {}
      }
      assert_response :unprocessable_entity
    end
  end

  def test_create_as_plupload_with_selected_category
    category = comfy_cms_categories(:default)

    file_count        = -> { Comfy::Cms::File.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference [file_count, attachment_count] do
      r :post, comfy_admin_cms_site_files_path(site_id: @site), params: {
        categories: [category.label],
        source: 'plupload',
        file: {
          file: fixture_file_upload('image.jpg', 'image/jpeg')
        }
      }
      assert_response :success

      file = Comfy::Cms::File.last
      assert_equal [category], file.categories
    end
  end

  def test_update
    r :put, comfy_admin_cms_site_file_path(site_id: @site, id: @file), params: { file: {
      label: 'Updated File',
      description: 'Updated Description',
      file: fixture_file_upload('image.jpg', 'image/jpeg')
    } }
    assert_response :redirect
    assert_redirected_to action: :edit, site_id: @site, id: @file
    assert_equal 'File updated', flash[:success]
    @file.reload
    assert_equal 'Updated File', @file.label
    assert_equal 'Updated Description', @file.description
    assert_equal 'image.jpg', @file.attachment.filename.to_s
  end

  def test_update_failure
    r :put, comfy_admin_cms_site_file_path(site_id: @site, id: @file), params: { file: {
      label: ''
    } }
    assert_response :success
    assert_template :edit
    assert assigns(:file)
    assert_equal 'Failed to update file', flash[:danger]
  end

  def test_destroy
    file_count        = -> { Comfy::Cms::File.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference([file_count, attachment_count], -1) do
      r :delete, comfy_admin_cms_site_file_path(site_id: @site, id: @file)
      assert_response :redirect
      assert_redirected_to action: :index
      assert_equal 'File deleted', flash[:success]
    end
  end

  def test_destroy_as_xhr
    assert_difference(-> { Comfy::Cms::File.count }, -1) do
      r :delete, comfy_admin_cms_site_file_path(site_id: @site, id: @file), xhr: true
      assert_response :success
    end
  end

  def test_reorder
    file_one = @file
    file_two = @site.files.create(
      file: fixture_file_upload('image.jpg', 'image/jpeg')
    )
    assert_equal 0, file_one.position
    assert_equal 1, file_two.position

    r :put, reorder_comfy_admin_cms_site_files_path(site_id: @site), params: {
      order: [file_two.id, file_one.id]
    }
    assert_response :success
    file_one.reload
    file_two.reload

    assert_equal 1, file_one.position
    assert_equal 0, file_two.position
  end
end
</file>

<file path="test/lib/content/tags/file_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class ContentTagsFileTest < ActiveSupport::TestCase
  delegate  :rails_blob_path,
            :rails_representation_path,
            to: 'Rails.application.routes.url_helpers'

  setup do
    @page = comfy_cms_pages(:default)
  end

  # -- Tests -------------------------------------------------------------------

  def test_init
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: ['test'])
    assert_equal 'test',  tag.identifier
    assert_equal 'url',   tag.as
  end

  def test_init_with_params
    tag = ComfortableMediaSurfer::Content::Tags::File.new(
      context: @page,
      params: ['test', {
        'as' => 'image',
        'resize' => '100x100',
        'gravity' => 'center',
        'crop' => '100x100+0+0'
      }]
    )
    assert_equal 'test',  tag.identifier
    assert_equal 'image', tag.as
    assert_equal ({
      'resize' => '100x100',
      'gravity' => 'center',
      'crop' => '100x100+0+0'
    }), tag.variant_attrs
  end

  def test_content
    frag = comfy_cms_fragments(:file)
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: [frag.identifier])
    assert_equal rails_blob_path(frag.attachments.first, only_path: true), tag.content
  end

  def test_content_as_link
    frag = comfy_cms_fragments(:file)
    tag = ComfortableMediaSurfer::Content::Tags::File.new(
      context: @page,
      params: [frag.identifier, { 'as' => 'link', 'class' => 'html-class' }]
    )

    path  = rails_blob_path(frag.attachments.first, only_path: true)
    out   = "<a href='#{path}' class='html-class' target='_blank'>fragment.jpeg</a>"
    assert_equal out, tag.content
  end

  def test_content_as_image
    frag = comfy_cms_fragments(:file)
    tag = ComfortableMediaSurfer::Content::Tags::File.new(
      context: @page,
      params: [frag.identifier, { 'as' => 'image', 'class' => 'html-class' }]
    )
    path  = rails_blob_path(frag.attachments.first, only_path: true)
    out   = "<img src='#{path}' class='html-class' alt='fragment.jpeg' title='fragment.jpeg'/>"
    assert_equal out, tag.content
  end

  def test_content_as_image_with_variant
    frag = comfy_cms_fragments(:file)
    tag = ComfortableMediaSurfer::Content::Tags::File.new(
      context: @page,
      params: [frag.identifier, { 'as' => 'image', 'resize' => '50x50' }]
    )
    variant = frag.attachments.first.variant({ 'resize' => '50x50' })
    path    = rails_representation_path(variant, only_path: true)
    out     = "<img src='#{path}' alt='fragment.jpeg' title='fragment.jpeg'/>"
    assert_equal out, tag.content
  end

  def test_content_with_no_attachment
    tag = ComfortableMediaSurfer::Content::Tags::File.new(context: @page, params: ['test'])
    assert_equal '', tag.content
  end
end
</file>

<file path="test/lib/seeds/pages_test.rb">
# frozen_string_literal: true

require_relative '../../test_helper'

class SeedsPagesTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
  end

  def test_creation
    Comfy::Cms::Page.delete_all

    assert_difference -> { Comfy::Cms::Page.count }, 3 do
      assert_difference -> { Comfy::Cms::Translation.count }, 2 do
        ComfortableMediaSurfer::Seeds::Page::Importer.new('sample-site', 'default-site').import!
      end
    end

    assert page = Comfy::Cms::Page.find_by(full_path: '/')

    assert_equal @layout, page.layout
    assert_equal 'index', page.slug

    assert_equal 'Home Seed Page', page.label
    assert_equal 69, page.position
    assert page.is_published?

    assert_equal 5, page.fragments.count
    assert_equal [
      { identifier: 'header',
        tag: 'file',
        content: nil,
        datetime: nil,
        boolean: false },
      { identifier: 'published_on',
        tag: 'date',
        content: nil,
        datetime: Date.parse('2015-10-31'),
        boolean: false },
      { identifier: 'content',
        tag: 'wysiwyg',
        content: "Home Page Seed Contént\n{{ cms:snippet default }}\n\n",
        datetime: nil,
        boolean: false },
      { identifier: 'published',
        tag: 'checkbox',
        content: nil,
        datetime: nil,
        boolean: true },
      { identifier: 'attachments',
        tag: 'files',
        content: nil,
        datetime: nil,
        boolean: false }
    ], page.fragments_attributes

    frag = page.fragments.find_by(identifier: 'header')
    assert_equal 1, frag.attachments.count

    frag = page.fragments.find_by(identifier: 'attachments')
    assert_equal 3, frag.attachments.count

    assert_equal 2, page.categories.count
    assert_equal %w[category_a category_b], page.categories.map(&:label)

    assert child_page_a = Comfy::Cms::Page.find_by(full_path: '/child_a')
    assert_equal page, child_page_a.parent

    assert child_page_b = Comfy::Cms::Page.find_by(full_path: '/child_b')
    assert_equal page, child_page_b.parent

    assert_equal child_page_b, child_page_a.target_page

    assert_equal 2, page.translations.count
    translation = page.translations.where(locale: 'fr').first

    assert_equal 'Bienvenue', translation.label
    assert_equal [
      { identifier: 'content',
        tag: 'wysiwyg',
        content: "French Home Page Seed Content\n",
        datetime: nil,
        boolean: false }
    ], translation.fragments_attributes
  end

  def test_update
    @page.update_column(:updated_at, 10.years.ago)
    assert_equal 'Default Page', @page.label

    child = comfy_cms_pages(:child)
    child.update_column(:slug, 'old')

    assert_difference -> { Comfy::Cms::Page.count } do
      ComfortableMediaSurfer::Seeds::Page::Importer.new('sample-site', 'default-site').import!

      @page.reload
      assert_equal 'Home Seed Page', @page.label

      assert_nil Comfy::Cms::Page.where(slug: 'old').first
    end
  end

  def test_update_ignore
    Comfy::Cms::Page.destroy_all

    page = @site.pages.create!(
      label: 'Test',
      layout: comfy_cms_layouts(:default),
      fragments_attributes: [
        { identifier: 'content', content: 'test content' }
      ]
    )

    page_path         = File.join(ComfortableMediaSurfer.config.seeds_path, 'sample-site', 'pages', 'index')
    content_path      = File.join(page_path, 'content.html')

    assert page.updated_at >= File.mtime(content_path)

    ComfortableMediaSurfer::Seeds::Page::Importer.new('sample-site', 'default-site').import!
    page.reload

    assert_nil page.slug
    assert_equal 'Test', page.label
    frag = page.fragments.where(identifier: 'content').first
    assert_equal 'test content', frag.content
  end

  def test_update_removing_deleted_blocks
    Comfy::Cms::Page.destroy_all

    page = @site.pages.create!(
      label: 'Test',
      layout: comfy_cms_layouts(:default),
      fragments_attributes: [
        { identifier: 'to_delete', content: 'test content' }
      ]
    )
    page.update_column(:updated_at, 10.years.ago)

    ComfortableMediaSurfer::Seeds::Page::Importer.new('sample-site', 'default-site').import!
    page.reload

    frag = page.fragments.where(identifier: 'content').first
    assert_equal "Home Page Seed Contént\n{{ cms:snippet default }}\n\n", frag.content

    refute page.fragments.where(identifier: 'to_delete').first
  end

  def test_export
    ActiveStorage::Blob.any_instance.stubs(:download).returns(
      file_fixture('image.jpg').read
    )

    comfy_cms_pages(:default).update_attribute(:target_page, comfy_cms_pages(:child))
    comfy_cms_categories(:default).categorizations.create!(
      categorized: comfy_cms_pages(:default)
    )

    comfy_cms_translations(:default).update!(fragments_attributes: [
      {
        identifier: 'content',
        content: 'translation content',
        tag: 'markdown'
      }
    ])

    host_path = File.join(ComfortableMediaSurfer.config.seeds_path, 'test-site')
    page_1_content_path     = File.join(host_path, 'pages/index/content.html')
    page_1_attachment_path  = File.join(host_path, 'pages/index/fragment.jpeg')
    page_2_content_path     = File.join(host_path, 'pages/index/child-page/content.html')
    translation_path        = File.join(host_path, 'pages/index/content.fr.html')

    ComfortableMediaSurfer::Seeds::Page::Exporter.new('default-site', 'test-site').export!

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Default Page
      layout: default
      target_page: "/child-page"
      categories:
      - Default
      is_published: true
      position: 0
      [checkbox boolean]
      true
      [file file]
      fragment.jpeg
      [datetime datetime]
      1981-10-04 12:34:56 UTC
      [text content]
      content
    TEXT
    assert_equal out, File.read(page_1_content_path)

    assert File.exist?(page_1_attachment_path)

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Child Page
      layout: default
      target_page:
      categories: []
      is_published: true
      position: 0

    TEXT
    # macos gives '' (null) for target_page: but linux ' ' (space) !
    file_read = File.read(page_2_content_path).gsub('target_page: ', 'target_page:')
    assert_equal out, file_read

    out = <<~TEXT.chomp
      [attributes]
      ---
      label: Default Translation
      layout: default
      is_published: true
      [markdown content]
      translation content
    TEXT
    assert_equal out, File.read(translation_path)
  ensure
    FileUtils.rm_rf(host_path)
  end
end
</file>

<file path="test/lib/configuration_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class ConfigurationTest < ActiveSupport::TestCase
  def test_configuration_presence
    assert config = ComfortableMediaSurfer.configuration
    assert_equal 'ComfortableMediaSurfer CMS Engine', config.cms_title
    assert_equal 'ApplicationController', config.admin_base_controller
    assert_equal 'ApplicationController', config.public_base_controller
    assert_equal 'ComfortableMediaSurfer::AccessControl::AdminAuthentication',  config.admin_auth
    assert_equal 'ComfortableMediaSurfer::AccessControl::AdminAuthorization',   config.admin_authorization
    assert_equal 'ComfortableMediaSurfer::AccessControl::PublicAuthentication', config.public_auth
    assert_equal '', config.admin_route_redirect
    assert_equal false, config.enable_seeds
    assert_equal File.expand_path('db/cms_seeds', Rails.root), config.seeds_path
    assert_equal 25, config.revisions_limit
    %w[en es].each { |k| assert_includes config.locales.keys, k }
    assert_nil config.admin_locale
    assert_nil config.admin_cache_sweeper
    assert_equal false, config.allow_erb
    assert_nil config.allowed_helpers
    assert_nil config.allowed_partials
    assert_nil config.allowed_templates
    assert_nil config.hostname_aliases
    assert_equal ({ methods: [:content], except: [:content_cache] }), config.page_to_json_options
  end

  def test_initialization_overrides
    ComfortableMediaSurfer.configuration.cms_title = 'New Title'
    assert_equal 'New Title', ComfortableMediaSurfer.configuration.cms_title
  end

  def test_version
    assert ComfortableMediaSurfer::VERSION
  end
end
</file>

<file path=".gitignore">
.bundle
db/*.sqlite3*
log/*
tmp/**/*
.DS_Store
db/schema.rb
db/development_structure.sql
db/test.sqlite3-journal
pkg
rdoc
/tmp
public/system/
Gemfile.lock
.rvmrc
.ruby-version
.ruby-gemset
/.sass-cache
coverage/
/storage
db/cms_fixtures/test-site/
.idea

/node_modules
/app/assets/builds/*
!/app/assets/builds/.keep
</file>

<file path="package.json">
{
  "name": "comfortable-media-surfer",
  "private": true,
  "scripts": {
    "build": "esbuild app/assets/javascripts/comfy/admin/cms/application.js --bundle --sourcemap --outdir=app/assets/builds/comfy/admin/cms --public-path=/assets",
    "build:css": "sass --load-path=./app/assets/stylesheets ./app/assets/stylesheets/comfy/admin/cms/application.sass:./app/assets/builds/comfy/admin/cms/application.css --no-source-map --load-path=node_modules"
  },
  "dependencies": {
    "@rails/ujs": "^7.1.3-4",
    "bootstrap": "4.3.1",
    "codemirror": "^5.65.18",
    "esbuild": "^0.24.0",
    "flatpickr": "^4.6.13",
    "jquery": "3.7.1",
    "plupload": "^2.3.9",
    "popper.js": "^1.16.1",
    "sass": "^1.83.0",
    "sortablejs": "^1.15.6"
  },
  "engines": {
    "node": ">= 18.0.0"
  }
}
</file>

<file path="app/assets/config/manifest.js">
//= link_tree ../builds
</file>

<file path="test/controllers/comfy/cms/content_controller_test.rb">
# frozen_string_literal: true

require_relative '../../../test_helper'

class Comfy::Cms::ContentControllerTest < ActionDispatch::IntegrationTest
  setup do
    @site         = comfy_cms_sites(:default)
    @layout       = comfy_cms_layouts(:default)
    @page         = comfy_cms_pages(:default)
    @translation  = comfy_cms_translations(:default)
  end

  def test_show
    get comfy_cms_render_page_path(cms_path: '')
    assert_equal @site,   assigns(:cms_site)
    assert_equal @layout, assigns(:cms_layout)
    assert_equal @page,   assigns(:cms_page)

    assert_response :success
    assert_equal 'content', response.body
    assert_equal 'text/html; charset=utf-8', response.content_type

    assert_equal :en, I18n.locale
  end

  def test_show_default_html
    get comfy_cms_render_page_path(cms_path: ''), headers: { 'Accept' => '*/*' }
    assert_response :success
    assert_equal 'text/html; charset=utf-8', response.content_type
  end

  def test_show_as_json
    get comfy_cms_render_page_path(cms_path: ''), as: :json
    assert_response :success
    assert_equal 'application/json; charset=utf-8', response.content_type

    json_response = JSON.parse(response.body)
    assert_equal @page.id,        json_response['id']
    assert_equal @page.site.id,   json_response['site_id']
    assert_equal @page.layout.id, json_response['layout_id']
    assert_nil                    json_response['parent_id']
    assert_nil                    json_response['target_page_id']
    assert_equal 'Default Page',  json_response['label']
    assert_nil                    json_response['slug']
    assert_equal '/',             json_response['full_path']
    assert_equal 'content',       json_response['content']
    assert_equal 0,               json_response['position']
    assert_equal 1,               json_response['children_count']
    assert_equal true,            json_response['is_published']
  end

  def test_show_as_json_with_options
    ComfortableMediaSurfer.config.page_to_json_options = {
      include: { fragments: { only: :identifier } },
      except: [:position]
    }

    get comfy_cms_render_page_path(cms_path: ''), as: :json
    assert_response :success
    assert_equal 'application/json; charset=utf-8', response.content_type
    json_response = JSON.parse(response.body)

    # assert_nil json_response["position"]
    assert_equal [
      { 'identifier' => 'boolean' },
      { 'identifier' => 'file' },
      { 'identifier' => 'datetime' },
      { 'identifier' => 'content' }
    ], json_response['fragments']
  end

  def test_show_as_json_with_translation
    ComfortableMediaSurfer.config.page_to_json_options = {
      methods: [:content],
      include: { fragments: { only: :content } }
    }

    I18n.locale = :fr

    get comfy_cms_render_page_path(cms_path: ''), as: :json
    assert_response :success
    assert_equal 'application/json; charset=utf-8', response.content_type
    json_response = JSON.parse(response.body)

    assert_equal 'Translation Content', json_response['content']
    assert({ 'content' => 'translated content' }.in?(json_response['fragments']))
  end

  def test_show_as_json_with_erb
    @page.update(fragments_attributes: [
      { identifier: 'content', content: '{{ cms:helper pluralize, 2, monkey }}' }
    ])
    get comfy_cms_render_page_path(cms_path: ''), as: :json
    assert_response :success

    json_response = JSON.parse(response.body)
    assert_equal '2 monkeys', json_response['content']
  end

  def test_show_with_custom_mimetype
    layout = @site.layouts.create!(
      label: 'RSS Layout',
      identifier: 'rss-layout',
      content: '{{cms:text mime_type, render: false}}{{cms:textarea content}}'
    )
    @site.pages.create!(
      label: 'rss',
      slug: 'rss',
      parent_id: comfy_cms_pages(:default).id,
      layout_id: layout.id,
      is_published: true,
      fragments_attributes: [
        { identifier: 'content',
          content: 'content' },
        { identifier: 'mime_type',
          content: 'application/rss+xml; charset=utf-8' }
      ]
    )
    get comfy_cms_render_page_path(cms_path: 'rss')
    assert_response :success
    assert_equal 'application/rss+xml; charset=utf-8', response.content_type
  end

  def test_show_with_app_layout
    @layout.update_columns(app_layout: 'comfy/admin/cms')
    get comfy_cms_render_page_path(cms_path: '')
    assert_response :success
    assert assigns(:cms_page)
    assert_select 'body.c-comfy-cms-content.a-show'
  end

  def test_show_with_xhr
    @layout.update_columns(app_layout: 'cms_admin')
    get comfy_cms_render_page_path(cms_path: ''), xhr: true
    assert_response :success
    assert assigns(:cms_page)
    assert_no_select 'body.c-comfy-cms-content.a-show'
  end

  def test_show_not_found
    assert_raises ActionController::RoutingError, 'Page Not Found at: "doesnotexist"' do
      get comfy_cms_render_page_path(cms_path: 'doesnotexist')
    end
  end

  def test_show_not_found_with_custom404
    page = @site.pages.create!(
      label: '404',
      slug: '404',
      parent_id: @page.id,
      layout_id: @layout.id,
      is_published: '1',
      fragments_attributes: [
        { identifier: 'content',
          content: 'custom 404 page content' }
      ]
    )
    assert_equal '/404', page.full_path
    assert page.is_published?
    get comfy_cms_render_page_path(cms_path: 'doesnotexist')
    assert_response :not_found
    assert assigns(:cms_page)
    assert_match %r{custom 404 page content}, response.body
  end

  def test_show_with_no_site
    Comfy::Cms::Site.destroy_all

    assert_raises ActionController::RoutingError, 'Site Not Found' do
      get comfy_cms_render_page_path(cms_path: '')
    end
  end

  def test_show_with_no_layout
    Comfy::Cms::Layout.destroy_all

    get comfy_cms_render_page_path(cms_path: '')
    assert_response :ok
    assert_equal '', response.body
  end

  def test_show_with_redirect
    comfy_cms_pages(:child).update_columns(target_page_id: @page.id)
    assert_equal @page, comfy_cms_pages(:child).target_page
    get comfy_cms_render_page_path(cms_path: 'child-page')
    assert_response :redirect
    assert_redirected_to @page.full_path
  end

  def test_show_with_redirect_and_site_path
    @site.update_column(:path, 'test-site-path')
    comfy_cms_pages(:child).update_columns(target_page_id: @page.id)
    assert_equal @page, comfy_cms_pages(:child).target_page
    get comfy_cms_render_page_path(cms_path: '/test-site-path/child-page')
    assert_response :redirect
    assert_redirected_to "/test-site-path#{@page.full_path}"
  end

  def test_show_unpublished
    @page.update_columns(is_published: false)

    assert_raises ActionController::RoutingError, 'Page Not Found at: "unpublished"' do
      get comfy_cms_render_page_path(cms_path: 'unpublished')
    end
  end

  def test_show_with_erb_disabled
    assert_equal false, ComfortableMediaSurfer.config.allow_erb

    @site.pages.create!(
      label: 'erb',
      slug: 'erb',
      parent_id: @page.id,
      layout_id: @layout.id,
      is_published: '1',
      fragments_attributes: [
        { identifier: 'content',
          content: 'text <%= 2 + 2 %> text' }
      ]
    )
    get comfy_cms_render_page_path(cms_path: 'erb')
    assert_response :success
    assert_match 'text &lt;%= 2 + 2 %&gt; text', response.body
  end

  def test_show_with_irb_enabled
    ComfortableMediaSurfer.config.allow_erb = true

    @site.pages.create!(
      label: 'erb',
      slug: 'erb',
      parent_id: @page.id,
      layout_id: @layout.id,
      is_published: '1',
      fragments_attributes: [
        { identifier: 'content',
          content: 'text <%= 2 + 2 %> text' }
      ]
    )
    get comfy_cms_render_page_path(cms_path: 'erb')
    assert_response :success
    assert_match 'text 4 text', response.body
  end

  def test_show_with_translation
    @translation.update_column(:content_cache, 'translation content')
    I18n.locale = @translation.locale

    assert_no_difference -> { @page.fragments.count } do
      get comfy_cms_render_page_path(cms_path: '')
      assert_equal 'translation content', response.body
    end
  end

  def test_show_with_translation_not_found
    I18n.locale = :ja
    assert_raises ActionController::RoutingError, 'Page Not Found at: ""' do
      get comfy_cms_render_page_path(cms_path: '')
    end
  end

  def test_show_with_translation_unpublished
    @translation.update_column(:is_published, false)
    I18n.locale = @translation.locale

    assert_raises ActionController::RoutingError, 'Page Not Found at: ""' do
      get comfy_cms_render_page_path(cms_path: '')
    end
  end

  def test_with_translation_with_snippet
    translation = @page.translations.create!(
      locale: 'ja',
      label: 'Test Translation',
      fragments_attributes: [
        { identifier: 'content',
          tag: 'text',
          content: 'test {{cms:snippet default}} test' }
      ]
    )
    I18n.locale = translation.locale

    get comfy_cms_render_page_path(cms_path: '')
    assert_equal 'test ## snippet content test', response.body
  end
end
</file>

<file path="test/integration/render_cms_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class RenderCmsIntergrationTest < ActionDispatch::IntegrationTest
  def setup
    super
    Rails.application.routes.draw do
      get '/render-basic'           => 'render_test#render_basic'
      get '/render-page'            => 'render_test#render_page'
      get '/site-path/render-page'  => 'render_test#render_page'
      get '/render-layout'          => 'render_test#render_layout'
    end
    comfy_cms_layouts(:default).update_columns(content: '{{cms:text content}}')
    comfy_cms_pages(:child).update(fragments_attributes: [
      { identifier: 'content', content: 'TestBlockContent' }
    ])
  end

  def teardown
    Rails.application.reload_routes!
  end

  def create_site_b
    site = Comfy::Cms::Site.create!(
      identifier: 'site-b',
      hostname: 'site-b.test'
    )
    layout = site.layouts.create!(
      identifier: 'default',
      content: 'site-b {{cms:text content}}'
    )
    site.pages.create!(
      label: 'default',
      layout: layout,
      fragments_attributes: [{ identifier: 'content', content: 'SiteBContent' }]
    )
  end

  class ::RenderTestController < ApplicationController
    append_view_path(File.expand_path('../fixtures/views', File.dirname(__FILE__)))

    def render_basic
      case params[:type]
      when 'text'
        render plain: 'TestText'
      when 'update'
        render :update do |page|
          page.alert('rendered text')
        end
      else
        render
      end
    end

    def render_page
      case params[:type]
      when 'page_implicit'
        render
      when 'page_explicit'
        render cms_page: '/test-page'
      when 'page_explicit_with_status'
        render cms_page: '/test-page', status: 404
      when 'page_explicit_with_site'
        render cms_page: '/', cms_site: 'site-b'
      when 'page_explicit_with_blocks'
        render cms_page: '/test-page', cms_fragments: {
          content: 'custom page content'
        }
      else
        raise 'Invalid or no param[:type] provided'
      end
    end

    def render_layout
      @test_value = 'TestValue'
      case params[:type]
      when 'layout_defaults'
        render cms_layout: 'default'
      when 'layout'
        render cms_layout: 'default', cms_fragments: {
          content: 'TestText',
          content_b: { partial: 'render_test/test' },
          content_c: { template: 'render_test/render_layout' }
        }
      when 'layout_with_status'
        render cms_layout: 'default', status: 404
      when 'layout_invalid'
        render cms_layout: 'invalid'
      when 'layout_defaults_with_site'
        render cms_layout: 'default', cms_site: 'site-b'
      when 'layout_with_action'
        render cms_layout: 'default', action: :new
      else
        raise 'Invalid or no param[:type] provided'
      end
    end

    def new; end
  end

  # -- Basic Render Tests ------------------------------------------------------
  def test_text
    get '/render-basic?type=text'
    assert_response :success
    assert_equal 'TestText', response.body
  end

  def test_implicit_cms_page_failure
    Comfy::Cms::Site.destroy_all
    assert_raises ActionView::MissingTemplate do
      get '/render-basic'
    end
  end

  # -- Page Render Test --------------------------------------------------------
  def test_implicit_cms_page
    page = comfy_cms_pages(:child)
    page.update(slug: 'render-basic')
    get '/render-basic?type=page_implicit'
    assert_response :success
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert assigns(:cms_page)
    assert_equal page, assigns(:cms_page)
    assert_equal 'TestBlockContent', response.body
  end

  def test_implicit_cms_page_with_site_path
    comfy_cms_sites(:default).update_column(:path, 'site-path')
    comfy_cms_pages(:child).update(slug: 'render-page')
    get '/site-path/render-page?type=page_implicit'
    assert_response :success
    assert_equal 'TestBlockContent', response.body
  end

  def test_explicit_cms_page
    page = comfy_cms_pages(:child)
    page.update(slug: 'test-page')
    get '/render-page?type=page_explicit'
    assert_response :success
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert assigns(:cms_page)
    assert_equal page, assigns(:cms_page)
    assert_equal 'TestBlockContent', response.body
  end

  def test_explicit_cms_page_with_status
    page = comfy_cms_pages(:child)
    page.update(slug: 'test-page')
    get '/render-page?type=page_explicit_with_status'
    assert_response :not_found
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert assigns(:cms_page)
    assert_equal page, assigns(:cms_page)
    assert_equal 'TestBlockContent', response.body
  end

  def test_explicit_cms_page_failure
    page = comfy_cms_pages(:child)
    page.update(slug: 'invalid')
    assert_raises ComfortableMediaSurfer::MissingPage do
      get '/render-page?type=page_explicit'
    end
  end

  def test_explicit_with_site
    create_site_b
    get '/render-page?type=page_explicit_with_site'
    assert_response :success
    assert assigns(:cms_site)
    assert_equal 'site-b', assigns(:cms_site).identifier
    assert_equal 'site-b SiteBContent', response.body
  end

  def test_explicit_with_site_failure
    assert_raises ComfortableMediaSurfer::MissingSite do
      get '/render-page?type=page_explicit_with_site'
    end
  end

  def test_explicit_with_page_blocks
    page = comfy_cms_pages(:child)
    page.update(slug: 'test-page')
    get '/render-page?type=page_explicit_with_blocks'
    assert_response :success
    assert_equal 'custom page content', response.body
  end

  def test_explicit_with_translation
    I18n.locale = :fr

    page = comfy_cms_pages(:child)
    page.update(slug: 'test-page')

    # pointing translation to our page here
    translation = comfy_cms_translations(:default)
    translation.update_column(:page_id, page.id)

    get '/render-page?type=page_explicit'
    assert_equal 'translated content', response.body
  end

  # -- Layout Render Tests -----------------------------------------------------
  def test_cms_layout_defaults
    get '/render-layout?type=layout_defaults'
    assert_response :success
    assert_equal 'TestTemplate TestValue', response.body
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert_equal comfy_cms_layouts(:default), assigns(:cms_layout)
  end

  def test_cms_layout
    content = '{{cms:text content}} {{cms:text content_b}} {{cms:text content_c}}'
    comfy_cms_layouts(:default).update_columns(content: content)
    get '/render-layout?type=layout'
    assert_response :success
    assert_equal 'TestText TestPartial TestValue TestTemplate TestValue', response.body
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert_equal comfy_cms_layouts(:default), assigns(:cms_layout)
  end

  def test_cms_layout_with_status
    get '/render-layout?type=layout_with_status'
    assert_response 404
    assert_equal 'TestTemplate TestValue', response.body
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert_equal comfy_cms_layouts(:default), assigns(:cms_layout)
  end

  def test_cms_layout_with_action
    content = '{{cms:text content}} {{cms:text content_b}} {{cms:text content_c}}'
    comfy_cms_layouts(:default).update_columns(content: content)
    get '/render-layout?type=layout_with_action'
    assert_response :success
    assert_equal "Can render CMS layout and specify action\n  ", response.body
    assert assigns(:cms_site)
    assert assigns(:cms_layout)
    assert_equal comfy_cms_layouts(:default), assigns(:cms_layout)
  end

  def test_cms_layout_failure
    assert_raises ComfortableMediaSurfer::MissingLayout do
      get '/render-layout?type=layout_invalid'
    end
  end

  def test_cms_layout_defaults_with_site
    create_site_b
    get '/render-layout?type=layout_defaults_with_site'
    assert_response :success
    assert assigns(:cms_site)
    assert_equal 'site-b', assigns(:cms_site).identifier
    assert_equal 'site-b TestTemplate TestValue', response.body
  end

  def test_cms_layout_defaults_with_site_failure
    assert_raises ComfortableMediaSurfer::MissingSite do
      get '/render-layout?type=layout_defaults_with_site'
    end
  end
end
</file>

<file path="CONTRIBUTING.md">
# Contributing

Contribute your code to ComfortableMediaSurfer in 5 easy steps:

### 1. Fork it

Fork the project. Optionally, create a branch you want to work on.

### 2. Get it running locally

- Install NodeJS and yarn
- Install JS dependencies with `yarn`
- Install gem dependencies with `bundle install`
- There's nothing to configure, by default database is SQLite so it will be
  created for you. Just run `bundle exec rake db:migrate`
- Prepare the environment by running `yarn build`, `yarn build:css`, and
  `rake db:test:prepare`
- Make sure that existing tests are passing by running `bundle exec rake test`
- There are system tests that can be run with `bundle exec rake test:system`.
  You need to have `chromedriver` installed for that.
- You should be able to start the app via `bin/rails s` and navigate to http://localhost:3000/admin
  and log in with username 'user' and password 'pass'

### 3. Hack away

- Create a few small pull requests instead of a humoungous one. I can merge small stuff faster.
- When adding new code just make sure it follows the same style as the existing code.
- Avoid adding 3rd party dependencies if you can.
- Tests please, but nothing complicated. UnitTest / Fixtures all the way. Make sure all tests pass.
- Run `bundle exec rubocop` and fix any issues raised.

### 4. Make a pull request

- If you never done it before read this: https://help.github.com/articles/using-pull-requests
- When PR is submitted check if Github actions CI ran all tests successfully

### 5. Done!

If everything is good your changes will be merged into master branch. Eventually
a new version of gem will be published.
</file>

<file path=".github/workflows/rubyonrails.yml">
name: "Rails CI"
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_test_lint_audit:
    strategy:
      matrix:
        ruby-version:
          - "3.2"
          - "3.3"
          - "3.4"
        rails-version:
          - "7.1"
          - "7.2"
          - "8.0"
        continue-on-error: [true]
    name: ${{ format('Tests (Ruby {0}, Rails {1})', matrix.ruby-version, matrix.rails-version) }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.continue-on-error }}
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/${{ matrix.rails-version }}.gemfile
      RAILS_ENV: test
      SKIP_COV: true
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
      - run: npm ci

      - name: Install Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Update surfer gem
        run: bundle update comfortable_media_surfer

      - name: Compile assets
        run: bin/bundle exec rails comfy:compile_assets

      - name: Run tests
        run: |
          bin/bundle exec rails db:drop
          bin/bundle exec rails db:create
          bin/bundle exec rails db:migrate
          bin/bundle exec rails test:db

      - name: Lint the code
        run: bin/bundle exec rubocop --parallel

      - name: Audit for security
        run: |
          bin/bundle exec brakeman -q -w3
          bin/bundle exec bundler-audit --update --gemfile-lock gemfiles/${{ matrix.rails-version }}.gemfile.lock
</file>

<file path="lib/comfortable_media_surfer/seeds/page/importer.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer::Seeds::Page
  class Importer < ComfortableMediaSurfer::Seeds::Importer
    # tracking target page linking. Since we might be linking to something that
    # doesn't exist yet, we'll defer linking to the end of import
    attr_accessor :target_pages

    def initialize(from, to = from)
      super
      self.path = ::File.join(ComfortableMediaSurfer.config.seeds_path, from, 'pages/')
    end

    def import!
      import_page(File.join(path, 'index/'), nil)

      link_target_pages

      # Remove pages not found in seeds
      site.pages.where('id NOT IN (?)', seed_ids).destroy_all
    end

  private

    # Recursive function that will be called for each child page (subfolder)
    def import_page(path, parent)
      slug = path.split('/').last

      # setting page record
      page =
        if parent.present?
          child = site.pages.where(slug: slug).first_or_initialize
          child.parent = parent
          child
        else
          site.pages.root || site.pages.new(slug: slug)
        end

      content_path = File.join(path, 'content.html')

      # If file is newer than page record we'll process it
      if fresh_seed?(page, content_path)

        # reading file content in, resulting in a hash
        fragments_hash  = parse_file_content(content_path)

        # parsing attributes section
        attributes_yaml = fragments_hash.delete('attributes')
        attrs           = YAML.safe_load(attributes_yaml)

        # applying attributes
        layout = site.layouts.find_by(identifier: attrs.delete('layout')) || parent.try(:layout)
        category_ids    = category_names_to_ids(page, attrs.delete('categories'))
        target_page     = attrs.delete('target_page')

        page.attributes = attrs.merge(
          layout: layout,
          category_ids: category_ids
        )

        # applying fragments
        old_frag_identifiers = page.fragments.pluck(:identifier)

        new_frag_identifiers, fragments_attributes =
          construct_fragments_attributes(fragments_hash, page, path)
        page.fragments_attributes = fragments_attributes

        if page.save
          message = "[CMS SEEDS] Imported Page \t #{page.full_path}"
          ComfortableMediaSurfer.logger.info(message)

          # defering target page linking
          if target_page.present?
            self.target_pages ||= {}
            self.target_pages[page.id] = target_page
          end

          # cleaning up old fragments
          page.fragments.where(identifier: old_frag_identifiers - new_frag_identifiers).destroy_all

        else
          message = "[CMS SEEDS] Failed to import Page \n#{page.errors.inspect}"
          ComfortableMediaSurfer.logger.warn(message)
        end
      end

      import_translations(path, page)

      # Tracking what page from seeds we're working with. So we can remove pages
      # that are no longer in seeds
      seed_ids << page.id

      # importing child pages (if there are any)
      Dir["#{path}*/"].each do |page_path|
        import_page(page_path, page)
      end
    end

    # Importing translations for given page. They look like `content.locale.html`
    def import_translations(path, page)
      old_translations = page.translations.pluck(:locale)
      new_translations = []

      Dir["#{path}content.*.html"].each do |file_path|
        locale = File.basename(file_path).match(%r{content\.(\w+)\.html})[1]
        new_translations << locale

        translation = page.translations.where(locale: locale).first_or_initialize

        next unless fresh_seed?(translation, file_path)

        # reading file content in, resulting in a hash
        fragments_hash  = parse_file_content(file_path)

        # parsing attributes section
        attributes_yaml = fragments_hash.delete('attributes')
        attrs           = YAML.safe_load(attributes_yaml)

        # applying attributes
        layout = site.layouts.find_by(identifier: attrs.delete('layout')) || page.try(:layout)
        translation.attributes = attrs.merge(
          layout: layout
        )

        # applying fragments
        old_frag_identifiers = translation.fragments.pluck(:identifier)

        new_frag_identifiers, fragments_attributes =
          construct_fragments_attributes(fragments_hash, translation, path)
        translation.fragments_attributes = fragments_attributes

        if translation.save
          message = "[CMS SEEDS] Imported Translation \t #{locale}"
          ComfortableMediaSurfer.logger.info(message)

          # cleaning up old fragments
          frags_to_remove = old_frag_identifiers - new_frag_identifiers
          translation.fragments.where(identifier: frags_to_remove).destroy_all

        else
          message = "[CMS SEEDS] Failed to import Translation \n#{locale}"
          ComfortableMediaSurfer.logger.warn(message)
        end
      end

      # Cleaning up removed translations
      translations_to_remove = old_translations - new_translations
      page.translations.where(locale: translations_to_remove).destroy_all
    end

    # Constructing frag attributes hash that can be assigned to page or translation
    # also returning list of frag identifiers so we can destroy old ones
    def construct_fragments_attributes(hash, record, path)
      frag_identifiers = []
      frag_attributes = hash.collect do |frag_header, frag_content|
        tag, identifier = frag_header.split
        frag_hash = {
          identifier: identifier,
          tag: tag
        }

        # tracking fragments that need removing later
        frag_identifiers << identifier

        # based on tag we need to cram content in proper place and proper format
        case tag
        when 'date', 'datetime'
          frag_hash[:datetime] = frag_content
        when 'checkbox'
          frag_hash[:boolean] = frag_content
        when 'file', 'files'
          files, file_ids_destroy = files_content(record, identifier, path, frag_content)
          frag_hash[:files]            = files
          frag_hash[:file_ids_destroy] = file_ids_destroy
        else
          frag_hash[:content] = frag_content
        end

        frag_hash
      end

      [frag_identifiers, frag_attributes]
    end

    # Preparing fragment attachments. Returns hashes with file data for
    # ActiveStorage and a list of ids of old attachements to destroy
    def files_content(record, identifier, path, frag_content)
      # preparing attachments
      if frag_content.nil?
        files = []
      else
        files = frag_content.split("\n").collect do |filename|
          file_handler = File.open(File.join(path, filename))
          {
            io: file_handler,
            filename: filename,
            content_type: MimeMagic.by_magic(file_handler)
          }
        end
      end

      # ensuring that old attachments get removed
      ids_destroy = []
      if (frag = record.fragments.find_by(identifier: identifier))
        ids_destroy = frag.attachments.pluck(:id)
      end

      [files, ids_destroy]
    end

    def link_target_pages
      return unless self.target_pages.present?

      self.target_pages.each do |page_id, target|
        if (target = site.pages.find_by(full_path: target))
          @site.pages.find(page_id).update_column(:target_page_id, target.id)
        end
      end
    end
  end
end
</file>

<file path="test/models/page_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsPageTest < ActiveSupport::TestCase
  setup do
    @site   = comfy_cms_sites(:default)
    @layout = comfy_cms_layouts(:default)
    @page   = comfy_cms_pages(:default)
  end

  def new_params(options = {})
    { label: 'Test Page',
      slug: 'test-page',
      layout: @layout }.merge(options)
  end

  # -- Tests -------------------------------------------------------------------

  def test_fixtures_validity
    Comfy::Cms::Page.all.each do |page|
      assert page.valid?, page.errors.full_messages.to_s
      assert_equal page.content_cache, page.render
    end
  end

  def test_validations
    page = Comfy::Cms::Page.new
    page.save
    assert page.invalid?
    assert_has_errors_on page, :site, :layout, :slug, :label
  end

  def test_validation_of_parent_presence
    page = @site.pages.new(new_params)
    assert !page.parent
    assert page.valid?, page.errors.full_messages.to_s
    assert_equal @page, page.parent
  end

  def test_validation_of_parent_relationship
    assert !@page.parent
    @page.parent = @page
    assert @page.invalid?
    assert_has_errors_on @page, :parent_id

    @page.parent = comfy_cms_pages(:child)
    assert @page.invalid?
    assert_has_errors_on @page, :parent_id
  end

  def test_validation_of_target_page
    page = comfy_cms_pages(:child)
    page.target_page = @page
    page.save!
    assert_equal @page, page.target_page
    page.target_page = page
    assert page.invalid?
    assert_has_errors_on page, :target_page_id
  end

  def test_validation_of_slug
    page = comfy_cms_pages(:child)
    page.slug = 'slug.with.d0ts-and_things'
    assert page.valid?

    page.slug = 'inva lid'
    assert page.invalid?

    page.slug = 'acción'
    assert page.valid?
  end

  def test_validation_of_slug_allows_unicode_accent_characters
    page = comfy_cms_pages(:child)
    thai_character_ko_kai   = "\u0e01"
    thai_character_mai_tho  = "\u0E49"
    page.slug = thai_character_ko_kai + thai_character_mai_tho
    assert page.valid?
  end

  def test_label_assignment
    page = @site.pages.new(
      slug: 'test',
      parent: @page,
      layout: @layout
    )
    assert page.valid?
    assert_equal 'Test', page.label
  end

  def test_create
    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_difference [page_count, fragment_count] do
      page = @site.pages.create!(
        new_params(
          parent: @page,
          fragments_attributes: [
            { identifier: 'content',
              tag: 'text',
              content: 'test' }
          ]
        )
      )
      assert page.is_published?
      assert_equal 1, page.position
    end
  end

  def test_create_with_file
    page_count        = -> { Comfy::Cms::Page.count }
    fragment_count    = -> { Comfy::Cms::Fragment.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference [page_count, fragment_count, attachment_count] do
      page = @site.pages.create!(
        new_params(
          parent: @page,
          fragments_attributes: [{
            identifier: 'test',
            tag: 'file',
            files: [fixture_file_upload('image.jpg', 'image/jpeg')]
          }]
        )
      )
      assert_equal 1, page.fragments.count
      assert page.fragments.first.attachments.attached?
    end
  end

  def test_create_with_files
    page_count        = -> { Comfy::Cms::Page.count }
    fragment_count    = -> { Comfy::Cms::Fragment.count }
    attachment_count  = -> { ActiveStorage::Attachment.count }

    assert_difference [page_count, fragment_count] do
      assert_difference(attachment_count, 2) do
        page = @site.pages.create!(
          new_params(
            parent: @page,
            fragments_attributes: [{
              identifier: 'test',
              tag: 'files',
              files: [
                fixture_file_upload('image.jpg', 'image/jpeg'),
                fixture_file_upload('document.pdf', 'application/pdf')
              ]
            }]
          )
        )
        assert_equal 1, page.fragments.count
        assert page.fragments.first.attachments.attached?
      end
    end
  end

  def test_create_with_date
    string = '1981-10-04 12:34:56'
    datetime = DateTime.parse(string)

    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_difference [page_count, fragment_count] do
      page = @site.pages.create!(
        new_params(
          parent: @page,
          fragments_attributes: [{
            identifier: 'test',
            tag: 'date_time',
            datetime: string
          }]
        )
      )
      frag = page.fragments.first
      assert_equal datetime, frag.datetime
    end
  end

  def test_create_with_boolean
    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_difference [page_count, fragment_count] do
      page = @site.pages.create!(
        new_params(
          parent: @page,
          fragments_attributes: [{
            identifier: 'test',
            tag: 'checkbox',
            boolean: '1'
          }]
        )
      )
      frag = page.fragments.first
      assert frag.boolean
    end
  end

  def test_update
    frag = comfy_cms_fragments(:default)

    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_no_difference [page_count, fragment_count] do
      @page.update!(fragments_attributes: [
        { identifier: frag.identifier,
          content: 'updated content' }
      ])
    end
    frag.reload
    assert_equal 'updated content', frag.content
  end

  def test_update_with_file
    page = @site.pages.new(new_params)
    assert_difference -> { ActiveStorage::Attachment.count } do
      page.update!(
        fragments_attributes: [{
          identifier: 'file',
          tag: 'file',
          files: [fixture_file_upload('document.pdf', 'application/pdf')]
        }]
      )
      assert_equal 1, page.fragments.count
      assert_equal 1, page.fragments.first.attachments.count
      assert_equal 'document.pdf', page.fragments.first.attachments.first.filename.to_s
    end

    fixture_file_upload('document.pdf', 'application/pdf')
  end

  def test_update_with_file_removal
    id = comfy_cms_fragments(:file).attachments.first.id
    assert_difference(-> { ActiveStorage::Attachment.count }, -1) do
      @page.update!(
        fragments_attributes: [{
          identifier: 'file',
          file_ids_destroy: [id]
        }]
      )
    end
  end

  def test_update_with_date
    frag = comfy_cms_fragments(:datetime)
    string = '2020-01-01'
    date = DateTime.parse(string)

    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_no_difference [page_count, fragment_count] do
      @page.update!(fragments_attributes: [
        { identifier: frag.identifier,
          datetime: string }
      ])
    end
    frag.reload
    assert_equal date, frag.datetime
  end

  def test_update_with_boolean
    frag = comfy_cms_fragments(:boolean)
    assert frag.boolean

    page_count      = -> { Comfy::Cms::Page.count }
    fragment_count  = -> { Comfy::Cms::Fragment.count }

    assert_no_difference [page_count, fragment_count] do
      @page.update!(fragments_attributes: [
        { identifier: frag.identifier,
          boolean: '0' }
      ])
    end
    frag.reload
    refute frag.boolean
  end

  def test_update_with_parent_id_change
    page_a = @page
    page_b = comfy_cms_pages(:child)
    page_c = @site.pages.create!(
      label: 'Test Page',
      slug: 'test-page',
      layout: @layout,
      parent: page_a
    )

    assert_equal 2, page_a.children_count
    assert_equal 0, page_b.children_count
    assert_equal 0, page_c.children_count

    page_c.update!(parent_id: page_b)

    [page_a, page_b, page_c].each(&:reload)
    assert_equal 1, page_a.children_count
    assert_equal 1, page_b.children_count
    assert_equal 0, page_c.children_count
  end

  def test_initialization_of_full_path
    page = Comfy::Cms::Page.new
    assert_equal '/', page.full_path

    page = Comfy::Cms::Page.new(new_params)
    assert page.invalid?
    assert_has_errors_on page, :site

    page = @site.pages.new(new_params(parent: @page))
    assert page.valid?
    assert_equal '/test-page', page.full_path

    page = @site.pages.new(new_params(parent: comfy_cms_pages(:child)))
    assert page.valid?
    assert_equal '/child-page/test-page', page.full_path

    Comfy::Cms::Page.destroy_all
    page = @site.pages.new(new_params)
    assert page.valid?
    assert_equal '/', page.full_path
  end

  def test_sync_child_pages
    page = comfy_cms_pages(:child)
    page_a = @site.pages.create!(new_params(parent: page, slug: 'test-page-1'))
    page_b = @site.pages.create!(new_params(parent: page, slug: 'test-page-2'))
    page_c = @site.pages.create!(new_params(parent: page_b, slug: 'test-page-3'))
    page_d = @site.pages.create!(new_params(parent: page_a, slug: 'test-page-4'))

    assert_equal '/child-page/test-page-1', page_a.full_path
    assert_equal '/child-page/test-page-2', page_b.full_path
    assert_equal '/child-page/test-page-2/test-page-3', page_c.full_path
    assert_equal '/child-page/test-page-1/test-page-4', page_d.full_path

    page.update!(slug: 'updated-page')
    assert_equal '/updated-page', page.full_path
    [page_a, page_b, page_c, page_d].each(&:reload)
    assert_equal '/updated-page/test-page-1', page_a.full_path
    assert_equal '/updated-page/test-page-2', page_b.full_path
    assert_equal '/updated-page/test-page-2/test-page-3', page_c.full_path
    assert_equal '/updated-page/test-page-1/test-page-4', page_d.full_path

    page_b.update!(parent: page_a)
    [page_a, page_b, page_c, page_d].each(&:reload)
    assert_equal '/updated-page/test-page-1', page_a.full_path
    assert_equal '/updated-page/test-page-1/test-page-2', page_b.full_path
    assert_equal '/updated-page/test-page-1/test-page-2/test-page-3', page_c.full_path
    assert_equal '/updated-page/test-page-1/test-page-4', page_d.full_path
  end

  def test_children_count_updating
    page_a = @page
    page_b = comfy_cms_pages(:child)
    assert_equal 1, page_a.children_count
    assert_equal 0, page_b.children_count

    page_c = @site.pages.create!(new_params(parent: page_b))
    [page_a, page_b].each(&:reload)
    assert_equal 1, page_a.children_count
    assert_equal 1, page_b.children_count
    assert_equal 0, page_c.children_count

    page_c.update!(parent: page_a)
    [page_a, page_b].each(&:reload)
    assert_equal 2, page_a.children_count
    assert_equal 0, page_b.children_count

    page_c.destroy
    [page_a, page_b].each(&:reload)
    assert_equal 1, page_a.children_count
    assert_equal 0, page_b.children_count
  end

  def test_cascading_destroy
    assert_difference(-> { Comfy::Cms::Page.count }, -2) do
      assert_difference(-> { Comfy::Cms::Fragment.count }, -5) do
        assert_difference(-> { Comfy::Cms::Translation.count }, -1) do
          @page.destroy
        end
      end
    end
  end

  def test_options_for_select
    options = ['Default Page', '. . Child Page']
    assert_equal options, Comfy::Cms::Page.options_for_select(site: @site).map(&:first)

    expected = ['Default Page']
    actual = Comfy::Cms::Page.options_for_select(
      site: @site,
      current_page: comfy_cms_pages(:child),
      exclude_self: true
    ).map(&:first)
    assert_equal expected, actual

    Comfy::Cms::Page.delete_all
    assert_equal [], Comfy::Cms::Page.options_for_select(site: @site).map(&:first)
  end

  def test_fragments_attributes
    assert_equal @page.fragments.count, @page.fragments_attributes.size

    @page.fragments_attributes = [
      { identifier: 'content',
        content: 'updated content' }
    ]

    assert_equal [
      { identifier: 'boolean',
        tag: 'checkbox',
        content: nil,
        datetime: nil,
        boolean: true },
      { identifier: 'file',
        tag: 'file',
        content: nil,
        datetime: nil,
        boolean: false },
      { identifier: 'datetime',
        tag: 'datetime',
        content: nil,
        datetime: comfy_cms_fragments(:datetime).datetime,
        boolean: false },
      { identifier: 'content',
        tag: 'text',
        content: 'updated content',
        datetime: nil,
        boolean: false }
    ], @page.fragments_attributes

    assert_equal [
      { identifier: 'boolean',
        tag: 'checkbox',
        content: nil,
        datetime: nil,
        boolean: true },
      { identifier: 'file',
        tag: 'file',
        content: nil,
        datetime: nil,
        boolean: false },
      { identifier: 'datetime',
        tag: 'datetime',
        content: nil,
        datetime: comfy_cms_fragments(:datetime).datetime,
        boolean: false },
      { identifier: 'content',
        tag: 'text',
        content: 'content',
        datetime: nil,
        boolean: false }
    ], @page.fragments_attributes_was
  end

  def test_render
    expected = @page.render
    assert_equal 'content', expected
  end

  def test_fragment_nodes
    content = 'a {{cms:text a}} b {{cms:snippet b}} c {{cms:text c}}'
    @page.layout.update_column(:content, content)
    nodes = @page.fragment_nodes
    assert_equal 2, nodes.count
    assert_equal 'a', nodes[0].identifier
    assert_equal 'c', nodes[1].identifier
  end

  def test_fragment_nodes_with_duplicates
    content = '{{cms:wysiwyg test}} {{cms:markdown test}}'
    @page.layout.update_column(:content, content)
    nodes = @page.fragment_nodes
    assert_equal 1, nodes.count
    assert_equal ComfortableMediaSurfer::Content::Tags::Wysiwyg, nodes[0].class
    assert_equal 'test', nodes[0].identifier
  end

  def test_fragment_nodes_with_no_layout
    @page.update_column(:layout_id, nil)
    assert_equal [], @page.fragment_nodes
  end

  def test_content_caching
    assert_equal @page.content_cache, @page.render

    @page.update_columns(content_cache: 'Old Content')
    refute_equal @page.content_cache, @page.render

    @page.clear_content_cache!
    assert_equal @page.content_cache, @page.render
  end

  def test_content_cache_clear_on_save
    old_content = 'Old Content'
    @page.update_columns(content_cache: old_content)

    @page.save!
    refute_equal old_content, @page.content_cache
  end

  def test_scope_published
    assert_equal 2, Comfy::Cms::Page.published.count
    comfy_cms_pages(:child).update_columns(is_published: false)
    assert_equal 1, Comfy::Cms::Page.published.count
  end

  def test_root?
    assert @page.root?
    refute comfy_cms_pages(:child).root?
  end

  def test_url
    assert_equal '//www.example.com/', @page.url
    assert_equal '//www.example.com/child-page', comfy_cms_pages(:child).url

    assert_equal '/', @page.url(relative: true)
    assert_equal '/child-page', comfy_cms_pages(:child).url(relative: true)

    @site.update_columns(path: '/en/site')
    @page.reload
    comfy_cms_pages(:child).reload

    assert_equal '//www.example.com/en/site/', @page.url
    assert_equal '//www.example.com/en/site/child-page', comfy_cms_pages(:child).url

    assert_equal '/en/site/', @page.url(relative: true)
    assert_equal '/en/site/child-page', comfy_cms_pages(:child).url(relative: true)
  end

  def test_url_with_public_cms_path
    ComfortableMediaSurfer.config.public_cms_path = '/custom'
    assert_equal '//www.example.com/custom/', @page.url
    assert_equal '//www.example.com/custom/child-page', comfy_cms_pages(:child).url

    assert_equal '/custom/', @page.url(relative: true)
    assert_equal '/custom/child-page', comfy_cms_pages(:child).url(relative: true)
  end

  def test_unicode_slug_escaping
    page = comfy_cms_pages(:child)
    page_a = @site.pages.create!(new_params(parent: page, slug: 'tést-ünicode-slug'))
    assert_equal CGI.escape('tést-ünicode-slug'), page_a.slug
    assert_equal CGI.escape('/child-page/tést-ünicode-slug').gsub('%2F', '/'), page_a.full_path
  end

  def test_unicode_slug_unescaping
    page = comfy_cms_pages(:child)
    @site.pages.create!(new_params(parent: page, slug: 'tést-ünicode-slug'))
    found_page = @site.pages.where(slug: CGI.escape('tést-ünicode-slug')).first
    assert_equal 'tést-ünicode-slug', found_page.slug
    assert_equal '/child-page/tést-ünicode-slug', found_page.full_path
  end

  def test_identifier
    assert_equal 'index',       @page.identifier
    assert_equal 'child-page',  comfy_cms_pages(:child).identifier

    @page.update_column(:slug, 'index')
    assert_equal 'index', comfy_cms_pages(:default).identifier
  end

  def test_children_count_updating_on_move
    page_a = @page
    page_b = comfy_cms_pages(:child)
    page_c = @site.pages.create!(new_params(parent: page_b))

    page_b.reload

    assert_equal 1, page_a.children_count
    assert_equal 1, page_b.children_count
    assert_equal 0, page_c.children_count

    page_c.parent_id = page_a.id
    page_c.save!

    [page_a, page_b, page_c].each(&:reload)

    assert_equal 2, page_a.children_count
    assert_equal 0, page_b.children_count
    assert_equal 0, page_c.children_count
  end

  def test_translate
    I18n.locale = :fr

    translation = comfy_cms_translations(:default)
    translation.update_columns(layout_id: comfy_cms_layouts(:nested).id)

    @page.translate!
    assert @page.readonly?

    assert_equal comfy_cms_layouts(:nested), @page.layout
    assert_equal 'Default Translation', @page.label
    assert_equal 'Translation Content', @page.content_cache

    frag = @page.fragments.find { |f| f.identifier == 'content' }
    assert_equal 'translated content', frag.content
  end

  def test_translate_with_no_translations
    I18n.locale = :fr
    Comfy::Cms::Translation.delete_all

    @page.translate!
    assert_equal 'Default Page', @page.label
  end

  def test_translate_with_default_locale
    I18n.locale = @page.site.locale

    @page.translate!
    assert_equal 'Default Page', @page.label
  end

  def test_translate_with_unpublished
    I18n.locale = :fr

    comfy_cms_translations(:default).update_column(:is_published, false)
    assert_raises ActiveRecord::RecordNotFound do
      @page.translate!
    end
  end

  def test_translate_with_invalid_locale
    I18n.locale = :es

    assert_raises ActiveRecord::RecordNotFound do
      @page.translate!
    end
  end
end
</file>

<file path=".travis.yml">
dist: xenial
services:
  - xvfb
addons:
  sources:
  - google-chrome
  apt:
    packages:
    - google-chrome-stable

language: ruby
rvm:
  - 2.3.8
  - 2.4.9
  - 2.5.7
  - 2.6.5
gemfile:
  - test/gemfiles/5.2.gemfile
jobs:
  include:
    - rvm: 2.5.7
      gemfile: test/gemfiles/6.0.gemfile
    - rvm: 2.6.5
      gemfile: test/gemfiles/6.0.gemfile
branches:
  only:
    - master
before_install:
  - gem update --system
  - gem update bundler
before_script:
  - wget http://chromedriver.storage.googleapis.com/2.36/chromedriver_linux64.zip
  - unzip chromedriver_linux64.zip
  - sudo apt-get install libnss3
  - sudo apt-get --only-upgrade install google-chrome-stable
  - sudo cp chromedriver /usr/local/bin/.
  - sudo chmod +x /usr/local/bin/chromedriver
  - export DISPLAY=:99.0
  - sleep 3
script:
  - bundle exec rake db:migrate
  - bundle exec rake test
  - SKIP_COV=true bundle exec rake test:system
  - bundle exec rubocop
</file>

<file path="app/models/comfy/cms/page.rb">
# frozen_string_literal: true

class Comfy::Cms::Page < ActiveRecord::Base
  self.table_name = 'comfy_cms_pages'

  include Comfy::Cms::WithFragments
  include Comfy::Cms::WithCategories

  cms_acts_as_tree counter_cache: :children_count, order: :position
  cms_has_revisions_for :fragments_attributes

  attr_accessor :content

  # -- Relationships -----------------------------------------------------------
  belongs_to :site
  belongs_to :target_page,
             class_name: 'Comfy::Cms::Page',
             optional: true

  has_many :translations,
           dependent: :destroy

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assigns_label,
                    :assign_parent,
                    :escape_slug,
                    :assign_full_path
  before_create     :assign_position
  after_save        :sync_child_full_paths!
  after_find        :unescape_slug_and_path

  # -- Validations -------------------------------------------------------------
  validates :label,
            presence: true
  validates :slug,
            presence: true,
            uniqueness: { scope: :parent_id },
            unless: ->(p) {
              p.site && (p.site.pages.count.zero? || p.site.pages.root == self)
            }
  validate :validate_target_page
  validate :validate_format_of_unescaped_slug

  # -- Scopes ------------------------------------------------------------------
  scope :published, -> { where(is_published: true) }

  # -- Class Methods -----------------------------------------------------------
  # Tree-like structure for pages
  def self.options_for_select(site:, current_page: nil, exclude_self: false)
    options = []

    options_for_page = ->(page, depth = 0) do
      return if page.nil?
      return if exclude_self && page == current_page

      options << ["#{'. . ' * depth}#{page.label}", page.id]

      page.children.order(:position).each do |child_page|
        options_for_page.call(child_page, depth + 1)
      end
    end

    options_for_page.call(site.pages.root)

    options
  end

  # -- Instance Methods --------------------------------------------------------
  # For previewing purposes sometimes we need to have full_path set. This
  # full path take care of the pages and its childs but not of the site path
  def full_path
    read_attribute(:full_path) || assign_full_path
  end

  # Somewhat unique method of identifying a page that is not a full_path
  def identifier
    parent_id.blank? ? 'index' : full_path[1..].parameterize
  end

  # Full url for a page
  def url(relative: false)
    [site.url(relative: relative), full_path].compact.join
  end

  # This method will mutate page object by transfering attributes from translation
  # for a given locale.
  def translate!
    # If site locale same as page's or there's no translastions, we do nothing
    if site.locale == I18n.locale.to_s || translations.blank?
      return
    end

    translation = translations.published.find_by!(locale: I18n.locale)
    self.layout        = translation.layout
    self.label         = translation.label
    self.content_cache = translation.content_cache

    # We can't just assign fragments as it's a relation and will write to DB
    # This has odd side-effect of preserving page's fragments and just replacing
    # them from the translation. Not an issue if all fragments match.
    self.fragments_attributes = translation.fragments_attributes
    readonly!

    self
  end

protected

  def assigns_label
    self.label = label.blank? ? slug.try(:titleize) : label
  end

  def assign_parent
    return unless site

    self.parent ||= site.pages.root unless self == site.pages.root || site.pages.count.zero?
  end

  def assign_full_path
    self.full_path =
      if self.parent
        [CGI.escape(self.parent.full_path).gsub('%2F', '/'), slug].join('/').squeeze('/')
      else
        '/'
      end
  end

  def assign_position
    return unless self.parent
    return if position.to_i.positive?

    max = self.parent.children.maximum(:position)
    self.position = max ? max + 1 : 0
  end

  def validate_target_page
    return unless target_page

    p = self
    while p.target_page
      if (p = p.target_page) == self
        return errors.add(:target_page_id, 'Invalid Redirect')
      end
    end
  end

  def validate_format_of_unescaped_slug
    return unless slug.present?

    unescaped_slug = CGI.unescape(slug)
    errors.add(:slug, :invalid) unless unescaped_slug =~ %r{^\p{Alnum}[.\p{Alnum}\p{Mark}_-]*$}i
  end

  # Forcing re-saves for child pages so they can update full_paths
  def sync_child_full_paths!
    return unless full_path_previously_changed?

    children.each do |p|
      p.update_attribute(:full_path, p.send(:assign_full_path))
    end
  end

  # Escape slug unless it's nonexistent (root)
  def escape_slug
    self.slug = CGI.escape(slug) unless slug.nil?
  end

  # Unescape the slug and full path back into their original forms unless they're nonexistent
  def unescape_slug_and_path
    self.slug       = CGI.unescape(slug)      unless slug.nil?
    self.full_path  = CGI.unescape(full_path) unless full_path.nil?
  end
end
</file>

<file path="test/models/file_test.rb">
# frozen_string_literal: true

require_relative '../test_helper'

class CmsFileTest < ActiveSupport::TestCase
  def test_fixtures_validity
    Comfy::Cms::File.all.each do |file|
      assert file.valid?, file.errors.full_messages.to_s
      assert file.attachment
      assert file.attachment.blob
    end
  end

  def test_validations
    file = Comfy::Cms::File.new
    assert file.invalid?
    assert_has_errors_on file, :site, :file, :label
  end

  def test_creation
    assert_difference ['Comfy::Cms::File.count', 'ActiveStorage::Attachment.count'] do
      file = comfy_cms_sites(:default).files.create(
        label: 'test',
        description: 'test file',
        file: fixture_file_upload('image.jpg', 'image/jpeg')
      )
      assert_equal 1, file.position
    end
  end

  def test_creation_without_label
    assert_difference ['Comfy::Cms::File.count', 'ActiveStorage::Attachment.count'] do
      file = comfy_cms_sites(:default).files.create(
        description: 'test file',
        file: fixture_file_upload('image.jpg', 'image/jpeg')
      )
      assert_equal 1, file.position
      assert_equal 'image.jpg', file.label
    end
  end

  def test_scope_with_images
    assert_equal 1, Comfy::Cms::File.with_attached_attachment.with_images.count
    active_storage_blobs(:default).update_column(:content_type, 'application/pdf')
    assert_equal 0, Comfy::Cms::File.with_attached_attachment.with_images.count
  end
end
</file>

<file path="app/models/comfy/cms/file.rb">
# frozen_string_literal: true

class Comfy::Cms::File < ActiveRecord::Base
  self.table_name = 'comfy_cms_files'

  include Comfy::Cms::WithCategories

  VARIANT_SIZE = {
    redactor: { resize_to_limit: [100, 75] },
    thumb: { resize_to_limit: [200, 150] },
    icon: { resize_to_limit: [28, 28] }
  }.freeze

  # temporary place to store attachment
  attr_accessor :file

  has_one_attached :attachment

  # -- Relationships -----------------------------------------------------------
  belongs_to :site

  # -- Callbacks ---------------------------------------------------------------
  before_validation :assign_label, on: :create
  before_create :assign_position
  # active_storage attachment behavior changed in rails 6
  before_save :process_attachment
  after_save :clear_page_content_cache

  # -- Validations -------------------------------------------------------------
  validates :label, presence: true
  validates :file, presence: true, on: :create

  # -- Scopes ------------------------------------------------------------------
  # When we need to grab only files with image attachments.
  # Don't forget to include `with_attached_attachment` before calling this
  scope :with_images, -> {
    where("active_storage_blobs.content_type LIKE 'image/%'").references(:blob)
  }

private

  def clear_page_content_cache
    Comfy::Cms::Page.where(id: site.pages.pluck(:id)).update_all(content_cache: nil)
  end

protected

  def assign_position
    max = Comfy::Cms::File.maximum(:position)
    self.position = max ? max + 1 : 0
  end

  # TODO: Change db schema not to set blank string
  def assign_label
    return if label.present?

    self.label = file&.original_filename
  end

  def process_attachment
    return if @file.blank?

    self.attachment = @file
  end
end
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project's source code will be documented in this file. Items under `Unreleased` are upcoming features that will be out in the next version.

## Contributors

Please follow the recommendations outlined at [keepachangelog.com](https://keepachangelog.com). Please use the existing headings and styling as a guide, and add a link for the version diff at the bottom of the file. Also, please update the `Unreleased` link to compare it to the latest release version.

For all changes prior to the inception of this project, see the [Release History](https://github.com/comfy/comfortable-mexican-sofa/releases) of ComfortableMexicanSofa.

## Versions

## [Unreleased]

## [v3.1.0] - 2024-12-31 (gem yanked, pending resolution of [Issue 8](https://github.com/shakacode/comfortable-media-surfer/issues/8)

### Added

- Added compatibility and support for Rails 8
- Added compatibility and support for propshaft (sprockets is still supported) - installing the gem now requires NodeJS to be installed. In addition, the `comfy:compile_assets` task needs to be run after installing the gem.

### Removed

- Removed sassc sprockets
- Rails 6.x compatibility dropped, since it is not being maintained as of October 2024

### Changed

- Updated README links to point to the Surfer wiki

## [v3.0.0] - 2024-11-30

First release of `comfortable_media_surfer`. This new gem is a revival of [ComfortableMexicanSofa](https://github.com/comfy/comfortable-mexican-sofa) which had been dormant for nearly 5 years.

### Fixed

- Fixed all broken tests to now pass on Rails 6.x and 7.x
- Code syntax per Rubocop linting

### Added

- Rails 7 compatibility, including many config and code changes. See the [PR](https://github.com/shakacode/comfortable-media-surfer/pull/1/files) for full details
- Added github actions workflows for CI build and test coverage
- Added CMS tags for navigation: children, siblings, breadcrumbs, with tests
- Added CMS tag for embedded audio, with tests
- Added CMS tag for image, with tests
- Added ability to write CMS snippets in Markdown, with tests

### Removed

- Rails 5 compatibility dropped, as it is EOL

### Changed

- Rebranded **ComfortableMexicanSofa** as **ComfortableMediaSurfer** in order to publish new gem (database table names and schema have not changed).

[Unreleased]: https://github.com/shakacode/comfortable-media-surfer/compare/v3.1.0...master
[v3.1.0]: https://github.com/shakacode/comfortable-media-surfer/compare/v3.0.0...v3.1.0
[v3.0.0]: https://github.com/shakacode/comfortable-media-surfer/compare/v2.0.19...v3.0.0
</file>

<file path="comfortable_media_surfer.gemspec">
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path('lib', __dir__)
require 'comfortable_media_surfer/version'

Gem::Specification.new do |spec|
  spec.name          = 'comfortable_media_surfer'
  spec.version       = ComfortableMediaSurfer::VERSION
  spec.authors       = ['Oleg Khabarov', 'Andrew vonderLuft', 'ShakaCode']
  spec.email         = ['justin@shakacode.com']
  spec.homepage      = 'https://github.com/shakacode/comfortable-media-surfer'
  spec.summary       = 'Rails 7.0+ CMS Engine'
  spec.description   = 'ComfortableMediaSurfer is a powerful Rails 7.0+ CMS Engine'
  spec.license       = 'MIT'

  spec.post_install_message = 'Please run rake comfy:compile_assets to compile assets.'

  spec.files = `git ls-files -z`.split("\x0").reject do |f|
    f.match(%r{^(test|doc)/})
  end

  spec.required_ruby_version = '>= 3.2.0'
  spec.metadata['rubygems_mfa_required'] = 'true'

  spec.add_dependency 'active_link_to',       '~> 1.0',   '>= 1.0.5'
  spec.add_dependency 'comfy_bootstrap_form', '~> 4.0',   '>= 4.0.0'
  spec.add_dependency 'haml-rails',           '~> 2.1',   '>= 2.1.0'
  spec.add_dependency 'image_processing',     '~> 1.2',   '>= 1.12.2'
  spec.add_dependency 'kaminari',             '~> 1.2',   '>= 1.2.2'
  spec.add_dependency 'kramdown',             '~> 2.4',   '>= 2.4.0'
  spec.add_dependency 'mimemagic',            '~> 0.4',   '>= 0.4.3'
  spec.add_dependency 'mini_magick',          '~> 4.12',  '>= 4.12.0'
  spec.add_dependency 'rails',                '>= 7.0.0'
  spec.add_dependency 'rails-i18n',           '>= 6.0.0'
end
</file>

<file path="Gemfile">
# frozen_string_literal: true

source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

gemspec

gem 'rails', '~> 8.0'

group :development, :test do
  gem 'autoprefixer-rails', '~> 10.4.16.0'
  gem 'byebug',             '~> 11.1.0', platforms: %i[mri mingw x64_mingw]
  gem 'gem-release'
  gem 'image_processing',   '>= 1.12.0'
  gem 'propshaft',          '~> 1.1.0'
  gem 'sqlite3',            '>= 2.1'
  # gem 'mysql2',             '~> 0.5'
  # gem 'pg',                 '~> 1.5.4'
end

group :development do
  gem 'listen',       '~> 3.9.0'
  gem 'web-console',  '~> 4.2'
end

group :test do
  gem 'brakeman',                 '~> 6.1.2'
  gem 'bundler-audit',            '~> 0.9.1'
  gem 'coveralls_reborn',         '~> 0.28.0', require: false
  gem 'cuprite',                  '>= 0.15'
  gem 'equivalent-xml',           '~> 0.6.0'
  gem 'minitest',                 '>= 5.23.0'
  gem 'minitest-reporters',       '>= 1.6.1'
  gem 'mocha',                    '>= 2.3.0', require: false
  gem 'ostruct'
  gem 'puma'
  gem 'rails-controller-testing', '~> 1.0.5'
  gem 'rubocop',                  '~> 1.63.0', require: false
  gem 'rubocop-minitest'
  gem 'rubocop-rails'
  gem 'simplecov', '~> 0.22.0', require: false
end
</file>

<file path="README.md">
[![Rails CI](https://github.com/shakacode/comfortable-media-surfer/actions/workflows/rubyonrails.yml/badge.svg)](https://github.com/shakacode/comfortable-media-surfer/actions/workflows/rubyonrails.yml)
[![Coverage Status](https://coveralls.io/repos/github/shakacode/comfortable-media-surfer/badge.svg?branch=HEAD)](https://coveralls.io/github/shakacode/comfortable-media-surfer?branch=HEAD)
[![Gem Version](https://img.shields.io/gem/v/comfortable_media_surfer.svg?style=flat)](http://rubygems.org/gems/comfortable_media_surfer)
[![Gem Downloads](https://img.shields.io/gem/dt/comfortable_media_surfer.svg?style=flat)](http://rubygems.org/gems/comfortable_media_surfer)
[![GitHub Release Date - Published_At](https://img.shields.io/github/release-date/shakacode/comfortable-media-surfer?label=last%20release&color=seagreen)](https://github.com/shakacode/comfortable-media-surfer/releases)

# ComfortableMediaSurfer

ComfortableMediaSurfer is a powerful Ruby 7.0+ CMS (Content Management System) Engine, picking up where [ComfortableMexicanSofa](https://github.com/comfy/comfortable-mexican-sofa) left off.

## Features

- Simple drop-in integration with Rails 7.0+ apps with minimal configuration
* The CMS keeps clear from the rest of your application
* Powerful page templating capability using [Content Tags](https://github.com/shakacode/comfortable-media-surfer/wiki/Docs:-Content-Tags)
* [Multiple Sites](https://github.com/shakacode/comfortable-media-surfer/wiki/Docs:-Sites) from a single installation
* Multi-Language Support (i18n) (ca, cs, da, de, en, es, fi, fr, gr, hr, it, ja, nb, nl, pl, pt-BR, ru, sv, tr, uk, zh-CN, zh-TW) and page localization.
* [CMS Seeds](https://github.com/shakacode/comfortable-media-surfer/wiki/Docs:-CMS-Seeds) for initial content population
* [Revision History](https://github.com/shakacode/comfortable-media-surfer/wiki/Docs:-Revisions) to revert changes
* [Extendable Admin Area](https://github.com/shakacode/comfortable-media-surfer/wiki/HowTo:-Reusing-Admin-Area) built with [Bootstrap 4](http://getbootstrap.com) (responsive design). Using [CodeMirror](http://codemirror.net) for HTML and Markdown highlighing and [Redactor](http://imperavi.com/redactor) as the WYSIWYG editor.

## Dependencies

- File attachments are handled by [ActiveStorage](https://github.com/rails/rails/tree/master/activestorage). Make sure that you can run appropriate migrations by running: `rails active_storage:install`
- Image resizing is done with with [ImageMagick](http://www.imagemagick.org/script/download.php), so make sure it's installed.
- Pagination is handled by [kaminari](https://github.com/amatsuda/kaminari).

## Compatibility

On Ruby 3.x, Rails 7.x +

## Installation

Add gem definition to your Gemfile:

```ruby
gem "comfortable_media_surfer", "~> 3.1.0"
```

Then from the Rails project's root run:

```
    bundle install
    rails generate comfy:cms
    rake db:migrate
```

Now take a look inside your `config/routes.rb` file. You'll see where routes attach for the admin area and content serving. Make sure that content serving route appears as a very last item or it will make all other routes to be inaccessible.

```ruby
comfy_route :cms_admin, path: "/admin"
comfy_route :cms, path: "/"
```

## Converting from ComfortableMexicanSofa or Occams

### From Sofa to Surfer

The database structure is the same.  Your Sofa project will also need to be upgraded to >= Rails 7.x  
Then you should simply be able to update your Gemfile thus, and run bundle

```ruby
gem 'comfortable_media_surfer', '~> 3.1.0'
```

### From Occams to Surfer

Again the project must be >= Rails 7.x.  Since the schema is different, executing this SQL should get you set for Surfer

```sql
ALTER TABLE occams_cms_categories RENAME TO comfy_cms_categories;
ALTER TABLE occams_cms_categorizations RENAME TO comfy_cms_categorizations;
ALTER TABLE occams_cms_files RENAME TO comfy_cms_files;
ALTER TABLE occams_cms_fragments RENAME TO comfy_cms_fragments;
ALTER TABLE occams_cms_layouts RENAME TO comfy_cms_layouts;
ALTER TABLE occams_cms_pages RENAME TO comfy_cms_pages;
ALTER TABLE occams_cms_revisions RENAME TO comfy_cms_revisions;
ALTER TABLE occams_cms_sites RENAME TO comfy_cms_sites;
ALTER TABLE occams_cms_snippets RENAME TO comfy_cms_snippets;
ALTER TABLE occams_cms_translations RENAME TO comfy_cms_translations;
UPDATE comfy_cms_fragments SET record_type = 'Comfy::Cms::Page' WHERE record_type = 'Occams::Cms::Page';
UPDATE comfy_cms_fragments SET record_type = 'Comfy::Cms::Layout' WHERE record_type = 'Occams::Cms::Layout';
UPDATE comfy_cms_fragments SET record_type = 'Comfy::Cms::Snippet' WHERE record_type = 'Occams::Cms::Snippet';
UPDATE comfy_cms_revisions SET record_type = 'Comfy::Cms::Page' WHERE record_type = 'Occams::Cms::Page';
UPDATE comfy_cms_revisions SET record_type = 'Comfy::Cms::Layout' WHERE record_type = 'Occams::Cms::Layout';
UPDATE comfy_cms_revisions SET record_type = 'Comfy::Cms::Snippet' WHERE record_type = 'Occams::Cms::Snippet';
```

## Quick Start Guide

After finishing installation you should be able to navigate to http://localhost:3000/admin

Default username and password is 'user' and 'pass'. You probably want to change it right away. Admin credentials (among other things) can be found and changed in the cms initializer: [/config/initializers/comfortable_media_surfer.rb](https://github.com/shakacode/comfortable-media-surfer/blob/master/config/initializers/comfortable_media_surfer.rb)

Before creating pages and populating them with content we need to create a Site. Site defines a hostname, content path and its language.

After creating a Site, you need to make a Layout. Layout is the template of your pages; it defines some reusable content (like header and footer, for example) and places where the content goes. A very simple layout can look like this:

```html
<html>
  <body>
    <h1>{{ cms:text title }}</h1>
    {{ cms:wysiwyg content }}
  </body>
</html>
```

Once you have a layout, you may start creating pages and populating content. It's that easy.

## Documentation

For more information on how to use this CMS please refer to the [Wiki](https://github.com/shakacode/comfortable-media-surfer/wiki). Section that might be of interest is the entry
on [Content Tags](https://github.com/shakacode/comfortable-media-surfer/wiki/Docs:-Content-Tags).

## Add-ons

If you want to add a Blog functionality to your app take a look at
[ComfyBlog](https://github.com/comfy/comfy-blog).

![Admin Area Preview](doc/preview.jpg)

#### Old Versions of ComfortableMexicanSofa

[CHANGELOG](//github.com/comfy/comfortable-mexican-sofa/releases) is documented in ComfortableMexicanSofa Github releases.

#### Contributing

ComfortableMediaSurfer can run like any Rails application in development. It's as easy to work on as any other Rails app. For more detail see [CONTRIBUTING](CONTRIBUTING.md)

#### Testing

- `bin/rails db:migrate RAILS_ENV=test`
- `rake db:test:prepare`
- `rake test`

#### Acknowledgements

- to [Oleg Khabarov](https://github.com/GBH), the creator of [ComfortableMexicanSofa](https://github.com/comfy/comfortable-mexican-sofa)
- to [Roman Almeida](https://github.com/nasmorn) for contributing OEM License for [Redactor Text Editor](http://imperavi.com/redactor)

---

Copyright 2010-2019 Oleg Khabarov, 2024 ShakaCode LLC
Released under the [MIT license](LICENSE)
</file>

<file path="lib/comfortable_media_surfer/version.rb">
# frozen_string_literal: true

module ComfortableMediaSurfer
  VERSION = '3.1.1'
end
</file>

</files>
